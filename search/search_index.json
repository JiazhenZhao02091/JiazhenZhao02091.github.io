{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my website. \u4e2a\u4eba\u4ecb\u7ecd | \u6280\u672f\u7231\u597d\u8005 My name is Jiazhen Zhao . I am a male born in 2002 and currently studying at the School of Computer Science and Software Engineering at Nanyang Institute of Technology.Nice to meet you! \u8d75\u5bb6\u632f \uff0c\u6027\u522b\u7537\uff0c02\u5e74\u51fa\u751f\uff0c\u76ee\u524d\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662\u8ba1\u7b97\u673a\u4e0e\u8f6f\u4ef6\u5b66\u9662\uff0c\u5f88\u9ad8\u5174\u8ba4\u8bc6\u4f60\uff01 \u57fa\u672c\u4fe1\u606f Email: 873694994@qq.com | zhaojiazhen12318@gmail.com Github: https://github.com/JiazhenZhao02091 \u6559\u80b2\u80cc\u666f 2021.09-\u81f3\u4eca\uff1a\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662 \u7231\u597d \u4e52\u4e53\u7403 \u8dd1\u6b65 \u5409\u4ed6","title":"Home"},{"location":"#welcome-to-my-website","text":"","title":"Welcome to my website."},{"location":"#_1","text":"My name is Jiazhen Zhao . I am a male born in 2002 and currently studying at the School of Computer Science and Software Engineering at Nanyang Institute of Technology.Nice to meet you! \u8d75\u5bb6\u632f \uff0c\u6027\u522b\u7537\uff0c02\u5e74\u51fa\u751f\uff0c\u76ee\u524d\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662\u8ba1\u7b97\u673a\u4e0e\u8f6f\u4ef6\u5b66\u9662\uff0c\u5f88\u9ad8\u5174\u8ba4\u8bc6\u4f60\uff01","title":"\u4e2a\u4eba\u4ecb\u7ecd | \u6280\u672f\u7231\u597d\u8005"},{"location":"#_2","text":"Email: 873694994@qq.com | zhaojiazhen12318@gmail.com Github: https://github.com/JiazhenZhao02091","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"#_3","text":"2021.09-\u81f3\u4eca\uff1a\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662","title":"\u6559\u80b2\u80cc\u666f"},{"location":"#_4","text":"\u4e52\u4e53\u7403 \u8dd1\u6b65 \u5409\u4ed6","title":"\u7231\u597d"},{"location":"about/","text":"\u4e2a\u4eba\u4ecb\u7ecd My name is Jiazhen Zhao . I am a male born in 2002 and currently studying at the School of Computer Science and Software Engineering at Nanyang Institute of Technology. My email addresses are 873694994@qq.com and zhaojiazhen12318@gmail.com . My GitHub profile can be found at https://github.com/JiazhenZhao02091 . Nice to meet you! \u8d75\u5bb6\u632f \uff0c\u6027\u522b\u7537\uff0c02\u5e74\u51fa\u751f\uff0c\u76ee\u524d\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662\u8ba1\u7b97\u673a\u4e0e\u8f6f\u4ef6\u5b66\u9662\uff0c\u6211\u7684\u90ae\u7bb1\uff1a 873694994@qq.com && zhaojiazhen12318@gmail.com \uff0cGitHub\u4e3b\u9875\uff1a https://github.com/JiazhenZhao02091 ,\u5f88\u9ad8\u5174\u8ba4\u8bc6\u4f60\uff01 \u6559\u80b2\u80cc\u666f 2021-\u81f3\u4eca\uff1a\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662 \u7231\u597d \u4e52\u4e53\u7403 \u8dd1\u6b65 \u5409\u4ed6","title":"About"},{"location":"about/#_1","text":"My name is Jiazhen Zhao . I am a male born in 2002 and currently studying at the School of Computer Science and Software Engineering at Nanyang Institute of Technology. My email addresses are 873694994@qq.com and zhaojiazhen12318@gmail.com . My GitHub profile can be found at https://github.com/JiazhenZhao02091 . Nice to meet you! \u8d75\u5bb6\u632f \uff0c\u6027\u522b\u7537\uff0c02\u5e74\u51fa\u751f\uff0c\u76ee\u524d\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662\u8ba1\u7b97\u673a\u4e0e\u8f6f\u4ef6\u5b66\u9662\uff0c\u6211\u7684\u90ae\u7bb1\uff1a 873694994@qq.com && zhaojiazhen12318@gmail.com \uff0cGitHub\u4e3b\u9875\uff1a https://github.com/JiazhenZhao02091 ,\u5f88\u9ad8\u5174\u8ba4\u8bc6\u4f60\uff01","title":"\u4e2a\u4eba\u4ecb\u7ecd"},{"location":"about/#_2","text":"2021-\u81f3\u4eca\uff1a\u5c31\u8bfb\u4e8e\u5357\u9633\u7406\u5de5\u5b66\u9662","title":"\u6559\u80b2\u80cc\u666f"},{"location":"about/#_3","text":"\u4e52\u4e53\u7403 \u8dd1\u6b65 \u5409\u4ed6","title":"\u7231\u597d"},{"location":"CN-Top2down/","text":"Computer Networking: A Top-Down Approach Eight edition` \u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51 1.1 \u6240\u6709\u56e0\u7279\u7f51\u8bbe\u5907\u88ab\u79f0\u4e3a \u4e3b\u673a \u6216 \u7aef\u7cfb\u7edf \u7aef\u7cfb\u7edf\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a\u7684\u7f51\u7edc\u94fe\u63a5\u5230\u4e00\u8d77 \u7aef\u7cfb\u7edf\u901a\u8fc7\u56e0\u7279\u7f51\u670d\u52a1\u63d0\u4f9b\u5546\uff08ISP\uff09\u63a5\u5165\u56e0\u7279\u7f51 \u6bcf\u4e2aISP\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a\u7531\u591a\u53f0\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u591a\u6bb5\u901a\u4fe1\u94fe\u8def\u7ec4\u6210\u7684\u7f51\u7edc \u56e0\u7279\u7f51\u6807\u51c6\u89c4\u5b9a\u4e86\u6240\u6709\u56e0\u7279\u7f51\u534f\u8bae\u7684\u6807\u51c6\uff0c\u79f0\u4e3a\u8bf7\u6c42\u8bc4\u8bba\uff08RFC\uff09 \u5230\u5e95\u4ec0\u4e48\u662f\u56e0\u7279\u7f51\uff1f \u56e0\u7279\u7f51\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\u7684\u57fa\u7840\u8bbe\u65bd \u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u5bf9\u7b49\u901a\u4fe1\u5b9e\u4f53\u4e4b\u95f4\u4ea4\u6362\u7684\u62a5\u6587\u7684\u683c\u5f0f\u548c\u987a\u5e8f\uff0c\u4ee5\u53ca\u62a5\u6587\u53d1\u9001/\u63a5\u53d7\u6216\u5176\u4ed6\u65f6\u95f4\u6240\u91c7\u53d6\u7684\u64cd\u4f5c \u4ee5\u592a\u7f51\u662f\u5c40\u57df\u7f51\u6280\u672f\uff1a\u7269\u7406 + \u534f\u8bae 1.3 \u4ea4\u6362\u673a\u4e3b\u8981\u6709\u8def\u7531\u5668\u548c\u94fe\u8def\u5c42\u4ea4\u6362\u673a \u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93\uff1a\u5728\u4ea4\u6362\u673a\u5f00\u59cb\u5411\u8f93\u51fa\u7535\u8def\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u524d\uff0c\u5fc5\u987b\u63a5\u6536\u5230\u6574\u4e2a\u5206\u7ec4 \u6392\u961f\u65f6\u5ef6\u548c\u5206\u7ec4\u4e22\u5931\uff1a\u5bf9\u4e8e\u6bcf\u6761\u76f8\u8fde\u7684\u94fe\u8def\uff0c\u8be5\u5206\u7ec4\u4ea4\u6362\u673a\u90fd\u6709\u4e00\u4e2a\u8f93\u51fa\u7f13\u5b58\uff08\u8f93\u51fa\u961f\u5217\uff09\uff0c\u7528\u4e8e\u5b58\u50a8\u8def\u7531\u5668\u51c6\u5907\u53d1\u5f80\u90a3\u6761\u94fe\u8def\u7684\u5206\u7ec4\u3002 \u8f6c\u53d1\u8868\u548c\u8def\u7531\u534f\u8bae \u8f6c\u53d1\u8868\u7528\u4e8e\u5c06\u76ee\u7684\u5730\u5740\u6620\u5c04\u8f93\u51fa\u4e3a\u8f93\u51fa\u94fe\u8def \u8f6c\u53d1\u5c40\u90e8\uff0c\u8def\u7531\u5168\u5c40 \u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u7535\u8def\u4ea4\u6362\u548c\u5206\u7ec4\u4ea4\u6362 \u7535\u8def\u4ea4\u6362\uff1a\u9884\u7559\u4e86\u7aef\u7cfb\u7edf\u95f4\u6cbf\u8def\u5f84\u901a\u4fe1\u6240\u9700\u8981\u7684\u8d44\u6e90\uff08\u7f13\u5b58\uff0c\u94fe\u8def\u4f20\u8f93\u901f\u7387\uff09 \u9891\u5206\u590d\u7528\uff08FDM\uff09 \u65f6\u5206\u590d\u7528\uff08TDM\uff09 \u6ce2\u5206\u590d\u7528\uff08WDM\uff09 \u7801\u5206\u590d\u7528\uff08CDM\uff09 \u5206\u7ec4\u4ea4\u6362\uff1a\u4e0d\u9884\u7559\uff0c\u56e0\u7279\u7f51\u5c3d\u6700\u5927\u52aa\u529b\u4ee5\u53ca\u65f6\u4ea4\u4ed8\u5206\u7ec4\uff0c\u4f46\u5b83\u4e0d\u505a\u4efb\u4f55\u4fdd\u8bc1 1.4 \u5206\u7ec4\u4ea4\u6362\u7f51\u4e2d\u7684\u65f6\u5ef6\uff1a \u8282\u70b9\u5904\u7406\u65f6\u5ef6\uff1a\u68c0\u67e5\u5206\u7ec4\u5b57\u6bb5\u51b3\u5b9a\u5bfc\u5411\u4f55\u5904 \u6392\u961f\u65f6\u5ef6\uff1a\u5206\u7ec4\u5728\u94fe\u8def\u4e0a\u7b49\u5f85\u4f20\u8f93 \u4f20\u8f93\u65f6\u5ef6\uff1a\u5c06\u6240\u6709\u5206\u7ec4\u7684\u6bd4\u7279\u63a8\u5411\u94fe\u8def\u7684\u65f6\u95f4\uff0c\u8def\u7531\u5668\u63a8\u51fa\u5206\u7ec4\u7684\u65f6\u95f4 \u4f20\u64ad\u65f6\u5ef6\uff1a\u4e00\u4e2a\u6bd4\u7279\u4ece\u94fe\u8def\u8d77\u70b9\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\uff0c\u5206\u7ec4\u4ece\u4e00\u4e2a\u8def\u7531\u5668\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684\u65f6\u95f4 \u541e\u5410\u91cf\uff1a \u77ac\u65f6\u541e\u5410\u91cf\u662f\u4e3b\u673aB\u63a5\u6536\u5230\u8be5\u6587\u4ef6\u7684\u901f\u7387 1.5 \u534f\u8bae\u5206\u5c42\u53ca\u5176\u670d\u52a1\u6a21\u578b \u534f\u8bae\u5c42 \u4f20\u8f93\u4fe1\u606f \u5e38\u89c1\u534f\u8bae \u5e94\u7528\u5c42 \u62a5\u6587 HTTP,FTP,SMTP \u8fd0\u8f93\u5c42 \u62a5\u6587\u6bb5 TCP,UDP \u7f51\u7edc\u5c42 \u6570\u636e\u62a5 IP \u94fe\u8def\u5c42 \u5e27 \u7269\u7406\u5c42 \u6bd4\u7279 \u5e94\u7528\u5c42\u662f\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u53ca\u4ed6\u4eec\u7684\u5e94\u7528\u5c42\u534f\u8bae\u5b58\u7559\u7684\u5730\u65b9 \u8fd0\u8f93\u5c42\u63d0\u4f9b\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u673a\u5236 \u7f51\u7edc\u5c42\u5305\u62ec\u4e86\u7f51\u9645\u534f\u8bae\u548c\u4e00\u4e9b\u8def\u7531\u9009\u62e9\u534f\u8bae \u7f51\u9645\u534f\u8bae\uff08IP\uff09\u5b9a\u4e49\u4e86\u5728\u6570\u636e\u62a5\u4e2d\u7684\u5404\u4e2a\u5b57\u6bb5\u4ee5\u53ca\u7aef\u7cfb\u7edf\u548c\u8def\u7531\u5668\u5982\u4f55\u4f5c\u7528\u4e0e\u8fd9\u4e9b\u5b57\u6bb5 \u94fe\u8def\u5c42\u670d\u52a1\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u94fe\u8def\u5c42\u534f\u8bae\uff0c\u8d1f\u8d23\u5c06\u6574\u4e2a\u5e27\u4ece\u5f53\u524d\u7f51\u7edc\u5143\u7d20\u79fb\u52a8\u81f3\u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u7f51\u7edc\u5143\u7d20 \u7269\u7406\u5c42\u5c06\u94fe\u8def\u5c42\u5e27\u7684\u4e00\u4e2a\u4e2a\u6bd4\u7279\u4ece\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9 1.6 \u7f51\u7edc\u653b\u51fb \u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08DOS\uff09\uff0c\u5206\u5e03\u5f0f\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08DDOS\uff09 \u5f31\u70b9\u653b\u51fb \u5e26\u5bbd\u6d2a\u6cdb \u94fe\u63a5\u6d2a\u6cdb \u5206\u7ec4\u55c5\u63a2 IP\u54c4\u9a97 \u8fd0\u8f93\u5c42 TCP\uff1a \u4f20\u8f93\u63a7\u5236\u534f\u8bae \u62a5\u6587\u6bb5 UDP\uff1a \u7528\u6237\u6570\u636e\u5305\u534f\u8bae \u6570\u636e\u62a5 \u5c06\u4e3b\u673a\u95f4\u4ea4\u4ed8\u6269\u5c55\u5230\u8fdb\u7a0b\u95f4\u4ea4\u4ed8\u88ab\u79f0\u4e3a\u8fd0\u8f93\u5c42\u7684 \u591a\u8def\u590d\u7528 \u4e0e \u591a\u8def\u5206\u89e3 \u5c06\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u4e2d\u7684\u6570\u636e\u4ea4\u4ed8\u9053\u6b63\u786e\u7684\u5957\u63a5\u5b57\u7684\u5de5\u4f5c\u79f0\u4e3a\u591a\u8def\u5206\u89e3 \u5c06\u6765\u81ea\u6e90\u4e3b\u673a\u7684\u4e0d\u540c\u6570\u636e\u5757\u6536\u96c6\u8d77\u6765\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6570\u636e\u5757\u5c01\u88c5\u4e0a\u9996\u90e8\u4fe1\u606f\u4ece\u800c\u751f\u6210\u62a5\u6587\u6bb5\uff0c\u7136\u540e\u5c06\u62a5\u6587\u6bb5\u4f20\u9012\u81f3\u7f51\u7edc\u5c42\u79f0\u4e3a\u591a\u8def\u590d\u7528 \u591a\u8def\u590d\u7528\u8981\u6c42\uff1a \u5957\u63a5\u5b57\u6709\u552f\u4e00\u6807\u8bc6\u7b26 \u6bcf\u4e2a\u62a5\u6587\u6bb5\u6709\u7279\u6b8a\u5b57\u6bb5\u6765\u6307\u793a\u8be5\u62a5\u6587\u6bb5\u8981\u4ea4\u4ed8\u7684\u5957\u63a5\u5b57 \u6e90\u7aef\u53e3\u53f7\u548c\u76ee\u7684\u7aef\u53e3\u53f7 \u7aef\u53e3\u53f716\u6bd4\u7279 \u6bcf\u4e2a\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u6700\u8d77\u7801\u5305\u62ec\u76ee\u7684\u7aef\u53e3\u53f7\u548c\u6e90\u7aef\u53e3\u53f7 \u591a\u8def\u5206\u89e3\u670d\u52a1\uff1a \u5728\u4e3b\u673a\u4e0a\u7684\u6bcf\u4e2a\u5957\u63a5\u5b57\u80fd\u591f\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\u53f7\uff0c\u5f53\u62a5\u6587\u6bb5\u5230\u8fbe\u4e3b\u673a\u65f6\uff0c\u8fd0\u8f93\u5c42\u68c0\u67e5\u76ee\u7684\u7aef\u53e3\u53f7\u5e76\u5c06\u5176\u5b9a\u4f4d\u5230\u76f8\u5e94\u7684\u5957\u63a5\u5b57 \u4e00\u4e2aUDP\u5957\u63a5\u5b57\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff08\u76ee\u7684IP\uff0c\u76ee\u7684\u7aef\u53e3\u53f7\uff09\uff1b\u4e24\u4e2aUDP\u62a5\u6587\u6bb5\u6709\u4e0d\u540c\u7684\u6e90IP\u6216\u6e90\u7aef\u53e3\uff0c\u6307\u5411\u76f8\u540c\u7684\u76ee\u7684IP\u548c\u76ee\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4e24\u4e2a\u62a5\u6587\u6bb5\u5c06\u901a\u8fc7\u76f8\u540c\u7684\u76ee\u7684\u5957\u63a5\u5b57\u88ab\u5b9a\u5411\u5230 \u76f8\u540c \u7684\u8fdb\u7a0b\u3002 \u4e00\u4e2aTCP\u5957\u63a5\u5b57\u662f\u4e00\u4e2a\u56db\u5143\u7ec4\uff08\u6e90IP\uff0c\u6e90\u7aef\u53e3\uff0c\u76ee\u7684IP\uff0c\u76ee\u7684\u7aef\u53e3\uff09\uff1b\u4e24\u4e2aTCP\u62a5\u6587\u6bb5\u6709\u4e0d\u540c\u7684\u6e90IP\u6216\u6e90\u7aef\u53e3\uff0c\u6307\u5411\u76f8\u540c\u7684\u76ee\u7684IP\u548c\u76ee\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4e24\u4e2a\u62a5\u6587\u6bb5\u5c06\u901a\u8fc7\u76f8\u540c\u7684\u76ee\u7684\u5957\u63a5\u5b57\u88ab\u5b9a\u5411\u5230 \u4e24\u4e2a\u4e0d\u540c \u7684\u8fdb\u7a0b\u3002 \u65e0\u8fde\u63a5\u8fd0\u8f93\uff1aUDP UDP\u53ea\u5728\u6700\u57fa\u7840\u7684\u8fd0\u8f93\u5c42\u9700\u8981\u63d0\u4f9b\u7684\u670d\u52a1\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u4e86\u4e00\u70b9\u5dee\u9519\u68c0\u6d4b\u670d\u52a1 \u65e0\u9700\u8fde\u63a5\u5efa\u7acb \u65e0\u8fde\u63a5\u72b6\u6001 \u5206\u7ec4\u9996\u90e8\u5f00\u9500\u5c0f \u5173\u4e8e\u53d1\u9001\u4ec0\u4e48\u6570\u636e\u4ee5\u53ca\u4f55\u65f6\u53d1\u9001\u63a7\u5236\u66f4\u7cbe\u7ec6 \u53ef\u4ee5\u5728\u5e94\u7528\u5c42\u6784\u5efa\u53ef\u9760\u6027\uff0c\u4ece\u800c\u907f\u514d\u4e86TCP\u534f\u8bae\u7684\u62e5\u585e\u63a7\u5236\u548c\u6d41\u91cf\u63a7\u5236 UDP\u62a5\u6587\u6bb5\u7ed3\u6784 \u6e90\u7aef\u53e3\u53f7\uff0c\u76ee\u7684\u7aef\u53e3\u53f7\uff0c\u957f\u5ea6\uff0c\u6821\u9a8c\u548c\u5206\u522b16\u6bd4\u7279 \u6821\u9a8c\u548c\uff1a\u53d1\u9001\u65b9UDP\u62a5\u6587\u6bb5\u4e2d\u6240\u670916\u6bd4\u7279\u5b57\u7684\u548c\u8fdb\u884c\u53cd\u7801\u6c42\u548c\u65f6\u9047\u5230\u7684\u6240\u6709\u6ea2\u51fa\u90fd\u4f1a\u56de\u5377\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u3002 UDP\u63d0\u4f9b\u5dee\u9519\u68c0\u6d4b\u662f\u56e0\u4e3a\u4e0d\u80fd\u4fdd\u8bc1\u4ece\u6e90\u548c\u76ee\u7684\u4e4b\u95f4\u7684\u6240\u6709\u94fe\u8def\u90fd\u6709\u5dee\u9519\u68c0\u9a8c \u53ef\u9760\u6570\u636e\u4f20\u8f93\u539f\u7406 \u53d1\u9001\u65b9\u9700\u8981\u53d1\u9001(\u51fd\u6570)\uff1a rdt_send() udt_send() \u63a5\u6536\u65b9\u9700\u8981(\u51fd\u6570): deliver_data() rdt_rcv() rdt\u7684\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u9700\u8981\u5f80\u8fd4\u4ea4\u6362\u63a7\u5236\u5206\u7ec4\uff0c\u8c03\u7528 udt_send() rdt 1.0 \u5047\u8bbe\u5e95\u5c42\u4fe1\u9053\u5b8c\u5168\u53ef\u9760 \u53d1\u9001\u65b9\u4f7f\u7528rdt_send\u53d1\u9001\u4e4b\u540e\u53ea\u9700\u7b49\u5f85\u4e0a\u5c42\u8c03\u7528 \u63a5\u6536\u65b9\u4f7f\u7528rdt_rcv\u63a5\u53d7\u4e4b\u540e\u53ea\u9700\u7b49\u5f85\u4e0b\u5c42\u8c03\u7528 rdt 2.0 \u6b64\u65f6\u5206\u7ec4\u4e2d\u7684\u6bd4\u7279\u53ef\u80fd\u4f1a\u53d7\u635f \u53d1\u9001\u65b9 \u81ea\u52a8\u91cd\u4f20\u8bf7\u6c42\u534f\u8bae\uff08ARQ\uff09 \u5dee\u9519\u68c0\u6d4b \u63a5\u6536\u65b9\u53cd\u9988\uff1aACK\u548cNAK \u91cd\u4f20 \u53d1\u9001\u65b9\u5e76\u4e0d\u80fd\u4ece \u4e0a\u5c42 \u83b7\u53d6\u66f4\u591a\u7684\u6570\u636e\uff0crdt_send\u4e0d\u4f1a\u51fa\u73b0\uff0c\u53d1\u9001\u65b9\u4e0d\u4f1a\u53d1\u9001\u65b0\u7684\u6570\u636e\uff1b\u505c\u7b49\u534f\u8bae \u63a5\u6536\u65b9 \u63a5\u53d7\u6570\u636e\uff0c\u8fdb\u884c\u5dee\u9519\u68c0\u9a8c\uff0c\u6839\u636e\u7ed3\u679c\u8fd4\u56deACK\u6216NAK rdt 2.1 \u4f20\u9001\u8fc7\u7a0b\u4e2dACK\u6216\u8005NAK\u53d7\u635f \u5f53\u53d1\u9001\u65b9\u63a5\u6536\u5230\u542b\u7cca\u4e0d\u6e05\u7684ACK\u6216NAK\u5206\u7ec4\u65f6\u91cd\u4f20\uff0c\u4f46\u662f\u63a5\u6536\u65b9\u5e76\u4e0d\u77e5\u9053\u8fd9\u6b21\u7684\u5206\u7ec4\u662f\u65b0\u7684\u8fd8\u662f\u4e00\u6b21\u91cd\u4f20\uff0c \u5197\u4f59\u5206\u7ec4 \u53d1\u9001\u65b9\u5bf9\u6570\u636e\u5206\u7ec4\u8fdb\u884c\u7f16\u53f7\uff0c\u5c06\u6570\u636e\u5206\u7ec4\u7684\u5e8f\u53f7\u653e\u5728\u8be5\u5b57\u6bb5 rdt 2.2 \u5728 rdt 2.1 \u7684\u57fa\u7840\u4e0a\u53bb\u6389\u4e86NAK \u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u9700\u8981\u9644\u5e26\u5206\u7ec4\u5e8f\u53f7 rdt 3.0\uff08\u6bd4\u7279\u4ea4\u66ff\u534f\u8bae\uff09 \u5047\u8bbe\u9664\u4e86\u6bd4\u7279\u53d7\u635f\u4e4b\u5916\uff0c\u5e95\u5c42\u4fe1\u9053\u8fd8\u4f1a\u4e22\u5305 \u5b9a\u65f6\u91cd\u4f20\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u5012\u6570\u8ba1\u65f6\u5668\uff0c\u53d1\u9001\u65b9\u6bcf\u53d1\u9001\u4e00\u4e2a\u5206\u7ec4\u5c31\u4f1a\u542f\u52a8\u4e00\u4e2a\u5012\u6570\u8ba1\u65f6\u5668 \u6570\u636e\u4f20\u8f93\u534f\u8bae\u7684\u8981\u70b9\uff1a\u6821\u9a8c\u548c\u3001\u5e8f\u53f7\u3001\u5b9a\u65f6\u5668\u3001\u80af\u5b9a\u4e0e\u5426\u5b9a\u786e\u8ba4 \u6d41\u6c34\u7ebf\u534f\u8bae \u505c\u7b49\u534f\u8bae\u6d6a\u8d39\u4e86\u5927\u91cf\u8d44\u6e90\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u6d41\u6c34\u7ebf\u673a\u5236 \u5f15\u5165\u6d41\u6c34\u7ebf\u673a\u5236\u5fc5\u987b\u5bf9RDT\u534f\u8bae\u505a\u51fa\u6539\u53d8 \u589e\u52a0\u5e8f\u53f7\u8303\u56f4 \u534f\u8bae\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u9700\u8981\u7f13\u5b58\u591a\u4e2a\u5206\u7ec4 \u6d41\u6c34\u7ebf\u7684\u5dee\u9519\u6062\u590d\uff1a \u56de\u9000N\u6b65 \u548c \u9009\u62e9\u91cd\u4f20 \u56de\u9000N\u6b65(GBN) base:\u6700\u5148\u53d1\u51fa\u4f46\u662f\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4\u7684\u5e8f\u53f7 nextseqnum:\u4e0b\u4e00\u4e2a\u672a\u88ab\u4f7f\u7528\u7684\u5206\u7ec4\u7684\u5e8f\u53f7 N\u6700\u5927\u957f\u5ea6:\u7a97\u53e3\u6700\u5927\u957f\u5ea6 \u4e00\u4e2a\u5206\u7ec4\u7684\u5e8f\u53f7\u627f\u8f7d\u5728\u5206\u7ec4\u9996\u90e8\u7684\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u6bb5\u91cd GBN\u53d1\u9001\u65b9\u5fc5\u987b\u54cd\u5e94\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5 \u4e0a\u5c42\u7684\u8c03\u7528:\u4e0a\u5c42\u8c03\u7528rdt_send(),GBN\u68c0\u67e5\u53d1\u9001\u7a97\u53e3\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86;\u5982\u679c\u672a\u6ee1\u5219\u66f4\u65b0\u53d8\u91cf,\u5426\u5219\u5411\u4e0a\u5c42\u53cd\u9988 \u6536\u5230\u4e00\u4e2aACK:\u63a5\u6536\u65b9\u5df2\u7ecf\u6b63\u786e\u63a5\u6536\u5230ACK\u4e3an\u4ee5\u53ca\u4e4b\u524d\u7684\u6240\u6709\u5206\u7ec4 \u8d85\u65f6\u91cd\u4f20:\u4e00\u65e6\u51fa\u73b0\u8d85\u65f6,GBN\u4f1a\u91cd\u4f20\u6240\u6709\u5df2\u53d1\u9001\u4f46\u662f\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4 \u53d1\u9001\u65b9\u53ea\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668,\u6bcf\u5f53\u6536\u5230\u4e00\u4e2aACK\u5e76\u4e14\u8fd8\u6709\u5df2\u53d1\u9001\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4,\u91cd\u542f\u5b9a\u65f6\u5668 GBN\u53d1\u9001\u65b9\u5fc5\u987b\u7ef4\u62a4\u7a97\u53e3\u7684\u4e0a\u4e0b\u8fb9\u754c\u4ee5\u53canextnum\u5728\u8be5\u7a97\u53e3\u4e2d\u7684\u4f4d\u7f6e GBN\u7684\u63a5\u6536\u65b9: \u63a5\u6536\u65b9\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6309\u5e8f\u63a5\u53d7\u7684\u5206\u7ec4\u5e8f\u53f7,expectnum \u63a5\u6536\u65b9\u6b63\u786e\u6536\u5230\u4e00\u4e2a\u5e8f\u53f7\u4e3an\u7684\u5206\u7ec4 \u7d2f\u8ba1\u786e\u8ba4:\u63a5\u6536\u65b9\u6536\u5230\u4e3an\u7684\u6b63\u786e\u6309\u5e8f\u5206\u7ec4\u610f\u5473\u7740\u4e4b\u524d\u7684\u5206\u7ec4\u4e5f\u5df2\u7ecf\u6309\u5e8f\u6b63\u786e\u6536\u5230 \u6309\u5e8f,\u63a5\u6536\u65b9\u4e3a\u5206\u7ec4n\u53d1\u9001ACK,\u5e76\u5c06\u8be5\u5206\u7ec4\u4e2d\u7684\u6570\u636e\u4ea4\u4ed8\u5230\u4e0a\u5c42 \u4e71\u5e8f,\u63a5\u6536\u65b9\u4e22\u5f03\u8be5\u5206\u7ec4,\u5e76\u5411\u53d1\u9001\u65b9\u8fd4\u56de\u6700\u8fd1\u6309\u5e8f\u63a5\u53d7\u7684\u5206\u7ec4ACK \u9009\u62e9\u91cd\u4f20 \u5728GBN\u534f\u8bae\u4e2d\u5355\u4e2a\u5206\u7ec4\u7684\u5dee\u9519\u5c31\u4f1a\u5f15\u8d77\u5927\u91cfGBN\u534f\u8bae\u5206\u7ec4\u7684\u91cd\u4f20,\u8bb8\u591a\u5206\u7ec4\u6ca1\u5fc5\u8981\u91cd\u4f20,\u56e0\u6b64\u51fa\u73b0\u4e86\u9009\u62e9\u91cd\u4f20(SR) \u9009\u62e9\u91cd\u4f20(SR)\u8ba9\u53d1\u9001\u65b9\u4ec5\u91cd\u4f20\u90a3\u4e9b\u53c8\u53ef\u80fd\u51fa\u9519\u7684\u5206\u7ec4 \u8fd9\u79cd\u4e2a\u522b\u7684,\u6309\u9700\u7684\u91cd\u4f20\u8981\u6c42\u63a5\u6536\u65b9\u9010\u4e2a\u786e\u8ba4\u6b63\u786e\u63a5\u6536\u7684\u5206\u7ec4 SR\u63a5\u6536\u65b9\u4e5f\u5f15\u5165\u4e86\u63a5\u6536\u7a97\u53e3,\u5931\u5e8f\u7684\u5206\u7ec4\u5c06\u88ab\u7f13\u5b58,\u76f4\u5230\u6240\u6709\u7684\u5206\u7ec4\u90fd\u88ab\u63a5\u53d7\u4e3a\u6b62 SR\u53d1\u9001\u65b9: \u4ece\u4e0a\u5c42\u63a5\u6536\u5230\u6570\u636e \u8d85\u65f6,\u6bcf\u4e2a\u5206\u7ec4\u90fd\u6709\u81ea\u5df1\u7684\u903b\u8f91\u5b9a\u65f6\u5668,\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u786c\u4ef6\u5b9a\u65f6\u5668\u6a21\u62df\u591a\u4e2a\u903b\u8f91\u5b9a\u65f6\u5668 \u6536\u5230ACK,\u5982\u679c\u8be5ACK\u5206\u7ec4\u5728SR\u53d1\u9001\u7a97\u53e3\u5185,\u5219\u6807\u8bb0\u4e3a\u5df2\u786e\u8ba4\u5206\u7ec4;\u5982\u679c\u8be5ACK\u5bf9\u5e94\u7684\u662fsend_base\u5219\u6574\u4e2a\u7a97\u53e3\u5411\u524d\u79fb\u52a8\u5230\u5177\u6709\u6700\u5c0f\u672a\u88ab\u786e\u8ba4\u5206\u7ec4\u5904;\u5982\u679c\u7a97\u53e3\u79fb\u52a8\u671f\u95f4\u6709\u5e8f\u53f7\u843d\u5728\u7a97\u53e3\u5185\u7684\u672a\u53d1\u9001\u5206\u7ec4,\u5219\u53d1\u9001\u8fd9\u4e9b\u5206\u7ec4. SR\u63a5\u6536\u65b9: \u5e8f\u53f7\u5728rcv_base~rcv_base+N-1\u5185\u7684\u5206\u7ec4\u88ab\u6b63\u786e\u63a5\u53d7 \u5982\u679c\u672a\u88ab\u63a5\u53d7\u8fc7,\u5219\u8be5\u5206\u7ec4\u88ab\u7f13\u5b58,\u5e76\u5411\u53d1\u9001\u65b9\u8fd4\u56de\u4e00\u4e2a\u9009\u62e9ACK \u5982\u679c\u662f\u8d77\u59cbrcv_base\u5e8f\u53f7,\u5219\u6309\u5e8f\u5411\u4e0a\u5c42\u4f20\u9001\u4ee5\u8be5\u5e8f\u53f7\u4e3a\u8d77\u59cb\u7684\u5df2\u7ecf\u7f13\u5b58\u7684\u5206\u7ec4 \u5e8f\u53f7\u5728rcv_base - N ~ rcv_base - 1 \u7684\u5e8f\u53f7,\u5fc5\u987b\u4ea7\u751f\u4e00\u4e2aACK,\u5373\u4f7f\u63a5\u6536\u65b9\u4e4b\u524d\u786e\u8ba4\u8fc7 \u5176\u4f59\u60c5\u51b5,\u5ffd\u7565 \u5bf9\u4e8eSR\u534f\u8bae\u800c\u8a00,\u7a97\u53e3\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5e8f\u53f7\u7a7a\u95f4\u5927\u5c0f\u7684\u4e00\u534a \u5728\u5206\u7ec4\u88ab\u91cd\u65b0\u6392\u5e8f\u7684\u60c5\u51b5\u4e0b,\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u4e2a\u5e8f\u53f7\u4e0d\u88ab\u91cd\u65b0\u4f7f\u7528,\u9664\u975e\u53d1\u9001\u65b9\u786e\u4fe1\u4efb\u4f55\u5148\u524d\u53d1\u9001\u7684\u5e8f\u53f7\u4e3ax\u7684\u5206\u7ec4\u90fd\u4e0d\u5728\u7f51\u7edc\u4e2d\u4e3a\u6b62,\u901a\u8fc7\u5047\u8bbe\u4e00\u4e2a\u5206\u7ec4\u5728\u7f51\u7edc\u4e2d\u7684\u5b58\u6d3b\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u67d0\u4e00\u4e2a\u6700\u5927\u91cf\u6765\u5b9e\u73b0. \u6709\u94fe\u63a5\u8fd0\u8f93\uff1aTCP tcp\u662f\u9762\u5411\u8fde\u63a5\u7684,\u4e09\u6b21\u63e1\u624b TCP\u8fd0\u884c\u5728\u7aef\u7cfb\u7edf\u4e2d,\u4e2d\u95f4\u7684\u7f51\u7edc\u5143\u7d20\u4e0d\u4f1a\u7ef4\u6301TCP\u7684\u94fe\u63a5\u72b6\u6001,\u5bf9\u4e8e\u4ed6\u4eec\u800c\u8a00\u53ea\u662f\u6570\u636e\u5305 TCP\u662f\u5168\u53cc\u5de5\u670d\u52a1,Poin2Point \u5ba2\u6237\u7aef\u901a\u8fc7socket\u5957\u63a5\u5b57\u4f20\u9012\u6570\u636e \u5ba2\u6237\u7aef\u901a\u8fc7socket\u5957\u63a5\u5b57\u6765\u4f20\u9012\u6570\u636e\u6d41\uff0cTCP\u5c06\u6570\u636e\u5f15\u5bfc\u5230\u53d1\u9001\u7f13\u5b58\u4e2d TCP\u53ef\u4ee5\u4ece\u53d1\u9001\u7f13\u5b58\u4e2d\u53d6\u51fa\u5e76\u653e\u5165\u62a5\u6587\u6bb5\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e MSS MSS \u901a\u5e38\u7531\u672c\u5730\u4e3b\u673a\u53d1\u9001\u7684\u6700\u5927\u94fe\u8def\u5c42\u5e27\u957f\u5ea6 MTU \u6765\u8bbe\u7f6e MSS \u4fdd\u8bc1\u4e00\u4e2aTCP\u62a5\u6587\u6bb5\u5c01\u88c5\u5728 IP \u6570\u636e\u62a5\u4e2d,\u52a0\u4e0a TCP/IP \u9996\u90e8\u957f\u5ea6(\u901a\u5e3840\u5b57\u8282) MTU\u4e00\u822c\u4e3a1500\u5b57\u8282,MSS\u4e00\u822c\u4e3a1460\u5b57\u8282 TCP\u94fe\u63a5\u7684\u6bcf\u4e00\u7aef\u90fd\u6709\u5404\u81ea\u7684\u53d1\u9001\u7f13\u5b58\u548c\u63a5\u6536\u7f13\u5b58 TCP\u94fe\u63a5\u4e00\u822c\u7531\u4e00\u53f0\u4e3b\u673a\u7684\u53d8\u91cf,\u7f13\u5b58\u4ee5\u53ca\u5957\u63a5\u5b57\u548c\u53e6\u5916\u4e00\u53f0\u4e3b\u673a\u7684\u76f8\u5e94\u5143\u7d20\u7ec4\u6210 TCP\u62a5\u6587\u6bb5\u7ed3\u6784 TCP\u62a5\u6587\u6bb5\u7531\u9996\u90e8\u5b57\u6bb5\u548c\u6570\u636e\u5b57\u6bb5\u7ec4\u6210,\u6570\u636e\u5b57\u6bb5\u5927\u5c0f\u88abMSS\u9650\u5236 \u9996\u90e8\u5b57\u6bb5\u5305\u62ec: \u6e90\u7aef\u53e3\u53f7\u548c\u76ee\u7684\u7aef\u53e3\u53f7:\u7528\u4e8e\u591a\u8def\u590d\u7528/\u591a\u8def\u5206\u89e3 \u5e8f\u53f7\u548c\u786e\u8ba4\u53f7:\u7528\u4e8eTCP\u53cc\u65b9\u5b9e\u73b0\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u5e8f\u53f7\u662f\u8be5\u62a5\u6587\u6bb5\u9996\u5b57\u8282\u7684\u5b57\u8282\u6d41\u7f16\u53f7. \u786e\u8ba4\u53f7\u8868\u660e\u4e86\u6e90\u4e3b\u673a\u5e0c\u671b\u76ee\u7684\u4e3b\u673a\u53d1\u9001\u7684\u4e0b\u4e00\u5b57\u8282\u7684\u5e8f\u53f7 \u9996\u90e8\u957f\u5ea6:\u56e0\u4e3aTCP\u9996\u90e8\u5b57\u6bb5\u662f\u53d8\u957f\u7684(\u901a\u5e38\u9009\u9879\u4e3a\u7a7a\u7684\u65f6\u5019,\u5927\u5c0f\u4e3a 20\u5b57\u8282 ),\u8be5\u5b57\u6bb5\u6307\u793a\u4e86\u4ee532\u6bd4\u7279\u7684\u5b57\u4e3a\u5355\u4f4d\u7684 TCP\u9996\u90e8\u7684\u957f\u5ea6 \u4fdd\u7559\u672a\u7528: \u6807\u5fd7\u4f4d: ACK:\u7528\u4e8e\u786e\u8ba4 RST,SYN,FIN:\u7528\u4e8e\u94fe\u63a5\u5efa\u7acb\u548c\u62c6\u9664 URG:\u7528\u4e8e\u6307\u793a\u62a5\u6587\u6bb5\u5b58\u5728\u7740\"\u7d27\u6025\u6570\u636e\",\u7d27\u6025\u6570\u636e\u753116\u6bd4\u7279\u7684\u7d27\u6025\u6570\u636e\u6307\u9488\u6307\u51fa \u63a5\u53d7\u7a97\u53e3:\u7528\u4e8e\u6d41\u91cf\u63a7\u5236 \u56e0\u7279\u7f51\u6821\u9a8c\u548c:\u68c0\u67e5\u6821\u9a8c\u548c \u7d27\u6025\u6570\u636e\u6307\u9488: \u9009\u9879:\u53ef\u9009\u4e0e\u53d8\u957f,\u7528\u4e8e\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u534f\u5546\u6700\u5927\u62a5\u6587\u5b57\u6bb5\u957f\u5ea6 \u4e00\u6761TCP\u94fe\u63a5\u7684\u53cc\u65b9\u5747\u53ef\u968f\u673a\u9009\u62e9\u5e8f\u53f7 TCP\u88ab\u79f0\u4e3a\u63d0\u4f9b\u7d2f\u8ba1\u786e\u8ba4 \u5f80\u8fd4\u65f6\u95f4\u7684\u4f30\u8ba1\u4e0e\u8d85\u65f6 \u6837\u672c\u65f6\u95f4 SampleRTT \u7ef4\u62a4\u4e00\u4e2a\u5747\u503c SampleRTT,EstimateRTT $EstimateRTT=(1-\\alpha) EstimateRTT + \\alpha SampleRTT$ \u4e00\u822c$\\alpha$\u7684\u503c\u53d60.125 \u8fd9\u79cd\u6307\u6570\u52a0\u6743\u79fb\u52a8\u79fb\u52a8\u5e73\u5747(EWMA) \u6d4b\u91cf EstimateRTT\u53d8\u5316 $DevRTT=(1-\\beta)DevRTT+\\beta*|SampleRTT-EstimateRTT|$ $\\beta$\u4e3a0.25 \u5982\u679cSampleRTT\u53d8\u5316\u5c0fDevRTT\u503c\u4e5f\u5c0f \u8d85\u65f6\u95f4\u9694TimeoutInterval\u8bbe\u7f6e\u4e3aEstimateRTT\u52a0\u4e0a\u4e00\u70b9\u4f59\u91cf $TimeoutInterval=EstimateRTT+4*DevRTT$ \u4e00\u822c\u521d\u59cbTime\u8bbe\u7f6e\u4e3a1\u79d2\uff0c\u5982\u679c\u51fa\u73b0 \u8d85\u65f6 \uff0cTime\u52a0\u500d\uff0c\u76f4\u5230\u6536\u5230\u62a5\u6587\u6bb5\u624d\u4f1a\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u518d\u6b21\u8ba1\u7b97Time \u53ef\u9760\u6570\u636e\u4f20\u8f93 TCP\u4e3b\u89813\u4e2a\u4e8b\u4ef6\u6709\u5173:\u4ece\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u6570\u636e\u3001\u5b9a\u65f6\u5668\u8d85\u65f6\u3001\u6536\u5230ACK \u4ece\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u63a5\u53d7\u6570\u636e\uff1a\u542f\u52a8\u5b9a\u65f6\u5668\uff0c\u66f4\u65b0Nextseqnum \u5b9a\u65f6\u5668\u8d85\u65f6\uff1aTCP\u91cd\u4f20\u5f15\u8d77\u8d85\u65f6\u7684\u62a5\u6587\u6bb5\uff0cTCP\u91cd\u542f\u5b9a\u65f6\u5668 \u6536\u5230ACK:TCP\u662f\u7d2f\u8ba1\u786e\u8ba4\uff0c\u6536\u5230y\u4ee3\u8868y\u4e4b\u524d\u7684\u6240\u6709\u5b57\u8282\u5e8f\u5217\u90fd\u5df2\u7ecf\u6b63\u786e\u88ab\u63a5\u53d7\uff0c\u5982\u679cy\u5927\u4e8esendbase\uff0c\u5219\u4ee3\u8868\u8be5ACK\u5728\u786e\u8ba4\u4e00\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u672a\u88ab\u786e\u8ba4\u7684\u62a5\u6587\u6bb5\uff1b\u5982\u679c\u5f53\u524d\u4ecd\u6709\u672a\u786e\u8ba4\u7684\u62a5\u6587\u6bb5\uff0cTCP\u8fd8\u8981\u91cd\u542f\u5b9a\u65f6\u5668 \u8d85\u65f6\u95f4\u9694\u52a0\u500d TCP\u91cd\u4f20\u5177\u6709\u6700\u5c0f\u5e8f\u53f7\u7684\u8fd8\u672a\u88ab\u786e\u8ba4\u7684\u62a5\u6587\u6bb5 \u6bcf\u6b21TCP\u8d85\u65f6\u91cd\u4f20\u7684\u65f6\u95f4\u95f4\u9694\u662f\u5148\u524d\u7684\u4e24\u500d\uff0c\u800c\u4e0d\u662f\u901a\u8fc7EstimatedRTT\u4e2aDevRTT\u63a8\u7b97\u7684\u503c \u5f53\u5b9a\u65f6\u5668\u5728\u53e6\u5916\u4e24\u4e2a\u65f6\u95f4\u89e6\u53d1\u7684\u65f6\u5019\uff08\u6536\u5230\u4e0a\u5c42\u5e94\u7528\u6570\u636e\u548c\u6536\u5230ACK\uff09TimeoutRTT\u88ab\u66f4\u65b0\u4e3a\u63a8\u7b97\u51fa\u6765\u7684\u503c \u5feb\u901f\u91cd\u4f20 \u56e0\u4e3a\u8d85\u65f6\u91cd\u4f20\u7684\u65f6\u95f4\u95f4\u9694\u53ef\u80fd\u5f88\u957f\uff0c\u4f1a\u589e\u52a0\u4e86\u7aef\u5230\u7aef\u65f6\u5ef6 \u5f53TCP\u53d1\u9001\u65b9\u8fde\u7eed\u6536\u5230\u4e09\u4e2a\u5197\u4f59ACK\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u53d1\u5feb\u901f\u91cd\u4f20 \u5feb\u901f\u91cd\u4f20\uff1a\u5728\u8be5\u62a5\u6587\u6bb5\u5b9a\u65f6\u5668\u8fc7\u671f\u4e4b\u524d\uff0c\u8fc5\u901f\u91cd\u4f20\u4e4b\u524d\u4e22\u5931\u7684\u62a5\u6587\u6bb5 TCP\u5dee\u9519\u6062\u590d\u673a\u5236 TCP\u7684\u5dee\u9519\u6062\u590d\u673a\u5236\u4e3aGBN\u548cSR\u7684\u6df7\u5408\u4f53 TCP\u63a5\u6536\u65b9\u4f18\u9009\u62e9\u5730\u786e\u8ba4\u5931\u5e8f\u62a5\u6587\u6bb5\uff0c\u5c06\u6b63\u786e\u63a5\u6536\u4f46\u662f\u5931\u5e8f\u7684\u62a5\u6587\u6bb5\u7f13\u5b58\u8d77\u6765 \u6d41\u91cf\u63a7\u5236 \u7ecf\u8fc7TCP\u53d1\u9001\u7684\u6570\u636e\u4f1a\u5230\u8fbe\u63a5\u6536\u65b9\u7684TCP\u7f13\u5b58\u4e2d\u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\uff0c\u4f46\u662f\u5982\u679cTCP\u53d1\u9001\u7684\u6570\u636e\u901f\u5ea6\u8fc7\u5927\u4f1a\u5bfc\u81f4\u63a5\u6536\u65b9\u7f13\u5b58\u6ea2\u51fa \u6d41\u91cf\u63a7\u5236\u662f\u4e00\u4e2a\u901f\u5ea6\u5339\u914d\u670d\u52a1\uff0c\u5373\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u5e94\u7528\u7a0b\u5e8f\u7684\u8bfb\u53d6\u901f\u7387\u76f8\u5339\u914d \u62e5\u585e\u63a7\u5236\u548c\u6d41\u91cf\u63a7\u5236\u90fd\u662f\u5bf9\u53d1\u9001\u65b9\u7684\u904f\u5236\uff0c\u4f46\u662f\u5f15\u8d77\u4e8c\u8005\u7684\u539f\u56e0\u4e0d\u540c \u6d41\u91cf\u63a7\u5236\u7684\u5b9e\u73b0 TCP\u8ba9\u53d1\u9001\u65b9\u7ef4\u62a4\u4e00\u4e2a\u63a5\u53d7\u7a97\u53e3\u6765\u8fdb\u884c \u6d41\u91cf\u63a7\u5236 \uff0c\u63a5\u6536\u7a97\u53e3\u7528\u4e8e\u7ed9\u53d1\u9001\u65b9\u6307\u793a\u63a5\u6536\u65b9\u8fd8\u6709\u591a\u5c11\u53ef\u7528\u7684\u7f13\u5b58 \u63a5\u6536\u7f13\u5b58\u5927\u5c0f\uff1aRcvBuffer LastByteRead\uff1a\u63a5\u6536\u65b9\u7528\u7528\u7a0b\u5e8f\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u53d6\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u7f16\u53f7 LastByteRcvd\uff1a\u63a5\u6536\u65b9\u7f13\u5b58\u7684\u6570\u636e\u6d41\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u7f16\u53f7 LastByteRcvd - LastByteRead <= RcvBuffer \u63a5\u53d7\u7a97\u53e3\u7528rwnd\u8868\u793a rwnd = RcvBuffer - [LastByteRcvd - LastByteRead] rwnd\u662f\u52a8\u6001\u53d8\u5316\u7684 TCP\u53d1\u9001\u65b9 LastByteSent\uff1a\u6700\u540e\u4e00\u4e2a\u53d1\u9001\u7684\u5b57\u8282\u7684\u5e8f\u53f7 LastByteAcked\uff1a\u6700\u540e\u4e00\u4e2a\u88ab\u786e\u8ba4\u7684\u5b57\u8282\u7684\u5e8f\u53f7 LastByteSent - LastByteAcked <= rwnd \u901a\u8fc7\u5c06\u672a\u786e\u8ba4\u7684\u503c\u63a7\u5236\u5728 rwnd \u4e4b\u95f4\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u63a5\u6536\u65b9\u7f13\u5b58\u4e0d\u4f1a\u6ea2\u51fa TCP\u63a5\u6536\u65b9\u4ec5\u5f53\u6709\u6570\u636e\u6216\u6709\u786e\u8ba4\u8981\u53d1\u65f6\u624d\u4f1a\u53d1\u9001\u62a5\u6587\u6bb5\u7ed9TCP\u53d1\u9001\u65b9 TCP\u63a5\u53d7\u7f13\u5b58\u6ee1\u4e86\u4e4b\u540e\uff0c\u53d1\u9001\u65b9\u5c31\u4e0d\u4f1a\u53d1\u9001\u6570\u636e\uff0c\u4f46\u662f\u6b64\u65f6\u63a5\u6536\u65b9\u5df2\u7ecf\u91ca\u653e\u4e86\u65b0\u7684\u7f13\u5b58\uff0c\u9700\u8981\u544a\u77e5\u53d1\u9001\u65b9 \u53d1\u9001\u65b9\u4f1a\u7ee7\u7eed\u53d1\u9001\u53ea\u6709\u4e00\u4e2a\u5b57\u8282\u6570\u636e\u7684\u62a5\u6587\u6bb5\uff0c\u8fd9\u4e9b\u62a5\u6587\u6bb5\u4f1a\u88ab\u63a5\u6536\u65b9\u63a5\u53d7\uff0c\u5f00\u59cb\u6e05\u7406\u7f13\u5b58\uff0c\u5e76\u4e14\u786e\u8ba4\u62a5\u6587\u4e2d\u542b\u6709\u4e00\u4e2a\u975e0 rwnd\u7684\u503c TCP\u94fe\u63a5\u7ba1\u7406 \u4e09\u6b21\u63e1\u624b TCP\u5ba2\u6237\u7aef\u53d1\u9001\u4e0d\u542b\u5e94\u7528\u6570\u636e\u7684SYN\u62a5\u6587\u6bb5\uff0c\u6807\u5fd7\u4f4dSYN\u88ab\u7f6e\u4e3a1 \u670d\u52a1\u5668\u63a5\u6536\u5230\u8be5\u62a5\u6587\uff0c\u5e76\u4e3a\u8fd9\u4e2aTCP\u94fe\u63a5\u5206\u914d\u7f13\u5b58\u548c\u53d8\u91cf\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u62a5\u6587\uff0cSYN\u88ab\u7f6e\u4e3a1\uff0c\u786e\u8ba4\u53f7\u4e3aclient_server + 1\uff0c\u5e8f\u53f7\u4e3aserver_client,\u8fd9\u4e2a\u5141\u8bb8\u94fe\u63a5\u7684\u62a5\u6587\u6bb5\u88ab\u79f0\u4e3aSYNACK\u62a5\u6587\u6bb5 \u5ba2\u6237\u7aef\u6536\u5230SYNACK\u4e4b\u540e\uff0c\u5ba2\u6237\u4e3a\u8be5\u94fe\u63a5\u5206\u914d\u7f13\u5b58\u548c\u53d8\u91cf\uff0c\u540c\u65f6\u5411\u670d\u52a1\u5668\u8fdb\u884c\u4e86\u786e\u8ba4\uff0c\u8be5SYN\u6bd4\u7279\u88ab\u7f6e\u4e3a0\uff0c\u6b64\u65f6\u53ef\u4ee5\u8d1f\u8f7d\u5ba2\u6237\u5230\u670d\u52a1\u5668\u7684\u6570\u636e \u5173\u95ed\u91ca\u653e\u94fe\u63a5 \u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u53d1\u9001\u62a5\u6587\u6bb5\uff0cFIN\u6bd4\u7279\u4f4d\u7f6e\u4e3a1\uff0c\u53d8\u4e3aFIN_WAIR_1\u72b6\u6001 \u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668ACK\u4e4b\u540e\u53d8\u4e3aFIN_WAIR_2\u72b6\u6001 \u63a5\u6536\u5230\u670d\u52a1\u5668\u7684FIN\u4e4b\u540e\u53d8\u4e3aTIME_WAIT\u72b6\u6001\uff0c\u7b49\u5f8530\u79d2\uff0c\u8fdb\u5165CLOSED\u72b6\u6001 \u670d\u52a1\u5668\u7aef \u670d\u52a1\u5668\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u7684FIN\u540e\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001ACK \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u53d1\u9001FIN\uff0c\u63a5\u6536\u5230ACK\u4e4b\u540e\u5173\u95ed\u94fe\u63a5 \u5f53\u7aef\u53e3\u53f7\u6216\u6e90IP\u4e0e\u5957\u63a5\u5b57\u4e0d\u5339\u914d\u7684\u65f6\u5019,\u76ee\u7684\u4e3b\u673a\u5411\u6e90\u4e3b\u673a\u53d1\u9001\u4e00\u4e2a\u7279\u6b8a\u91cd\u7f6e\u62a5\u6587RST \u5f53\u6536\u5230UDP\u5957\u63a5\u5b57\u4e0d\u5339\u914d,\u53d1\u9001ICMP\u6570\u636e\u5305 nmap\u5c31\u662f\u8fd9\u79cd\u65b9\u5f0f\u6765\u626b\u63cf\u7aef\u53e3 \u6536\u5230TCPSYNACK\u62a5\u6587,\u5219\u76ee\u6807\u4e3b\u673a\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528TCP\u5728\u8be5\u7aef\u53e3\u8fd0\u884c \u6536\u5230TCP RST\u62a5\u6587,\u76ee\u6807\u4e3b\u673a\u8be5\u7aef\u53e3\u6ca1\u6709\u8fd0\u884cTCP\u7a0b\u5e8f,\u4f46\u662f\u6ca1\u6709\u9632\u706b\u5899\u7b49\u963b\u6321 \u4ec0\u4e48\u4e5f\u6ca1\u6536\u5230,\u8bc1\u660e\u88ab\u9632\u706b\u5899\u7b49\u963b\u6321 \u62e5\u585e\u63a7\u5236\u539f\u7406 \u62e5\u585e\u539f\u56e0\u548c\u4ee3\u4ef7 \u5206\u7ec4\u7684\u5230\u8fbe\u901f\u7387\u63a5\u8fd1\u94fe\u8def\u5bb9\u91cf\uff0c\u5206\u7ec4\u7ecf\u5386\u5de8\u5927\u7684\u6392\u961f\u65f6\u5ef6 \u53d1\u9001\u65b9\u5fc5\u987b\u91cd\u53d1\u6765\u8865\u507f\u56e0\u4e3a\u7f13\u5b58\u6ea2\u51fa\u800c\u4e22\u5f03\u7684\u5206\u7ec4 \u53d1\u9001\u65b9\u56e0\u4e3a\u9047\u5230\u5927\u65f6\u5ef6\u6240\u8fdb\u884c\u7684\u4e0d\u5fc5\u8981\u91cd\u4f20\u4f1a\u5f15\u8d77\u8def\u7531\u5668\u4f7f\u7528\u5176\u6709\u9650\u94fe\u8def\u5e26\u5bbd\u6765\u8f6c\u53d1\u4e0d\u5fc5\u8981\u7684\u5206\u7ec4 \u7ade\u4e89\u8def\u7531\u5668R\u4e0a\u7684\u4f18\u5148\u7f13\u5b58\u7a7a\u95f4,\u5f53\u8f7d\u8377\u8fc7\u5927\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4A-C\u7aef\u541e\u5410\u91cf\u8d8b\u8fd1\u4e8e0 \u4e00\u4e2a\u5206\u7ec4\u5728\u4e00\u6761\u8def\u5f84\u88ab\u4e22\u5f03\u65f6,\u6bcf\u4e2a\u4e0a\u6e38\u8def\u7531\u5668\u7528\u4e8e\u8f6c\u53d1\u8be5\u5206\u7ec4\u7684\u4f20\u8f93\u5bb9\u91cf\u90fd\u88ab\u6d6a\u8d39\u6389\u4e86 \u62e5\u585e\u63a7\u5236\u65b9\u6cd5 \u7aef\u5230\u7aef\u62e5\u585e\u63a7\u5236,\u7f51\u7edc\u5c42\u6ca1\u6709\u4e3a\u8fd0\u8f93\u5c42\u63d0\u4f9b\u663e\u5f0f\u652f\u6301 \u7f51\u7edc\u8f85\u52a9\u7684\u62e5\u585e\u63a7\u5236,\u8def\u7531\u5668\u5411\u53d1\u9001\u65b9\u63d0\u4f9b\u5173\u4e8e\u7f51\u7edc\u4e2d\u62e5\u585e\u72b6\u6001\u7684\u663e\u5f0f\u53cd\u9988\u4fe1\u606f \u963b\u585e\u5206\u7ec4 \u8def\u7531\u5668\u6807\u8bb0\u6216\u66f4\u65b0\u4ece\u53d1\u9001\u65b9\u5411\u63a5\u6536\u65b9\u7684\u5206\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5b57\u6bb5,\u63a5\u6536\u65b9\u63a5\u6536\u540e\u4f1a\u5411\u53d1\u9001\u65b9\u901a\u77e5\u8be5\u7f51\u7edc\u62e5\u585e\u6307\u793a(\u8be5\u65b9\u6cd5\u81f3\u5c11\u9700\u8981\u4e00\u4e2aRTT) TCP\u62e5\u585e\u63a7\u5236 \u7ecf\u5178TCP\u62e5\u585e\u63a7\u5236 Tcp\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u662f\u8ba9\u6bcf\u4e00\u4e2a\u53d1\u9001\u65b9\u90fd\u80fd\u611f\u53d7\u5230\u7f51\u7edc\u62e5\u585e\u7a0b\u5ea6\u6765\u9650\u5236\u5176\u80fd\u5411\u94fe\u63a5\u53d1\u9001\u6d41\u91cf\u7684\u901f\u7387 \u600e\u4e48\u611f\u77e5\u62e5\u585e\u7a0b\u5ea6? \u5982\u4f55\u9650\u5236? \u91c7\u7528\u4ec0\u4e48\u7b97\u6cd5\u6765\u6539\u53d8\u901f\u7387? \u8fd0\u884c\u5728TCP\u53d1\u9001\u7aef\u62e5\u585e\u63a7\u5236\u673a\u5236\u8ddf\u8e2a\u4e00\u4e2a\u989d\u5916\u53d8\u91cf,\u62e5\u585e\u7a97\u53e3 cwnd LastByteSent - LastByteRead <= min{cwnd,rwnd} \u901a\u8fc7\u8c03\u8282cwnd\u7684\u503c\u6765\u8c03\u6574\u53d1\u9001\u65b9\u5411\u94fe\u63a5\u53d1\u9001\u6570\u636e\u7684\u901f\u7387 \u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u4ee3\u8868\u7740\u62e5\u585e: \u8d85\u65f6 \u6536\u5230\u4e09\u4e2a\u5197\u4f59ACK TCP\u901a\u8fc7\u786e\u8ba4\u6765\u589e\u5927\u62e5\u585e\u7a97\u53e3\u957f\u5ea6,TCP\u88ab\u79f0\u4e3a \u81ea\u8ba1\u65f6 TCP\u62e5\u585e\u63a7\u5236\u7b97\u6cd5:\u6162\u542f\u52a8,\u62e5\u585e\u907f\u514d,\u5feb\u901f\u6062\u590d \u6162\u542f\u52a8 cwnd\u4ee5\u4e00\u4e2aMSS\u5f00\u59cb\u542f\u52a8,\u6bcf\u6b21\u88ab\u786e\u8ba4\u7684\u65f6\u5019 cwnd\u52a0\u500d \u9047\u5230 \u8d85\u65f6 ,cwnd\u88ab\u8bbe\u7f6e\u4e3a1\u4e2aMSS,\u91cd\u542f\u6162\u542f\u52a8\u8fc7\u7a0b.\u6162\u542f\u52a8\u9608\u503cssthresh\u88ab\u8bbe\u7f6e\u4e3acwnd/2 \u5230\u8fbe\u6216\u8d85\u8fc7\u9608\u503cssthresh\u7684\u65f6\u5019,TCP\u7ed3\u675f\u6162\u542f\u52a8\u8fdb\u5165 \u62e5\u585e\u907f\u514d\u6a21\u5f0f \u9047\u5230 3\u4e2a\u5197\u4f59ACK ,TCP\u6267\u884c\u5feb\u901f\u91cd\u4f20,\u5e76\u8fdb\u5165 \u5feb\u901f\u6062\u590d\u72b6\u6001 \u4e00\u822c\u91cd\u4f20\u53ea\u6709\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u624d\u4f1a\u91cd\u4f20 \u5feb\u901f\u91cd\u4f20\u5219\u662f\u4e0d\u9700\u8981\u7b49\u5f85\u5b9a\u65f6\u5668\u8fc7\u671f,\u76f4\u63a5\u91cd\u4f20\u4e22\u5931\u7684\u62a5\u6587\u6bb5 \u62e5\u585e\u907f\u514d \u6bcf\u4e2aRTT,cwnd\u589e\u52a0\u4e00\u4e2aMSS \u9047\u5230 \u8d85\u65f6 ,\u4e0e\u6162\u542f\u52a8\u4e00\u6837,cwnd\u88ab\u8bbe\u7f6e\u4e3a1MSS,ssthresh\u88ab\u8bbe\u7f6e\u4e3acwnd/2 \u9047\u5230 3\u4e2a\u5197\u4f59ACK ,cwnd \u51cf\u534a (\u5df2\u6536\u5230\u76843\u4e2a\u5197\u4f59ACK,\u4e5f\u9700\u8981\u52a03\u4e2aMSS),ssthresh\u8bbe\u7f6e\u4e3acwnd/2,\u8fdb\u5165 \u5feb\u901f\u6062\u590d\u72b6\u6001 \u5feb\u901f\u6062\u590d \u5728\u5feb\u901f\u6062\u590d\u4e2d,\u5bf9\u4e8e\u5f15\u8d77TCP\u8fdb\u5165\u5feb\u901f\u6062\u590d\u72b6\u6001\u7684\u7f3a\u5931\u62a5\u6587\u6bb5,\u6bcf\u5f53\u6536\u5230\u5197\u4f59ACK,cwnd\u5c31\u589e\u52a0\u4e00\u4e2aMSS.\u6700\u7ec8\u5f53\u5bf9\u4e22\u5931\u62a5\u6587\u7684\u4e00\u4e2aACK\u5230\u8fbe\u65f6,TCP\u964d\u4f4ecwnd\u540e\u8fdb\u5165\u62e5\u585e\u907f\u514d\u72b6\u6001. \u9047\u5230 \u8d85\u65f6 ,\u4e0e\u6162\u542f\u52a8\u548c\u62e5\u585e\u907f\u514d\u4e00\u6837,\u6267\u884c\u76f8\u540c\u64cd\u4f5c,\u5e76\u8fdb\u5165 \u6162\u542f\u52a8\u72b6\u6001 #### \u7f51\u7edc\u8f85\u52a9\u7684\u62e5\u585e\u63a7\u5236 \u660e\u786e\u62e5\u585e\u901a\u544a(ECN) ECN\u660e\u786e\u6d89\u53caTCP\u548cIP,\u6709\u4e24\u4e2a\u6bd4\u7279\u7528\u4e8eECN,\u8fd9\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e8e IP\u6570\u636e\u62a5 \u7684\u670d\u52a1\u7c7b\u578b\u5b57\u6bb5\u4e2d \u5f53 \u63a5\u6536\u65b9 \u6536\u5230\u7684\u6570\u636e\u5305\u4e2d\u5305\u542b\u7f51\u7edc\u5c42\u8bbe\u7f6e\u7684ECN\u4fe1\u53f7\u65f6,\u5728\u8fd4\u56deTCP ACK\u62a5\u6587\u6bb5\u7684ECE\u6bd4\u7279\u7f6e\u4f4d,\u53d1\u9001\u65b9\u6536\u5230TCP ACK\u4e4b\u540e\u4f1a\u5bf9ECE\u6307\u793a\u505a\u51fa\u53cd\u5e94,\u5e76\u5728\u4e0b\u4e00\u4e2a\u53d1\u9001\u7684\u62a5\u6587\u6bb5\u4e2d\u5bf9 CWR(\u62e5\u585e\u7a97\u53e3\u7f29\u51cf) \u6bd4\u7279\u8fdb\u884c\u7f6e\u4f4d \u9664\u4e86TCP\u4ee5\u5916\u7684\u8fd0\u8f93\u5c42\u534f\u8bae\u4e5f\u53ef\u4ee5\u5229\u7528\u7f51\u7edc\u5c42\u53d1\u9001ECN\u4fe1\u53f7 \u516c\u5e73\u6027 UDP\u6d41\u91cf\u4f1a\u538b\u5236TCP\u7684\u6d41\u91cf\u4f20\u9001 \u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u540c\u65f6\u5f00\u542f\u591a\u4e2a\u5e76\u884cTCP\u94fe\u63a5,\u4e5f\u4f1a\u5360\u7528\u5927\u91cf\u5e26\u5bbd. \u8fd0\u8f93\u5c42\u529f\u80fd\u6f14\u5316 \u5f85\u8865\u5145... \u7f51\u7edc\u5c42\uff1a\u6570\u636e\u5e73\u9762 \u7f51\u7edc\u5c42\u4e2d\u7684\u6bcf\u4e00\u53f0\u4e3b\u673a\u548c\u8def\u7531\u5668\u90fd\u6709\u4e00\u4e2a\u7f51\u7edc\u5c42\u7684\u90e8\u5206\uff0c\u7f51\u7edc\u5c42\u53ef\u4ee5\u88ab\u5206\u89e3\u4e3a\u4e24\u4e2a\u76f8\u4e92\u4f5c\u7528\u7684\u90e8\u5206\uff1a \u6570\u636e\u5e73\u9762 \u548c \u63a7\u5236\u5e73\u9762 \u6570\u636e\u5e73\u9762\u4e3b\u8981\u662f\u7f51\u7edc\u4e2d\u6bcf\u53f0\u8def\u7531\u5668\u7684\u529f\u80fd\uff0c\u8be5\u6570\u636e\u5e73\u9762\u529f\u80fd\u51b3\u5b9a\u5230\u8fbe\u8def\u7531\u5668\u8f93\u5165\u94fe\u8def\u4e4b\u4e00\u7684\u6570\u636e\u5305\u5982\u4f55 \u8f6c\u53d1 \u5230\u8f93\u51fa\u94fe\u8def \u4e4b\u4e00 \u76ee\u524d\u7684\u8f6c\u53d1\u4e3b\u8981\u5305\u62ec \u57fa\u4e8e\u6570\u636e\u62a5\u76ee\u7684\u5730\u5740\u7684\u8f6c\u53d1 \u4ee5\u53ca \u901a\u7528\u8f6c\u53d1\uff08\u57fa\u4e8e\u6570\u636e\u62a5\u9996\u90e8\u4e0d\u540c\u51e0\u4e2a\u57df\u7684\u503c\u6267\u884c\u8f6c\u53d1\u548c\u5176\u4ed6\u529f\u80fd\uff09 \u7f51\u7edc\u5c42\u6982\u8ff0 \u6570\u636e\u5e73\u9762\u4e3b\u8981\u4f5c\u7528\u662f\u4ece\u5176\u8f93\u5165\u94fe\u8def\u5411\u5176\u8f93\u51fa\u94fe\u8def\u8f6c\u53d1\u6570\u636e\u62a5 \u63a7\u5236\u5e73\u9762\u4e3b\u8981\u4f5c\u7528\u662f\u534f\u8c03\u8fd9\u4e9b\u6bcf\u672c\u5730\u8def\u7531\u5668\u7684\u8f6c\u53d1\u64cd\u4f5c\uff0c\u4f7f\u6570\u636e\u62a5\u6cbf\u7740\u6e90\u548c\u76ee\u7684\u4e3b\u673a\u4e4b\u95f4\u7684\u8def\u7531\u5668\u8def\u5f84\u6700\u7ec8\u8fdb\u884c\u7aef\u5230\u7aef\u4f20\u9001 \u8def\u7531\u5668\u4e0d\u8fd0\u884c \u5e94\u7528\u5c42 \u548c \u8fd0\u8f93\u5c42 \u534f\u8bae \u8f6c\u53d1\u548c\u8def\u7531 \u8f6c\u53d1\uff1a\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u8def\u7531\u5668\u7684\u8f93\u5165\u7aef\u53e3\u65f6\uff0c\u8def\u7531\u5668\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u8f93\u51fa\u7aef\u53e3\u5c06\u5176\u8f6c\u53d1\u51fa\u53bb\uff0c\u8f6c\u53d1\u662f\u5728 \u6570\u636e\u5e73\u9762\u552f\u4e00\u5b9e\u73b0 \u7684\u529f\u80fd \u8def\u7531\u9009\u62e9\uff1a\u5206\u7ec4\u4ece\u53d1\u9001\u65b9\u6d41\u5411\u63a5\u6536\u65b9\uff0c\u7f51\u7edc\u5c42\u5fc5\u987b\u51b3\u5b9a\u8fd9\u4e9b\u5206\u7ec4\u6240\u9009\u62e9\u7684\u8def\u5f84\u6216\u8def\u7531\uff0c\u8ba1\u7b97\u8fd9\u4e9b\u8def\u5f84\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a \u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u8f6c\u53d1\u901a\u5e38\u7531 \u786c\u4ef6 \u5b9e\u73b0\uff0c\u662f\u8def\u7531\u5668\u672c\u5730\u64cd\u4f5c \u8def\u7531\u9009\u62e9\u901a\u5e38\u7531 \u8f6f\u4ef6 \u5b9e\u73b0\uff0c\u662f\u7f51\u7edc\u8303\u56f4\u5904\u7406\u8fc7\u7a0b \u8f6c\u53d1 \u6bcf\u53f0\u8def\u7531\u5668\u90fd\u5177\u6709 \u8f6c\u53d1\u8868 \uff0c\u8def\u7531\u5668\u68c0\u67e5\u5230\u8fbe\u5206\u7ec4\u9996\u90e8\u7684 \u4e00\u4e2a\u6216\u591a\u4e2a \u5b57\u6bb5\u6765\u5728\u5176\u8f6c\u53d1\u8868\u4e2d\u8fdb\u884c\u7d22\u5f15\u67e5\u627e \u8f93\u51fa\u94fe\u8def\u63a5\u53e3 \u8def\u7531\u9009\u62e9\u7b97\u6cd5\u51b3\u5b9a\u8f6c\u53d1\u8868\u7684\u503c \u4f20\u7edf\u65b9\u6cd5\uff1a\u6bcf\u53f0\u8def\u7531\u5668\u90fd\u6709\u4e00\u4e2a\u4e0e\u5176\u4ed6\u8def\u7531\u5668\u8fdb\u884c\u8def\u7531\u9009\u62e9\u901a\u4fe1\u7684\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\uff0c\u901a\u8fc7\u8def\u7531\u9009\u62e9\u534f\u8bae\u4ea4\u6362\u5305\u542b\u8def\u7531\u9009\u62e9\u4fe1\u606f\u7684\u8def\u7531\u9009\u62e9\u62a5\u6587 SDN\u65b9\u6cd5\uff1a\u8fdc\u7a0b\u63a7\u5236\u5668\u8fdb\u884c\u8ba1\u7b97\u3001\u5206\u53d1\u8def\u7531\u8868\uff0c\u672c\u5730\u8def\u7531\u5668\u53ea\u8d1f\u8d23\u8f6c\u53d1\u3002\u8def\u7531\u5668\u548c\u8fdc\u7a0b\u63a7\u5236\u5668\u901a\u8fc7\u4ea4\u6362\u5305\u542b\u8f6c\u53d1\u8868\u548c\u5176\u4ed6\u8def\u7531\u9009\u62e9\u4fe1\u606f\u7684\u62a5\u6587 \u56e0\u7279\u7f51\u7684\u7f51\u7edc\u5c42\u53ea\u63d0\u4f9b\u4e86 \u5c3d\u529b\u800c\u4e3a \u670d\u52a1 \u8def\u7531\u5668\u548c\u4ea4\u6362\u673a\u90fd\u5c5e\u4e8e\u5206\u7ec4\u4ea4\u6362\u673a \u8def\u7531\u5668\u5de5\u4f5c\u539f\u7406 \u8def\u7531\u5668\u57fa\u672c\u7ec4\u4ef6\u5305\u542b\uff1a \u8f93\u5165\u7aef\u53e3\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u4e0e\u6570\u636e\u94fe\u8def\u5c42\u8fdb\u884c\u4ea4\u4e92 \u6267\u884c\u67e5\u627e\u529f\u80fd\uff1a\u901a\u8fc7\u67e5\u8be2\u8f6c\u53d1\u8868\u51b3\u5b9a\u8def\u7531\u5668\u7684\u8f93\u51fa\u7aef\u53e3 \u5230\u8fbe\u7684\u5206\u7ec4\u7ecf\u8fc7\u4ea4\u6362\u7ed3\u6784\u53d1\u9001\u5230\u8f93\u51fa\u7aef\u53e3\uff0c\u63a7\u5236\u5206\u7ec4\u4ece\u8f93\u5165\u7aef\u53e3\u8f6c\u53d1\u5230\u8def\u7531\u9009\u62e9\u5904\u7406\u5668 \u8f93\u51fa\u7aef\u53e3\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u5b58\u50a8\u4ece \u4ea4\u6362\u7ed3\u6784 \u63a5\u53d7\u7684\u5206\u7ec4\u5e76\u6267\u884c\u5fc5\u8981\u7684\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\u529f\u80fd\u5728\u8f93\u51fa\u94fe\u8def\u4e0a\u4f20\u8f93\u8fd9\u4e9b\u5206\u7ec4 \u4ea4\u6362\u7ed3\u6784\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u5c06\u8f93\u5165\u7aef\u53e3\u8fde\u63a5\u5230\u8f93\u51fa\u7aef\u53e3 \u8def\u7531\u9009\u62e9\u5904\u7406\u5668\uff08CPU\uff09 \u6267\u884c\u63a7\u5236\u5e73\u9762\u7684\u529f\u80fd \u4f20\u7edf\u8def\u7531\u5668\u4e2d\uff1a\u6267\u884c\u8def\u7531\u9009\u62e9\u534f\u8bae\uff0c\u7ef4\u62a4\u8def\u7531\u9009\u62e9\u8868\u548c\u76f8\u5173\u94fe\u8def\u72b6\u6001\u4fe1\u606f\uff0c\u4e3a\u8def\u7531\u5668\u8ba1\u7b97\u8f6c\u53d1\u8868 SDN\u8def\u7531\u5668\u4e2d\uff1a\u8d1f\u8d23\u4e0e\u8fdc\u7a0b\u63a7\u5236\u5668\u901a\u4fe1\uff0c\u63a5\u53d7\u8fdc\u7a0b\u63a7\u5236\u5668\u8ba1\u7b97\u7684\u8f6c\u53d1\u8868\u9879\uff0c\u5e76\u5728\u8def\u7531\u5668\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\u5b89\u88c5\u8fd9\u4e9b\u8868\u9879 \u8f93\u5165\u7aef\u53e3\u7684\u5904\u7406 \u8f93\u5165\u7aef\u53e3\u6267\u884c\u67e5\u627e\u8f6c\u53d1\u8868\u529f\u80fd\u6765\u51b3\u5b9a\u8f93\u51fa\u7aef\u53e3 \u8f6c\u53d1\u8868\u662f\u7531\u8def\u7531\u9009\u62e9\u5904\u7406\u5668\u8ba1\u7b97\u548c\u66f4\u65b0\u5f97\u51fa\u7684 \u8f6c\u53d1\u8868\u662f\u7531\u9009\u62e9\u5904\u7406\u5668\u7ecf\u8fc7\u72ec\u7acb\u603b\u7ebf\u590d\u5236\u5230\u7ebf\u8def\u5361 \u8f6c\u53d1\u51b3\u7b56\u80fd\u5728\u6bcf\u4e2a\u8f93\u5165\u7aef\u53e3\u672c\u5730\u505a\uff0c\u800c\u65e0\u9700\u57fa\u4e8e\u6bcf\u4e2a\u5206\u7ec4\u8c03\u7528\u96c6\u4e2d\u5f0f\u8def\u7531\u9009\u62e9\u5904\u7406\u5668 \u57fa\u4e8e\u76ee\u7684\u8f6c\u53d1 \u6700\u957f\u524d\u7f00\u5339\u914d \u5b58\u5728\u9ed8\u8ba4\u8f6c\u53d1\u94fe\u8def\u63a5\u53e3 \u53ef\u80fd\u5206\u7ec4\u88ab\u963b\u585e\u6392\u961f\u5728\u8f93\u5165\u7aef\u53e3 \u4ea4\u6362 \u7ecf\u5185\u5b58\u4ea4\u6362 \u5728CPU\u64cd\u4f5c\u4e0b\uff0c\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u4ea4\u6362 \u7ecf\u603b\u7ebf\u4ea4\u6362 \u901a\u8fc7\u5171\u4eab\u603b\u7ebf\u4ea4\u6362\uff0c\u8f93\u5165\u7aef\u53e3\u4e3a\u5206\u7ec4\u52a0\u4e0a\u4ea4\u6362\u673a\u5185\u90e8\u6807\u7b7e\u7136\u540e\u53d1\u9001\u7ed9\u6240\u6709\u7684\u8f93\u51fa\u7aef\u53e3\uff0c\u8f93\u51fa\u7aef\u53e3\u4f1a\u8fdb\u884c\u5339\u914d \u7ecf\u4e92\u8054\u7f51\u7edc\u4ea4\u6362 \u901a\u8fc72N\u6761\u603b\u7ebf\u6765\u7ec4\u6210\u4e92\u8054\u7f51\u7edc\uff0c\u94fe\u63a5N\u4e2a\u8f93\u5165\u7aef\u53e3\u548cN\u4e2a\u8f93\u51fa\u7aef\u53e3 \u8f93\u51fa\u7aef\u53e3 \u53d6\u51fa\u5b58\u653e\u5728\u8f93\u51fa\u7aef\u53e3\u5185\u5b58\u4e2d\u7684\u5206\u7ec4\u5e76\u5c06\u5176\u53d1\u9001\u5230\u8f93\u51fa\u94fe\u8def\u4e2d \u6392\u961f \u8f93\u5165\u6392\u961f \u4ea4\u6362\u673a\u901f\u5ea6\u6ca1\u6709\u8fbe\u5230\u8ba9\u6240\u6709\u5206\u7ec4\u65e0\u65f6\u5ef6\u7684\u4ea4\u6362 \u8f93\u51fa\u6392\u961f \u5f03\u5c3e\uff1a\u4e22\u5f03\u521a\u5230\u8fbe\u7684\u5206\u7ec4\u6216\u8005\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u5df2\u6392\u961f\u7684\u5206\u7ec4 \u5728\u7f13\u5b58\u586b\u6ee1\u524d\u4e22\u5f03\u4e00\u4e2a\u5206\u7ec4\u6216\u8005\u5728\u9996\u90e8\u52a0\u4e0a\u6807\u8bb0\u6765\u5411\u53d1\u9001\u65b9\u63d0\u4f9b\u4e00\u4e2a\u62e5\u585e\u4fe1\u53f7 \u541e\u5410\u91cf\u548c\u6700\u5c0f\u7684\u65f6\u5ef6\u90fd\u5f88\u91cd\u8981 \u5206\u7ec4\u8c03\u5ea6 \u5148\u8fdb\u5148\u51fa \u4f18\u5148\u6743\u6392\u961f \u5faa\u73af\u6392\u961f\uff1a\u6309\u7167\u7c7b\u522b\u8fdb\u884c\u4f20\u8f93 \u52a0\u6743\u516c\u5e73\u6392\u961f\uff1a\u6839\u636e\u6bcf\u4e2a\u7c7b\u522b\u7b49\u5f85\u7684\u5206\u7ec4\u6570\u91cf\u6765\u8ba1\u7b97\u6743\u91cd IPv4\u6570\u636e\u62a5\u548c\u5bfb\u5740 IPv4 IPv4\u6570\u636e\u62a5\u683c\u5f0f \u7248\u672c\u53f7\uff1a4bit\uff0c\u89c4\u5b9a\u4e86\u6570\u636e\u62a5\u7684IP\u534f\u8bae\u7248\u672c \u9996\u90e8\u957f\u5ea6\uff1a4bit\uff0cIPv4\u6570\u636e\u62a5\u5305\u542b\u4e00\u4e9b\u53ef\u53d8\u6570\u91cf\u7684\u9009\u9879\uff0c\u901a\u8fc7\u8be5\u5b57\u6bb5\u6765\u786e\u5b9a\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u5b9e\u9645\u5f00\u59cb\u7684\u5730\u65b9\uff0c\u4e00\u822c\u5177\u6709 20\u5b57\u8282 \u7684\u9996\u90e8 \u670d\u52a1\u7c7b\u578b\uff1a8bit\uff0c\u533a\u5206\u5f00\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u62a5\uff1a\u5b9e\u65f6\u6570\u636e\u62a5\u3001\u975e\u5b9e\u65f6\u6570\u636e\u62a5\u7b49 \u6570\u636e\u62a5\u957f\u5ea6\uff1a16bit\uff0cIP\u6570\u636e\u62a5\u603b\u957f\u5ea6\uff08\u9996\u90e8+\u8f7d\u8377\uff09\uff0cIP\u6570\u636e\u62a5\u7406\u8bba\u6700\u5927\u957f\u5ea6\u4e3a65535\u5b57\u8282 \u6807\u8bc6\u3001\u6807\u5fd7\u3001\u7247\u504f\u79fb\uff1a\u8fd9\u4e09\u4e2a\u5b57\u6bb5\u4e0eIP\u5206\u7247\u6709\u5173\uff08IPv6\u5c31\u53d6\u6d88\u4e86\uff09\uff0c\u4e00\u4e2a\u5927\u7684IP\u6570\u636e\u62a5\u88ab\u5206\u4e3a\u51e0\u4e2a\u5c0f\u7684IP\u6570\u636e\u62a5\u7136\u540e\u88ab\u53d1\u9001\u5230\u76ee\u7684\u4e3b\u673a\u8fdb\u884c\u91cd\u65b0\u7ec4\u88c5 \u5bff\u547d\uff1aTTL\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u53f0\u8def\u7531\u5668\uff0cTTL-1\uff0cTTL\u4e3a0\u4e22\u5f03\u8be5\u6570\u636e\u5305 \u534f\u8bae\uff1a\u6307\u660e\u4e86\u8be5IP\u6570\u636e\u62a5\u4ea4\u7ed9\u54ea\u4e00\u4e2a\u4e0a\u5c42\u8fd0\u8f93\u5c42\u534f\u8bae \u534f\u8bae\u53f7\u5c06\u7f51\u7edc\u5c42\u548c\u8fd0\u8f93\u5c42\u7ed1\u5b9a\u5728\u4e00\u8d77 \u7aef\u53e3\u53f7\u5c06\u8fd0\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u7ed1\u5b9a\u5230\u4e00\u8d77 \u9996\u90e8\u6821\u9a8c\u548c\uff1a16bit \u7528\u4e8e\u5e2e\u52a9\u8def\u7531\u5668\u68c0\u6d4b\u6536\u5230\u7684IP\u6570\u636e\u62a5\u4e2d\u7684\u6bd4\u7279\u9519\u8bef \u6839\u636e\u9996\u90e8\u4e2d\u7684\u5b57\u6bb5\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684\uff0c \u6bcf\u53f0\u8def\u7531\u5668\u90fd\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff0c\u56e0\u4e3aTLL\u5b57\u6bb5\u4ee5\u53ca\u53ef\u80fd\u7684\u9009\u9879\u5b57\u6bb5\u4f1a\u6539\u53d8 \u91cd\u590d\u68c0\u6d4b\u662f\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\u7684 \u534f\u8bae\u642d\u914d \u6e90\u548c\u76ee\u7684IP\u5730\u5740\uff1a\u90fd\u662f32bit \u9009\u9879\uff1a\u9009\u9879\u5b57\u6bb5\u5141\u8bb8IP\u9996\u90e8\u88ab\u6269\u5c55 \u6570\u636e\uff08\u6709\u6548\u8f7d\u8377\uff09\uff1a\u9001\u5f80\u8fd0\u8f93\u5c42\u7684\u62a5\u6587\u6bb5\uff08TCP/UDP,\u4e5f\u53ef\u4ee5\u662fICMP\uff09 IPv4\u7f16\u5740 \u6bcf\u4e2a\u63a5\u53e3 \u90fd\u5177\u6709IP\u5730\u5740 \u8def\u7531\u5668\u5177\u6709\u591a\u4e2a\u63a5\u53e3 \u6bcf\u53f0\u4e3b\u673a\u548c\u6bcf\u4e2a\u8def\u7531\u5668\u63a5\u53e3\u90fd\u5177\u6709\u5404\u81ea\u7684IP\u5730\u5740 \u6bcf\u4e2aIPv4\u5730\u5740\u957f\u5ea6\u4e3a32bit\uff084\u5b57\u8282\uff09 IP\u5730\u5740\u9700\u8981\u7531\u5176\u94fe\u63a5\u7684\u5b50\u7f51\u6765\u51b3\u5b9a \u5b50\u7f51\u63a9\u7801 \u4e09\u4e2a\u4e3b\u673a\u63a5\u53e3\u548c\u4e00\u4e2a\u8def\u7531\u5668\u63a5\u53e3\u5f62\u6210\u4e86\u4e00\u4e2a\u5b50\u7f51 \u65e0\u7c7b\u522b\u57df\u95f4\u8def\u7531\u9009\u62e9\uff08CIDR\u7f16\u5740\uff09\uff0ca.b.c.d/x x\u9ad8\u6bd4\u7279\u6784\u6210\u4e86IP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206 \u8def\u7531\u805a\u5408 32-x\u6bd4\u7279\u88ab\u7528\u4e8e\u533a\u5206\u7ec4\u7ec7\u5185\u90e8\u8bbe\u5907 \u5206\u7c7b\u7f16\u5236 IP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206\u88ab\u9650\u5236\u4e3a8\u300116\u300124\u6bd4\u7279\uff0c\u5206\u522b\u4ee3\u8868A\u3001B\u548cC\u7f51\u7edc 255.255.255.255\u4e3aIP\u5e7f\u64ad\u5730\u5740\uff0c0.0.0.0\u4e3a\u81ea\u8eab\u7684IP\u5730\u5740\uff0c\u7528\u4e8e\u5728\u4e00\u4e9b\u7279\u6b8a\u573a\u5408 DHCP\uff08\u52a8\u6001\u4e3b\u673a\u914d\u7f6e\u534f\u8bae\uff09 DHCP\u5141\u8bb8\u4e3b\u673a\u81ea\u52a8\u83b7\u53d6\u4e00\u4e2aIP\u5730\u5740\uff08\u53ef\u4ee5\u914d\u7f6e\u4e3a\u76f8\u540cIP\u5730\u5740\u6216\u8005\u4e34\u65f6IP\u5730\u5740\uff09 DHCP\u8fd8\u5f97\u77e5\u5176\u4f59\u4fe1\u606f\uff0c\u5b50\u7f51\u63a9\u7801\uff0c\u7b2c\u4e00\u8df3\u8def\u7531\u5730\u5740\uff08\u7f51\u5173\uff09\uff0c\u672c\u5730DNS\u670d\u52a1\u5668\u5730\u5740\u7b49 \u5ba2\u6237-\u670d\u52a1\u5668\u534f\u8bae\uff1a\u5ba2\u6237\u901a\u5e38\u662f\u65b0\u5230\u8fbe\u7684\u4e3b\u673a\uff0c\u9700\u8981\u83b7\u5f97\u5305\u62ec\u81ea\u8eabIP\u5730\u5740\u7b49\u4fe1\u606f \u7406\u60f3\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u5b50\u7f51\u5177\u6709\u4e00\u53f0DHCP\u670d\u52a1\u5668\u6216\u8005DHCP\u4e2d\u7ee7\u4ee3\u7406\uff0c\u8be5\u4ee3\u7406\u77e5\u9053\u8be5\u7f51\u7edcDHCP\u670d\u52a1\u5668\u7684\u5730\u5740 DCHP\u5ba2\u6237\u548c\u670d\u52a1\u5668\u4ea4\u4e92 DHCP\u670d\u52a1\u5668\u53d1\u73b0\uff1a\u5ba2\u6237\u673a\u53d1\u9001 DHCP\u53d1\u73b0\u62a5\u6587 \uff0cUDP\uff0c\u7aef\u53e3\u53f767\uff0c\u5e7f\u64ad\u76ee\u7684\u5730\u5740255.255.255.255\uff0c\u4ee5\u53ca\u201c\u6e90\u4e3b\u673aIP\u201d0.0.0.0 DHCP\u670d\u52a1\u5668\u63d0\u4f9b\uff1a\u670d\u52a1\u5668\u53d1\u9001 DHCP\u63d0\u4f9b\u62a5\u6587 \uff0c\u5e7f\u64ad255.255.255.255\uff0c\u62a5\u6587\u4e2d\u5305\u542b\u63a8\u8350IP\u5730\u5740\u3001\u7f51\u7edc\u63a9\u7801\u3001IP\u5730\u5740\u79df\u7528\u671f\u7b49 DHCP\u8bf7\u6c42\uff1a\u5ba2\u6237\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u5668\u63d0\u4f9b\u4e2d\u9009\u62e9\u4e00\u4e2a\uff0c\u5e76\u5411\u5176\u53d1\u9001 DHCP\u8bf7\u6c42\u62a5\u6587 \u54cd\u5e94\uff0c\u56de\u663e\u914d\u7f6e\u7684\u53c2\u6570 DHCP ACK\uff1a\u670d\u52a1\u5668\u7528 DHCP ACK \u62a5\u6587 \u5bf9DHCP\u8bf7\u6c42\u62a5\u6587\u8fdb\u884c\u54cd\u5e94\uff0c\u8bc1\u5b9e\u53c2\u6570 DHCP\u8fd8\u63d0\u4f9b\u4e86\u673a\u5236\u6765\u5141\u8bb8\u5ba2\u6237\u66f4\u65b0\u5bf9\u4e00\u4e2aIP\u5730\u5740\u7684\u79df\u7528 NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u534f\u8bae\uff09 NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\uff09 NAT\u5bf9\u5916\u754c\u76f8\u5f53\u4e8e\u5177\u6709\u5355\u4e00IP\u5730\u5740\u7684\u5355\u4e00\u8bbe\u5907 NAT\u5bf9\u5916\u754c\u9690\u85cf\u4e86\u5b50\u7f51\u7684\u7ec6\u8282 \u8def\u7531\u5668\u4eceISP\u7684DHCP\u670d\u52a1\u5668\u5f97\u5230NAT\u5730\u5740 NAT\u8def\u7531\u5668\u5177\u6709\u4e00\u5f20NAT\u8f6c\u6362\u8868\uff0c\u8868\u9879\u4e2d\u5305\u542b\u4e86 \u7aef\u53e3\u53f7\u548c\u5176IP\u5730\u5740 \u8def\u7531\u5668\u91cd\u5199\u6570\u636e\u62a5\u7684ip\u5730\u5740\u548c\u7aef\u53e3 \u5411\u5916\u754c\u53d1\u9001 \u6e90IP\u66ff\u6362\u4e3aNAT IP\u5730\u5740 \u6e90\u7aef\u53e3\u66ff\u6362\u4e3aNAT\u4e2d\u7a7a\u4f59\u7aef\u53e3 \u4ece\u5916\u754c\u63a5\u53d7 \u76ee\u7684IP\u6839\u636eNAT\u8f6c\u6362\u8868\u901a\u8fc7\u7aef\u53e3\u6765\u67e5\u8be2 \u66ff\u6362\u76ee\u7684IP NAT\u5c5e\u4e8e\u4e2d\u95f4\u76d2 \u4e2d\u95f4\u76d2\u4e0d\u6267\u884c\u4f20\u7edf\u7684\u6570\u636e\u62a5\u8f6c\u53d1\uff0c\u800c\u662f\u6267\u884c\u8bf8\u5982NAT\u3001\u6d41\u91cf\u8d1f\u8f7d\u5747\u8861\u3001\u6d41\u91cf\u9632\u706b\u5899\u7b49\u529f\u80fd IPv6\u6570\u636e\u62a5\u548c\u5bfb\u5740 IPv6\u6570\u636e\u62a5\u683c\u5f0f \u6269\u5927\u7684\u5730\u5740\u5bb9\u91cf\uff1a\u753132\u6bd4\u7279\u5347\u4e3a128\u6bd4\u7279\uff0c\u5e76\u5f15\u5165\u4e86\u9664\u5355\u64ad\u548c\u591a\u64ad\u4e4b\u5916\u7684\u4efb\u64ad \u7b80\u5316\u9ad8\u6548\u768440\u5b57\u8282\u9996\u90e8\uff1a\u5b9a\u957f40\u5b57\u8282\u9996\u90e8 \u6d41\u6807\u7b7e\uff1a\u7ed9\u7279\u6b8a\u6d41\u7684\u5206\u7ec4\u52a0\u4e0a\u6807\u7b7e\uff08\u97f3\u9891\u89c6\u9891\u7b49\uff09 IPv6\u6570\u636e\u62a5 \u7248\u672c\uff1aIP\u7248\u672c\u53f7 \u6d41\u91cf\u7c7b\u578b\uff1a\u670d\u52a1\u7c7b\u578b\uff0c\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684IP\u6570\u636e\u62a5 \u6d41\u6807\u7b7e\uff1a20bit\uff0c\u5bf9\u4e00\u6761\u6d41\u4e2d\u7684\u67d0\u4e9b\u6570\u636e\u62a5\u7ed9\u51fa\u4f18\u5148\u7ea7 \u6709\u6548\u8f7d\u8377\u5b57\u6bb5\uff1a40\u5b57\u8282\u9996\u90e8\u5b57\u6bb5\u540e\u7684\u6570\u636e\u8f7d\u8377\u5b57\u8282\u6570\u91cf \u4e0b\u4e00\u4e2a\u9996\u90e8\uff1a\u6807\u8bc6\u6570\u636e\u62a5\u4ea4\u4ed8\u7ed9\u54ea\u4e2a\u534f\u8bae\uff08TCP\u3001UDP\uff09 \u8df3\u9650\u5236\uff1a\u7ea6\u7b49\u4e8eTTL \u6e90\u5730\u5740\u548c\u76ee\u7684\u5730\u5740\uff1a128bit \u6570\u636e\uff1a\u6570\u636e\u8f7d\u8377\u90e8\u5206 \u4eceIPv4\u5230IPv6\u7684\u8fc1\u79fb IPv6\u517c\u5bb9IPv4 IPv4\u7f51\u7edc\u8bbe\u5907\u4e0d\u652f\u6301IPv4 \u89e3\u51b3\u529e\u6cd5\uff1a\u5efa\u96a7\u9053 \u4e24\u4e2aIPv6\u8282\u70b9\u901a\u8fc7IPv4\u7f51\u7edc\u8bbe\u5907\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c06IPv6\u6570\u636e\u62a5\u653e\u5230\u4e00\u4e2aIPv4\u6570\u636e\u62a5\u7684\u8f7d\u8377\u5b57\u6bb5 IPv6\u63a5\u6536\u7aef\u901a\u8fc7\u89c2\u5bdf\u8be5IPv4\u7684\u534f\u8bae\u53f7\u5b57\u6bb541\u6765\u5224\u65ad\u6709\u6548\u8f7d\u8377\u548cIPv6\u6570\u636e\u62a5 \u6cdb\u5316\u8f6c\u53d1\u548cSDN \u8f6c\u53d1\u53ef\u4ee5\u6982\u62ec\u4e3a \u5339\u914d\u548c\u64cd\u4f5c \u5728\u6cdb\u5316\u8f6c\u53d1\u4e2d\uff0c\u64cd\u4f5c\u53ef\u4ee5\u5305\u62ec\u8bb8\u591a\u4e0d\u540c\u79cd\u64cd\u4f5c \u6bcf\u53f0\u5206\u7ec4\u4ea4\u6362\u673a\u4e2d\u90fd\u6709\u5339\u914d\u52a0\u64cd\u4f5c\u8868\uff0c\u8be5\u8868\u7531\u8fdc\u7a0b\u63a7\u5236\u5668\u8ba1\u7b97\u3001\u5b89\u88c5\u548c\u66f4\u65b0 O penFlow \u662f\u6cdb\u5316\u8f6c\u53d1\u4e2d\u4e00\u79cd\u534f\u8bae \u5339\u914d\u52a0\u64cd\u4f5c\u8f6c\u53d1\u8868 \u5728OpenFlow\u4e2d\u79f0\u4e3a\u6d41\u8868\uff0c\u6bcf\u4e2a\u8868\u9879\u5305\u62ec \u9996\u90e8\u5b57\u6bb5\u503c\u7684\u96c6\u5408\uff1a\u5165\u5206\u7ec4\u5c06\u4e0e\u4e4b\u5339\u914d\uff0c\u57fa\u4e8e\u786c\u4ef6\u7684\u5339\u914d\u6267\u884c\u6700\u4e3a\u8fc5\u901f\uff0c\u5339\u914d\u4e0d\u4e0a\u7684\u6d41\u8868\u5c06\u4f1a\u88ab\u4e22\u5f03\u6216\u53d1\u9001\u5230\u8fdc\u7a0b\u63a7\u5236\u5668\u505a\u66f4\u591a\u7684\u5904\u7406 \u8ba1\u6570\u5668\u96c6\u5408\uff1a\u5f53\u5206\u7ec4\u4e0e\u6d41\u8868\u9879\u5339\u914d\u65f6\u66f4\u65b0\u8ba1\u6570\u5668 \u64cd\u4f5c\u96c6\u5408\uff1a\u5f53\u5206\u7ec4\u5339\u914d\u6d41\u8868\u9879\u65f6\u6240\u91c7\u53d6\u7684\u64cd\u4f5c\u96c6\u5408 \u5339\u914d OpenFlow 1.0\u6d41\u8868\u5177\u670911\u4e2a\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u548c\u5165\u7aef\u53e3ID\uff08\u6700\u8fd1\u5df2\u7ecf\u589e\u52a0\u5230\u4e8641\u4e2a\uff09 OpenFlow\u7684\u5339\u914d\u62bd\u8c61\u5141\u8bb8\u5bf9\u6765\u81ea\u4e09\u4e2a\u5c42\u6b21\u7684\u534f\u8bae\u9996\u90e8\u6240\u9009\u62e9\u7684\u5b57\u6bb5\u8fdb\u884c\u5339\u914d \u5165\u7aef\u53e3\u662f\u6307\u5206\u7ec4\u4ea4\u6362\u673a\u4e0a\u63a5\u53d7\u5206\u7ec4\u7684\u8f93\u5165\u7aef\u53e3 \u6d41\u8868\u9879\u4e5f\u5177\u6709\u901a\u914d\u7b26 \u64cd\u4f5c \u6bcf\u4e2a\u6d41\u8868\u9879\u90fd\u5177\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u5217\u8868 \u8f6c\u53d1 \u4e22\u5f03 \u4fee\u6539\u5b57\u6bb5 ... SDN\u63a7\u5236\u5668\u8ba1\u7b97\u548c\u5206\u53d1\u6d41\u8868\uff0c\u534f\u8bae\u7528\u4e8e\u5728\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u5b83\u7684\u63a7\u5236\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1 \u4e2d\u95f4\u76d2 \"\u5728\u6e90\u4e3b\u673a\u548c\u76ee\u7684\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u8def\u5f84\u4e0a\uff0c\u6267\u884c\u9664\u4e86IP\u8def\u7531\u5668\u7684\u6b63\u5e38\u6807\u51c6\u529f\u80fd\u4e4b\u5916\u7684\u5176\u4ed6\u529f\u80fd\u7684\u4efb\u4f55\u4e2d\u95f4\u7684\u76d2\u5b50\" \u5927\u81f4\u5305\u62ec\u4ee5\u4e0b\u4e09\u79cd NAT\u8f6c\u6362 \u5b89\u5168\u670d\u52a1\uff1a\u9632\u706b\u5899\u57fa\u4e8e\u9996\u90e8\u5b57\u6bb5\u503c\u6216\u91cd\u5b9a\u5411\u5206\u7ec4\u6765\u963b\u585e\u6d41\u91cf\uff0c\u4ece\u800c\u8fdb\u884c\u9644\u52a0\u5904\u7406 \u6027\u80fd\u589e\u5f3a \u200b \u968f\u7740\u4e2d\u95f4\u4ef6\u7684\u589e\u591a\uff0c\u5355\u72ec\u7684\u4e13\u7528\u786c\u4ef6\u3001\u5355\u72ec\u7684\u4e13\u7528\u8f6f\u4ef6\u5806\u6808\u7b49\u90fd\u610f\u5473\u7740\u5de8\u5927\u7684\u6210\u672c\u548c\u6295\u8d44\u8d39\u7528\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u4eba\u5458\u6b63\u5728\u63a2\u7d22\u4f7f\u7528\u5546\u7528\u786c\u4ef6\uff08\u7f51\u7edc\u3001\u8ba1\u7b97\u548c\u670d\u52a1\uff09\uff0c\u5e76\u8bd5\u56fe\u5728\u901a\u7528\u8f6f\u4ef6\u5806\u6808\u4e0a\u6784\u5efa\u4e13\u95e8\u7684\u8f6f\u4ef6\u6765\u5b9e\u73b0\u8fd9\u4e9b\u670d\u52a1\uff0c\u800c\u8fd9\u5c31\u662fSDN\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u7f51\u7edc\u529f\u80fd\u865a\u62df\u5316\uff08NFV\uff09\uff1b\u53e6\u4e00\u79cd\u88ab\u63a2\u7d22\u7684\u65b9\u6cd5\u662f\u628a\u4e2d\u95f4\u76d2\u529f\u80fd\u5916\u5305\u7ed9\u4e91\u3002 IP\u6c99\u6f0f \u7aef\u5230\u7aef\u539f\u5219 \u7f51\u7edc\u5c42\uff1a\u63a7\u5236\u5e73\u9762 \u63a7\u5236\u5e73\u9762\u4f5c\u4e3a\u4e00\u79cd\u7f51\u7edc\u8303\u56f4\u7684\u903b\u8f91\uff0c\u4e0d\u4ec5\u63a7\u5236\u6cbf\u7740\u4ece\u6e90\u4e3b\u673a\u5230\u76ee\u7684\u4e3b\u673a\u7684\u7aef\u5230\u7aef\u8def\u5f84\u95f4\u7684\u8def\u7531\u5668\u5982\u4f55\u8f6c\u53d1\u6570\u636e\u62a5\uff0c\u800c\u4e14\u63a7\u5236\u7f51\u7edc\u5c42\u7ec4\u4ef6\u548c\u670d\u52a1\u5982\u4f55\u914d\u7f6e\u548c\u7ba1\u7406 \u6982\u8ff0 \u8f6c\u53d1\u8868\uff08\u57fa\u4e8e\u76ee\u7684\u5730\u8f6c\u53d1\u7684\u573a\u666f\uff09\u548c\u6d41\u8868\uff08\u6cdb\u5316\u8f6c\u53d1\u7684\u573a\u666f\uff09 \u8ba1\u7b97\u3001\u7ef4\u62a4\u548c\u5b89\u88c5\u6d41\u8868\u4ee5\u53ca\u8f6c\u53d1\u8868 \u6bcf\u8def\u7531\u5668\u63a7\u5236 \u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u4e2a\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\uff0c\u7528\u4e8e\u548c\u5176\u4ed6\u8def\u7531\u5668\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\u901a\u4fe1 \u903b\u8f91\u96c6\u4e2d\u5f0f\u63a7\u5236 \u903b\u8f91\u96c6\u4e2d\u5f0f\u63a7\u5236\u5668\u8ba1\u7b97\u5e76\u5206\u53d1\u8f6c\u53d1\u8868\u4ee5\u4f9b\u6bcf\u53f0\u8def\u7531\u5668\u4f7f\u7528 \u8be5\u63a7\u5236\u5668\u4e0e\u6bcf\u53f0\u8def\u7531\u5668\u4e2d\u7684 \u63a7\u5236\u4ee3\u7406\uff08CA\uff09 \u8fdb\u884c\u4ea4\u4e92\uff0cCA\u4e00\u822c\u53ea\u5177\u6709 \u4e0e\u63a7\u5236\u5668\u901a\u4fe1\u5e76\u6309\u7167\u63a7\u5236\u5668\u547d\u4ee4\u884c\u4e8b \u8fd9\u4e00\u79cd\u529f\u80fd \u4e0e\u6bcf\u8def\u7531\u5668\u63a7\u5236\u4e2d\u7684CA\u4e0d\u540c\uff0c\u8fd9\u4e9bCA\u4e4b\u95f4\u4e0d\u80fd\u76f4\u63a5\u76f8\u4e92\u4ea4\u4e92\uff0c\u4e5f\u4e0d\u80fd\u4e3b\u52a8\u53c2\u4e0e\u8ba1\u7b97\u8f6c\u53d1\u8868 \u8def\u7531\u9009\u62e9\u7b97\u6cd5\u4ecb\u7ecd\u4ee5\u53ca\u5212\u5206 \u8def\u7531\u9009\u62e9\u7b97\u6cd5\u76ee\u7684\u662f\u4ece\u53d1\u9001\u65b9\u5230\u63a5\u6536\u65b9\u7684\u8fc7\u7a0b\u4e2d\u786e\u5b9a\u4e00\u6761\u901a\u8fc7\u8def\u7531\u5668\u7f51\u7edc\u7684\u597d\u8def\u5f84\uff08\u6700\u4f4e\u5f00\u9500\u7684\u8def\u5f84\uff09 \u6839\u636e\u96c6\u4e2d\u5f0f\u548c\u975e\u96c6\u4e2d\u5f0f\u6765\u5212\u5206 \u96c6\u4e2d\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u7528\u5b8c\u6574\u7684\u3001\u5168\u5c40\u7684\u7f51\u7edc\u77e5\u8bc6\u8ba1\u7b97\u51fa\u4ece\u6e90\u5230\u76ee\u7684\u5730\u4e4b\u95f4\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u96c6\u4e2d\u5f0f\u7b97\u6cd5\u5177\u6709\u5173\u4e8e\u8fde\u901a\u6027\u548c\u94fe\u8def\u5f00\u9500\u65b9\u9762\u7684\u5b8c\u6574\u4fe1\u606f \u5177\u6709\u5168\u5c40\u72b6\u6001\u4fe1\u606f\u7684\u7b97\u6cd5\u5e38\u88ab\u79f0\u4f5c \u94fe\u8def\u72b6\u6001\uff08LS\uff09\u7b97\u6cd5 \uff0c\u8be5\u7b97\u6cd5\u5fc5\u987b\u77e5\u9053\u7f51\u7edc\u4e2d\u6bcf\u6761\u94fe\u8def\u7684\u5f00\u9500 \u5206\u6563\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u8def\u7531\u5668\u4ee5\u8fed\u4ee3\u3001\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8ba1\u7b97\u6700\u4f4e\u5f00\u9500\u8def\u5f84\uff0c\u6ca1\u6709\u8282\u70b9\u62e5\u6709\u5173\u4e8e\u6240\u6709\u7f51\u7edc\u94fe\u8def\u5f00\u9500\u7684\u5b8c\u6574\u4fe1\u606f \u6bcf\u4e2a\u8282\u70b9\u4ec5\u6709\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u94fe\u8def\u7684\u5f00\u9500\u77e5\u8bc6\uff0c\u7136\u540e\u901a\u8fc7\u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\u4ee5\u53ca\u76f8\u90bb\u8282\u70b9\u7684\u4fe1\u606f\u4ea4\u6362\u6765\u786e\u5b9a\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u8ddd\u79bb\u5411\u91cf\uff08DV\uff09\u7b97\u6cd5 \uff0c\u5206\u6563\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5230\u7f51\u7edc\u4e2d\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u5f00\u9500(\u8ddd\u79bb)\u7684\u5411\u91cf \u6839\u636e\u9759\u6001\u548c\u52a8\u6001\u6765\u5212\u4efd \u9759\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u8def\u7531\u968f\u65f6\u95f4\u53d8\u5316\u975e\u5e38\u7f13\u6162\uff0c\u901a\u5e38\u662f\u4eba\u5de5\u8fdb\u884c\u8c03\u6574 \u52a8\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u968f\u7740 \u7f51\u7edc\u6d41\u91cf\u8d1f\u8f7d\u6216\u62d3\u6251\u53d1\u751f\u53d8\u5316 \u800c\u6539\u53d8\u8def\u7531\u9009\u62e9\u8def\u5f84 \u6613\u53d7\u5230\u8bf8\u5982\u8def\u7531\u9009\u62e9\u5faa\u73af\u3001\u8def\u7531\u632f\u8361\u4e4b\u7c7b\u95ee\u9898\u7684\u5f71\u54cd \u6839\u636e\u8d1f\u8f7d\u654f\u611f\u548c\u8d1f\u8d23\u8fdf\u949d\u6765\u5212\u5206 \u8d1f\u8f7d\u654f\u611f\u7b97\u6cd5\uff0c\u94fe\u8def\u5f00\u9500\u4f1a\u52a8\u6001\u5730\u53d8\u5316\u4ee5\u53cd\u6620\u51fa\u5e95\u5c42\u94fe\u8def\u7684\u5f53\u524d\u62e5\u585e\u6c34\u5e73 \u8d1f\u8f7d\u8fdf\u949d\u7b97\u6cd5\uff0c\u67d0\u6761\u94fe\u8def\u7684\u5f00\u9500\u4e0d\u660e\u786e\u53cd\u5e94\u5f53\u524d\u6216\u6700\u8fd1\u7684\u62e5\u585e\u6c34\u5e73\uff08\u4e3b\u6d41\uff09 \u94fe\u8def\u72b6\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08LS\uff09 \u901a\u8fc7 \u94fe\u8def\u72b6\u6001\u5e7f\u64ad\u7b97\u6cd5 \uff0c\u5411\u6bcf\u4e2a\u8282\u70b9\u5411\u7f51\u8def\u4e2d \u6240\u6709\u5176\u4ed6\u8282\u70b9\u5e7f\u64ad\u94fe\u8def\u72b6\u6001\u5206\u7ec4 \uff0c\u6bcf\u4e2a\u5206\u7ec4\u5305\u542b\u5b83\u6240\u8fde\u63a5\u7684\u94fe\u8def\u7684\u6807\u8bc6\u548c\u5f00\u9500 \u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u7f51\u7edc\u7684\u7edf\u4e00\u3001\u5b8c\u6574\u89c6\u56fe\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u90fd\u80fd\u591f\u8fd0\u884cLS\u7b97\u6cd5\u5e76\u8ba1\u7b97\u51fa\u76f8\u540c\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u96c6\u5408 \u94fe\u8def\u72b6\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08LS\uff09\uff1aDijkstra\u7b97\u6cd5 Djkstra\u7b97\u6cd5\u8ba1\u7b97\u51fa\u67d0\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u5f53\u540c\u4e00\u94fe\u8def\u4e24\u4e2a\u65b9\u5411\u8d1f\u8f7d\u4e0d\u540c\u65f6\uff0c\u4f1a\u51fa\u73b0\u632f\u8361\u60c5\u51b5 \u8be5\u60c5\u51b5\u4e0d\u4ec5\u51fa\u73b0\u5728LS\u4e2d\uff0c\u5b83\u51fa\u73b0\u5728\u4efb\u4f55\u4f7f\u7528\u62e5\u585e\u6216\u57fa\u4e8e\u65f6\u5ef6\u7684\u94fe\u8def\u6d4b\u5ea6\u7b97\u6cd5\u4e2d \u8ba9\u6240\u6709\u8def\u7531\u5668\u5e76\u975e\u540c\u65f6\u8fd0\u884cLS\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898 \u4e3a\u4e86\u907f\u514d\u81ea\u540c\u6b65\uff0c\u5c06\u901a\u544a\u65f6\u95f4\u968f\u673a\u5316 \u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5DV \u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u7684\u3001\u5f02\u6b65\u7684\u548c\u5206\u5e03\u5f0f\u7b97\u6cd5 \u5206\u5e03\u5f0f\uff1a\u6bcf\u4e2a\u8282\u70b9\u90fd\u8981\u4ece\u76f8\u90bb\u8282\u70b9\u83b7\u53d6\u4fe1\u606f\u3001\u8ba1\u7b97\u7136\u540e\u5411\u90bb\u5c45\u5206\u53d1 \u8fed\u4ee3\uff1a\u6b64\u7b97\u6cd5\u4e00\u76f4\u6301\u7eed\u5230\u6ca1\u6709\u4fe1\u606f\u4ea4\u6362\u4e3a\u6b62 \u5f02\u6b65\uff1a\u4e0d\u8981\u6c42\u6240\u6709\u8282\u70b9\u76f8\u4e92\u4e4b\u95f4\u6b65\u4f10\u4e00\u81f4 Bellman-Ford\u7b97\u6cd5 \u8282\u70b9\u552f\u4e00\u5177\u6709\u7684\u4fe1\u606f\u662f \u5b83\u5230\u76f4\u63a5\u76f8\u8fde\u90bb\u5c45\u7684\u94fe\u8def\u5f00\u9500 \u548c \u5b83\u4ece\u8fd9\u4e9b\u90bb\u5c45\u63a5\u6536\u5230\u7684\u4fe1\u606f \uff0c\u6bcf\u4e2a\u8282\u70b9\u5177\u6709 \u521d\u59cb\u8def\u7531\u9009\u62e9\u8868 \u4ece\u90bb\u5c45\u63a5\u53d7\u66f4\u65b0\u8ddd\u79bb\u5411\u91cf\u3001\u91cd\u65b0\u8ba1\u7b97\u8def\u7531\u9009\u62e9\u8868\u9879\u548c\u901a\u77e5\u90bb\u5c45\u5230\u76ee\u7684\u5730\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u7684\u5f00\u9500\uff0c\u5faa\u73af\u5f80\u590d\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\uff0c\u8be5\u7b97\u6cd5\u8fdb\u5165\u9759\u6b62\u72b6\u6001 \u4e3a\u4e86\u907f\u514d\u8def\u7531\u9009\u62e9\u73af\u8def \u5982\u679c z\u901a\u8fc7y\u8def\u7531\u5230\u8fbex \uff0c\u5219z\u5c06\u901a\u544ay\uff0cz\u5230x\u7684\u8ddd\u79bb\u662f\u65e0\u7a77\u5927\u7684\u5373\uff0cDz(x)\u4e3a\u65e0\u7a77 \u53ea\u8981z\u7ecfy\u8def\u7531\u9009\u62e9\u5230x\uff0cz\u5c31\u6301\u7eed\u8fd9\u6837\u505a LS\u548cDV\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u6bd4\u8f83 \u62a5\u6587\u590d\u6742\u5ea6\uff1aLS\u6bcf\u6b21\u94fe\u8def\u72b6\u6001\u53d1\u751f\u6539\u53d8\u5c31\u8981\u5411\u6240\u6709\u8282\u70b9\u53d1\u9001\u65b0\u7684\u94fe\u8def\u5f00\u9500\uff0cDV\u7b97\u6cd5\u4ec5\u5f53\u65b0\u7684\u94fe\u8def\u5f00\u9500\u5bfc\u81f4\u4e0e\u8be5\u94fe\u8def\u76f8\u8fde\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u53d1\u751f\u53d8\u5316\u65f6\u624d\u4f20\u64ad\u65b0\u7684\u5f00\u9500 \u6536\u655b\u901f\u5ea6\uff1aDV\u6162\uff0c\u4e14\u5728\u6536\u655b\u65f6\u4f1a\u9047\u5230\u8def\u7531\u9009\u62e9\u73af\u8def\u4ee5\u53ca\u65e0\u7a77\u8ba1\u6570\u95ee\u9898 \u5065\u58ee\u6027\uff1a LS\uff0c\u8def\u7531\u8ba1\u7b97\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u5206\u79bb\u7684\uff0c\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7684\u5065\u58ee\u6027 DV\uff0c\u4e00\u4e2a\u4e0d\u6b63\u786e\u503c\u4f1a\u6269\u6563\u5230\u6574\u4e2a\u7f51\u7edc \u56e0\u7279\u7f51\u81ea\u6cbb\u7cfb\u7edf\u5185\u90e8\u8def\u7531\u9009\u62e9\uff1aOSPF \u968f\u7740\u8def\u7531\u5668\u6570\u76ee\u53d8\u5f97\u5de8\u5927\uff0c\u6210\u672c\u548c\u89c4\u6a21\u5c06\u4f1a\u9ad8\u7684\u4e0d\u53ef\u5b9e\u73b0 \u56e0\u7279\u7f51\u65f6ISP\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2aISP\u90fd\u6709\u81ea\u5df1\u7684\u8def\u7531\u5668\u7f51\u7edc \u5f15\u5165 \u81ea\u6cbb\u7cfb\u7edf\uff08AS\uff09 \u6bcf\u4e2aAS\u7531\u4e00\u7ec4\u5728 \u76f8\u540c\u7ba1\u7406\u63a7\u5236 \u4e0b\u7684\u8def\u7531\u5668\u7ec4\u6210\uff0c\u901a\u5e38\u5728\u4e00\u4e2aISP\u548c\u4e92\u8054\u4ed6\u4eec\u7684\u94fe\u8def\u6784\u6210\u4e00\u4e2aAS \u4e00\u4e2aISP\u53ef\u4ee5\u62c6\u5206\u4e3a\u591a\u4e2aAS \u6bcf\u4e2aAS\u90fd\u6709\u552f\u4e00\u7684ASN\u53f7\u6807\u8bc6 \u4e00\u4e2a\u81ea\u6cbb\u7cfb\u7edfAS\u5185\u90e8\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u53eb\u505a\u81ea\u6cbb\u7cfb\u7edf\u5185\u90e8\u8def\u7531\u9009\u62e9\u534f\u8bae \u5f00\u653e\u6700\u77ed\u8def\u4f18\u5148\uff08OSPF\uff09 OSPF\u662f\u4e00\u79cd\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff0c\u6d2a\u6cdb\u94fe\u8def\u72b6\u6001\u4fe1\u606f\u548cDijkstra\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u7b97\u6cd5\uff0c\u4f7f\u7528OSPF\uff0c\u4e00\u53f0\u8def\u7531\u5668\u6784\u5efa\u4e86\u4e00\u5e45\u5173\u4e8e\u6574\u4e2a\u81ea\u6cbb\u7cfb\u7edf\u7684\u5b8c\u6574\u62d3\u6251\u56fe OSPF\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u8ba9\u7f51\u7edc\u7ba1\u7406\u5458\u4e3a\u7ed9\u5b9a\u7684\u94fe\u8def\u6743\u503c\u96c6\u5408\u786e\u5b9a\u6700\u4f4e\u5f00\u9500\u7684\u8def\u7531\u9009\u62e9 \u7ba1\u7406\u5458\u8bbe\u7f6e\u4e0d\u540c\u7684\u6743\u91cd\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u6700\u5c11\u8df3\u7b49 OSPF\u8def\u7531\u5668\u5411AS\u5185 \u6240\u6709\u8def\u7531\u5668 \u5e7f\u64ad\u8def\u7531\u9009\u62e9\u4fe1\u606f\uff0c\u5373\u4f7f\u72b6\u6001\u672a\u53d1\u751f\u6539\u53d8\uff0c\u5b83\u4e5f \u5468\u671f\u6027 \u7684\u5e7f\u64ad\u94fe\u8def\u72b6\u6001\uff08\u589e\u52a0\u4e86\u5065\u58ee\u6027\uff09 OSPF\u901a\u544a\u5305\u542b\u5728IP\u62a5\u6587\u4e2d\uff0c\u5bf9OSPF\u5176\u4e0a\u5c42\u534f\u8bae\u7684\u503c\u4e3a89\uff0c\u56e0\u6b64OSPF\u5fc5\u987b\u81ea\u5df1\u5b9e\u73b0\u8bf8\u5982\u53ef\u9760\u62a5\u6587\u4f20\u8f93\u3001\u94fe\u8def\u72b6\u6001\u5e7f\u64ad\u7b49\u529f\u80fd OSPF\u7684\u4f18\u70b9\uff1a \u5b89\u5168\uff1a\u80fd\u591f\u9274\u522bOSPF\u8def\u7531\u5668\u4e4b\u95f4\u7684\u4ea4\u6362 \u591a\u6761\u76f8\u540c\u5f00\u9500\u7684\u8def\u5f84\uff1a\u5b58\u5728\u591a\u6761\u76f8\u7b49\u5f00\u9500\u8def\u5f84\u65f6\uff0c\u65e0\u9700\u9009\u62e9\u5355\u4e00\u8def\u5f84\u627f\u8f7d\u6240\u6709\u6d41\u91cf \u5355\u64ad\u548c\u591a\u64ad\u8def\u7531\u9009\u62e9\u7684\u7efc\u5408\u652f\u6301 \u652f\u6301\u5728\u5355\u4e2aAS\u4e2d\u7684\u5c42\u6b21\u7ed3\u6784\uff1a\u4e00\u4e2aOSPF\u81ea\u6cbb\u7cfb\u7edf\u80fd\u591f\u5c42\u6b21\u5316\u914d\u7f6e\u591a\u4e2a\u533a\u57df \u6bcf\u4e2a\u533a\u57df\uff0c\u4e00\u53f0\u6216\u591a\u53f0\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\u8d1f\u8d23\u4e3a\u8be5\u533a\u57df\u4ee5\u5916\u7684\u5206\u7ec4\u63d0\u4f9b\u8def\u7531\u9009\u62e9 \u6bcf\u4e2aAS\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2aOSPF\u533a\u57df\u88ab\u914d\u7f6e\u4e3a \u4e3b\u5e72\u533a\u57df \uff0c\u4e3b\u5e72\u533a\u57df\u4e3a\u8be5AS\u4e2d \u5176\u4f59\u533a\u57df \u4e4b\u95f4\u7684\u6d41\u91cf\u63d0\u4f9b\u8def\u7531\u9009\u62e9 \u8be5\u4e3b\u5e72\u5305\u542b\u6240\u6709\u7684\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\u548c\u90e8\u5206\u975e\u8fb9\u754c\u8def\u7531\u5668 AS\u4e2d\u7684\u8def\u7531\u9009\u62e9\u8981\u6c42\uff0c\u5206\u7ec4\u5148\u5230\u8fbe\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\uff0c\u7136\u540e\u901a\u8fc7\u4e3b\u5e72\u533a\u57df\u5230\u8fbe\u76ee\u7684\u533a\u57df\u7684\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\uff0c\u8fdb\u800c\u5230\u6700\u7ec8\u76ee\u7684\u5730 ISP\u4e4b\u95f4\u7684\u8def\u7531\u9009\u62e9\uff1aBGP \u5f53\u5206\u7ec4\u8de8\u8d8a\u591a\u4e2aAS\u8fdb\u884c\u8def\u7531\u65f6\uff0c\u9700\u8981\u4e00\u4e2a\u81ea\u6cbb\u7cfb\u7edf\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae \u5728\u56e0\u7279\u7f51\u4e2d\u6240\u6709\u7684AS\u8fd0\u884c\u76f8\u540c\u7684AS\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae\uff0c\u79f0\u4e3a\u8fb9\u754c\u7f51\u5173\u534f\u8bae BGP\u5c06\u56e0\u7279\u7f51\u4e2d\u6570\u4ee5\u5343\u8ba1\u7684ISP\u7c98\u5408\u8d77\u6765\uff08\u56e0\u7279\u7f51\u4e2d\u534f\u8bae\u552f\u4e00\u53ef\u80fd\u7ade\u4e89\u8005\u662fIP\u534f\u8bae\uff09 BGP\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u548c\u5f02\u6b65\u7684\u534f\u8bae BGP\u4f5c\u7528 \u6bcf\u4e2a\u8def\u7531\u5668\u5177\u6709\u4e00\u53f0\u8f6c\u53d1\u8868\uff0c\u5bf9\u4e8e\u4f4d\u4e8e\u76f8\u540cAS\u7684\u76ee\u7684\u5730\u800c\u8a00\uff0c\u8f6c\u53d1\u8868\u8868\u9879\u7531AS\u5185\u90e8\u8def\u7531\u534f\u8bae\u51b3\u5b9a\uff0c\u5bf9\u4e8eAS\u5916\u90e8\u7684\u76ee\u7684\u5730\u7531AS\u95f4\u534f\u8bae\u51b3\u5b9a BGP\u4e2d\u5206\u7ec4\u8def\u7531\u5230\u4e00\u4e2aCIDR\u5316\u7684\u524d\u7f00\uff0c\u5176\u4e2d\u6bcf\u4e2a\u524d\u7f00\u4ee3\u8868\u4e00\u4e2a\u5b50\u7f51\u6216\u4e00\u4e2a\u5b50\u7f51\u7684\u96c6\u5408 \uff08x,i\uff09\u5f62\u5f0f x\u4ee3\u8868\u524d\u7f00\uff08138.16.68/22\uff09\uff0ci\u4ee3\u8868\u8def\u7531\u5668\u7684\u63a5\u53e3\u4e4b\u4e00\u7684\u63a5\u53e3\u53f7 BGP\u9700\u8981\u5b8c\u6210 \u4ece\u90bb\u5c45AS\u83b7\u5f97\u524d\u7f00\u7684\u53ef\u8fbe\u6027\u4fe1\u606f\uff0cBGP\u5141\u8bb8\u6bcf\u4e2a\u5b50\u7f51\u5411\u56e0\u7279\u7f51\u5176\u4f59\u6240\u6709\u90e8\u5206\u901a\u544a\u5b83\u7684\u5b58\u5728\uff0cBGP\u786e\u4fdd\u56e0\u7279\u7f51\u4e2d\u8fc7\u7684\u6240\u6709AS\u77e5\u9053\u8be5\u5b50\u7f51 \u786e\u5b9a\u5230\u8be5\u524d\u7f00\u7684\u6700\u597d\u7684\u8def\u7531\uff0c\u4e00\u53f0\u8def\u7531\u5668\u53ef\u80fd\u76f4\u5230\u591a\u6761\u901a\u5f80\u540c\u4e00\u524d\u7f00\u7684\u4e0d\u540c\u8def\u7531\uff0c\u8def\u7531\u5668\u672c\u5730\u8fd0\u884c\u4e00\u4e2aBGP\u8def\u7531\u9009\u62e9\u8fc7\u7a0b\uff08\u4f7f\u7528\u4ece\u76f8\u90bb\u8def\u7531\u5668\u83b7\u5f97\u7684\u7684\u524d\u7f00\u53ef\u8fbe\u4fe1\u606f\uff09\uff0c\u8be5\u6700\u597d\u7684\u8def\u7531\u57fa\u4e8e\u7b56\u7565\u4ee5\u53ca\u53ef\u8fbe\u6027\u4fe1\u606f\u6765\u786e\u5b9a \u901a\u544aBGP\u8def\u7531\u4fe1\u606f \u6bcf\u4e2aAS\u5185\u90e8\u6bcf\u53f0\u8def\u7531\u5668\u8981\u4e48\u662f\u4e00\u53f0 \u7f51\u5173\u8def\u7531\u5668 \uff0c\u8981\u4e48\u662f\u4e00\u53f0 \u5185\u90e8\u8def\u7531\u5668 \u7f51\u5173\u8def\u7531\u5668\u4f4d\u4e8eAS\u8fb9\u7f18\uff0c\u5b83\u94fe\u63a5\u5230\u5176\u4ed6AS\u7684\u4e00\u53f0\u6216\u591a\u53f0\u8def\u7531\u5668 \u5185\u90e8\u8def\u7531\u5668\u4ec5\u8fde\u63a5\u5728\u4ed6\u81ea\u5df1AS\u4e2d\u7684\u4e3b\u673a\u548c\u8def\u7531\u5668 \u5728BGP\u4e2d\u6bcf\u53f0\u8def\u7531\u5668\u4f7f\u7528179\u7aef\u53e3\u7684\u534a\u6c38\u4e45TCP\u94fe\u63a5\u4ea4\u6362\u8def\u7531\u9009\u62e9\u4fe1\u606f \u6bcf\u6761\u76f4\u63a5\u8fde\u63a5\u4ee5\u53ca\u6240\u6709\u901a\u8fc7\u8be5\u94fe\u63a5\u53d1\u9001\u7684BGP\u62a5\u6587\u79f0\u4e3a BGP\u94fe\u63a5 \u8de8\u8d8a\u4e24\u4e2aAS\u7684BGP\u94fe\u63a5\u79f0\u4e3a\u5916\u90e8BGP\u94fe\u63a5\uff08eBGP\uff09 \u76f8\u540cAS\u5185\u90e8\u7684BGP\u94fe\u63a5\u79f0\u4e3a\u5185\u90e8BGP\u94fe\u63a5\uff08iBGP\uff09\uff0ciBGP\u4e0d\u603b\u662f\u4e0e\u7269\u7406\u94fe\u8def\u76f8\u5bf9\u5e94 \u786e\u5b9a\u6700\u597d\u7684\u8def\u7531 \u8def\u7531\u5668\u901a\u8fc7BGP\u94fe\u63a5\u901a\u544a\u524d\u7f00\u65f6\uff0c\u524d\u7f00\u5305\u62ec\u4e00\u4e9bBGP\u5c5e\u6027\uff0c\u524d\u7f00\u53ca\u5176\u5c5e\u6027\u79f0\u4e3a \u8def\u7531 \u4e24\u4e2a\u91cd\u8981\u7684\u5c5e\u6027\u662f AS-PATH \u548c NEXT-HOP AS-PATH\u5305\u542b\u901a\u544a\u5df2\u7ecf\u901a\u8fc7\u7684AS\u7684\u5217\u8868 BGP\u8def\u7531\u5668\u8fd8\u901a\u8fc7\u8be5\u5c5e\u6027\u68c0\u6d4b\u548c\u9632\u6b62\u901a\u544a\u73af\u8def\uff08\u5728\u901a\u544a\u4e2d\u53d1\u73b0\u4e86\u5b83\u81ea\u5df1\uff0c\u62d2\u7edd\u8be5\u901a\u544a\uff09 NEXT-HOP\u662fAS-PATH\u8d77\u59cb\u7684\u8def\u7531\u5668\u63a5\u53e3\u7684IP\u5730\u5740 \u70ed\u571f\u8c46\u8def\u7531\u9009\u62e9 \u4ece\u6240\u6709\u53ef\u80fd\u7684\u8def\u7531\u4e2d\u9009\u62e9\u5230 \u5f00\u59cb\u8be5\u8def\u7531\u7684NEXT-HOP\u8def\u7531\u5668\u5177\u6709\u6700\u5c0f\u5f00\u9500 \u7684\u8def\u7531 \u76f8\u540cAS\u5185\u90e8\u7684\u4e24\u53f0\u8def\u7531\u5668\u5230\u8fbe\u4e00\u4e2a\u76ee\u7684\u5730\u53ef\u80fd\u5177\u6709\u4e0d\u540cAS\u8def\u5f84 \u8f6c\u53d1\u8868\u589e\u52a0AS\u5411\u5916\u524d\u7f00\u65f6\uff0cAS\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae\u548cAS\u5185\u90e8\u8def\u7531\u9009\u62e9\u534f\u8bae\u90fd\u8981\u7528\u5230 \u8def\u7531\u5668\u9009\u62e9\u7b97\u6cd5 \u5b9e\u9645\u7684BGP\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u66f4\u4e3a\u590d\u6742 \u8fdb\u5165BGP\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u7684\u8f93\u5165\u662f\u5230\u67d0\u524d\u7f00\u7684\u6240\u6709\u8def\u7531\u7684\u96c6\u5408\uff0c\u8be5\u524d\u7f00\u662f\u5df2\u88ab\u8def\u7531\u5668\u5b66\u4e60\u548c\u63a5\u53d7\u7684\uff0c\u4ec5\u6709\u4e00\u6761\u65f6\u9009\u62e9\u8be5\u8def\u7531\uff0c\u5426\u5219\u987a\u5e8f\u8c03\u7528\u4ee5\u4e0b\u89c4\u5219 \u8def\u7531\u88ab\u6307\u6d3e\u4e00\u4e2a \u672c\u5730\u504f\u597d\u503c \u4f5c\u4e3a\u5176\u5c5e\u6027\u4e4b\u4e00\uff0c\u5b83\u53d6\u51b3\u4e8e\u8be5AS\u7684\u7f51\u7edc\u7ba1\u7406\u5458\uff0c\u6700\u9ad8\u672c\u5730\u504f\u597d\u503c\u8def\u7531\u88ab\u9009\u62e9 \u6700\u77edAS-PATH\u8def\u7531\uff0c\u5982\u679c\u8be5\u89c4\u5219\u662f\u552f\u4e00\u89c4\u5219\uff0cBGP\u5c06\u4f7f\u7528 \u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5 \u51b3\u5b9a\u8def\u5f84\uff0c\u5176\u4e2d\u8ddd\u79bb\u6d4b\u5ea6\u4f7f\u7528\u7684\u662fAS\u8df3\u7684\u8df3\u6570\uff0c\u800c\u4e0d\u662f\u8def\u7531\u5668\u8df3\u6570 \u4f7f\u7528\u70ed\u571f\u8c46\u8def\u7531\u9009\u62e9\uff0c\u6700\u9760\u8fd1NEXT-HOP\u8def\u7531\u5668\u7684\u8def\u7531 \u4f7f\u7528BGP\u6807\u8bc6\u7b26\u9009\u62e9\u8def\u7531 IP\u4efb\u64ad BGP\u8fd8\u5e38\u88ab\u7528\u4f5c\u5b9e\u73b0IP\u4efb\u64ad\u670d\u52a1\uff0cDNS\u5e38\u4f7f\u7528\u8be5\u670d\u52a1 CDN\u4e3a\u4ed6\u7684\u591a\u53f0\u670d\u52a1\u5668\u6307\u6d3e\u76f8\u540c\u7684IP\u5730\u5740\uff0c\u5e76\u4f7f\u7528BGP\u6765\u901a\u544a\u8fd9\u4e9b\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c\u800c\u5904\u4e8e\u4e0d\u540c\u7684\u5ba2\u6237\u8bbf\u95ee\u8be5IP\u4f1a\u88ab\u5f15\u5bfc\u81f3\u4e0d\u540c\u7684\u4e0d\u540c\u7684\u670d\u52a1\u5668\uff08\u6700\u8fd1\uff09 DNS\u4e2d\uff0c\u6839\u670d\u52a1\u5668\u5177\u670913\u4e2aIP\u5730\u5740\uff0c\u4f46\u662f\u6bcf\u4e00\u4e2aIP\u5730\u5740\u5177\u6709\u591a\u53f0\u670d\u52a1\u5668\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u5206\u5e03\u5728\u5404\u5730\uff0c\u7528\u6237\u8bbf\u95ee\u8fd9\u4e9b\u6839\u670d\u52a1\u5668\u65f6\u5c06\u901a\u8fc7IP\u4efb\u64ad\u8def\u7531\u5230\u6700\u8fd1\u7684\u6839\u670d\u52a1\u5668 SDN\u63a7\u5236\u5e73\u9762 \u63a7\u5236\u5206\u7ec4\u5728\u7f51\u7edc\u7684SDN\u4f7f\u80fd\u8bbe\u5907\u4e2d\u8f6c\u53d1\u7f51\u7edc\u8303\u56f4\u903b\u8f91 SDN\u56db\u4e2a\u5173\u952e\u7279\u5f81 \u57fa\u4e8e\u6d41\u7684\u8f6c\u53d1\uff1a\u80fd\u591f\u57fa\u4e8e\u8fd0\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u6216\u94fe\u8def\u5c42\u4e2d\u4efb\u610f\u6570\u91cf\u7684\u9996\u90e8\u5b57\u6bb5\u503c\u8fdb\u884c\uff1bSDN\u63a7\u5236\u5e73\u9762\u7684\u5de5\u4f5c\u662f\u8ba1\u7b97\u3001\u7ba1\u7406\u548c\u5b89\u88c5\u6240\u6709\u7f51\u7edc\u4ea4\u6362\u673a\u4e2d\u7684 \u6d41\u8868\u9879 \u6570\u636e\u5e73\u9762\u548c\u63a7\u5236\u5e73\u9762\u5206\u79bb \u6570\u636e\u5e73\u9762\u7531\u7f51\u7edc\u4ea4\u6362\u673a\u7ec4\u6210\uff0c\u6267\u884c\u201d\u5339\u914d+\u64cd\u4f5c\u201c\u7684\u89c4\u5219 \u63a7\u5236\u5e73\u9762\u7531\u670d\u52a1\u5668\u4ee5\u53ca\u51b3\u5b9a\u548c\u7ba1\u7406\u4ea4\u6362\u673a\u6d41\u8868\u7684\u8f6f\u4ef6\u7ec4\u6210 \u7f51\u7edc\u63a7\u5236\u529f\u80fd\uff1a\u4f4d\u4e8e\u6570\u636e\u5e73\u9762\u4ea4\u6362\u673a\u5916\u90e8\uff0c\u63a7\u5236\u5e73\u9762\u672c\u8eab\u6709\u4e24\u4e2a\u7ec4\u6210 \u4e00\u4e2aSDN\u63a7\u5236\u5668\uff08\u7f51\u7edc\u64cd\u4f5c\u7cfb\u7edf\uff09 \u63a7\u5236\u5668\u7ef4\u62a4\u51c6\u786e\u7684\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\uff0c\u4e3a\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f \u63d0\u4f9b\u65b9\u6cd5\u6765\u8ba9\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u76d1\u89c6\u3001\u7f16\u7a0b\u548c\u63a7\u5236\u4e0b\u9762\u7684\u7f51\u7edc\u8bbe\u5907 \u63a7\u5236\u5668\u662f\u903b\u8f91\u4e0a\u96c6\u4e2d\uff0c\u901a\u5e38\u7531\u51e0\u53f0\u670d\u52a1\u5668\u5b9e\u73b0 \u82e5\u5e72\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\uff1a \u53ef\u7f16\u7a0b\u7684\u7f51\u7edc\uff1a \u8fd0\u884c\u5728\u63a7\u5236\u5e73\u9762\u4e0a\u7684\u7f51\u8def\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4e86SDN\u63a7\u5236\u5668\u63d0\u4f9b\u7684API\u6765\u5b9a\u4e49\u548c\u63a7\u5236\u7f51\u7edc\u8bbe\u5907\u7684\u6570\u636e\u5e73\u9762 SDN\u4fc3\u8fdb\u4e86\u7f51\u7edc\u7684\u5206\u7c7b\uff0c\u8ba9\u8ba1\u7b97\u786c\u4ef6\u3001\u7cfb\u7edf\u8f6f\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u7c7b\uff0c\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u9886\u57df\u7684\u521b\u65b0\u63d0\u4f9b\u4e86\u4e30\u5bcc\u3001\u5f00\u653e\u7684\u751f\u6001\u7cfb\u7edf SDN\u63a7\u5236\u5668 \u901a\u4fe1\u5c42\uff1aSDN\u63a7\u5236\u5668\u548c\u53d7\u63a7\u7f51\u7edc\u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u9700\u8981\u4e00\u4e2a\u534f\u8bae\u6765\u4f20\u9001\u63a7\u5236\u5668\u4e0e\u8fd9\u4e9b\u8bbe\u5907\u4e4b\u95f4\u7684\u4fe1\u606f\uff08OpenFlow\uff09 \u7f51\u7edc\u72b6\u6001\u7ba1\u7406\u5c42\uff1a\u7531SDN\u63a7\u5236\u5e73\u9762\u6240\u4f5c\u51fa\u7684\u6700\u7ec8\u63a7\u5236\u51b3\u5b9a\uff0c\u5177\u6709\u5404\u7c7b\u6700\u65b0\u72b6\u6001\u4fe1\u606f \u5bf9\u4e8e\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u63a5\u53e3\uff1a\u63a7\u5236\u5668\u901a\u8fc7\u4ed6\u7684\u201d\u5317\u5411\u201c\u63a5\u53e3\u548c\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\uff0c\u8be5API\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5728\u72b6\u6001\u7ba1\u7406\u5c42\u4e4b\u95f4\u8bfb/\u5199\u7f51\u7edc\u72b6\u6001\u548c\u6d41\u8868\uff0c\u5f53\u72b6\u6001\u6539\u53d8\u4e8b\u4ef6\u51fa\u73b0\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u6ce8\u518c\u8fdb\u884c\u901a\u544a OpenFlow\u534f\u8bae OpenFlow\u534f\u8bae\u8fd0\u884c\u5728SDN\u63a7\u5236\u5668\u548cSDN\u63a7\u5236\u7684\u4ea4\u6362\u673a\u6216\u5176\u4ed6\u5b9e\u73b0OpenFlow API\u7684\u8bbe\u5907\u4e4b\u95f4 \u8fd0\u884c\u5728TCP\u4e4b\u4e0a\uff0c\u4f7f\u75286653\u9ed8\u8ba4\u7aef\u53e3 \u63a7\u5236\u5668\u6d41\u5411\u53d7\u63a7\u4ea4\u6362\u673a\u91cd\u8981\u62a5\u6587\uff1a \u914d\u7f6e\uff1a\u8be5\u62a5\u6587\u5141\u8bb8\u63a7\u5236\u5668\u67e5\u8be2\u5e76\u8bbe\u7f6e\u4ea4\u6362\u673a\u7684\u914d\u7f6e\u53c2\u6570 \u4fee\u6539\u72b6\u6001\uff1a\u8be5\u62a5\u6587\u7531\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u4ee5\u589e\u52a0/\u5220\u9664\u6216\u4fee\u6539\u4ea4\u6362\u673a\u6d41\u8868\u4e2d\u7684\u8868\u9879\uff0c\u5e76\u8bbe\u7f6e\u4ea4\u6362\u673a\u7aef\u53e3\u7279\u6027 \u8bfb\u72b6\u6001\uff1a\u4ece\u4ea4\u6362\u673a\u7684\u6d41\u8868\u548c\u7aef\u53e3\u6536\u96c6\u7edf\u8ba1\u6570\u636e\u548c\u8ba1\u7b97\u5668\u7684\u503c \u53d1\u9001\u5206\u7ec4\uff1a\u5728\u53d7\u63a7\u4ea4\u6362\u673a\u4ece\u7279\u5b9a\u7684\u7aef\u53e3\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u62a5\u6587 \u53d7\u63a7\u4ea4\u6362\u673a\u6d41\u5411\u63a7\u5236\u5668\u91cd\u8981\u62a5\u6587: \u6d41\u5220\u9664\uff1a\u901a\u77e5\u63a7\u5236\u5668\u5df2\u5220\u9664\u4e00\u4e2a\u6d41\u8868\u9879 \u7aef\u53e3\u72b6\u6001\uff1a\u901a\u77e5\u7aef\u53e3\u72b6\u6001\u53d8\u5316 \u5206\u7ec4\u5165:\u4e00\u4e2a\u5206\u7ec4\u4e0d\u4e0e\u6240\u6709\u6d41\u8868\u9879\u5339\u914d\uff0c\u8fd9\u4e2a\u5206\u7ec4\u88ab\u53d1\u7ed9\u63a7\u5236\u5668\u8fdb\u884c\u989d\u5916\u5904\u7406 ICMP\uff1a\u56e0\u7279\u7f51\u63a7\u5236\u62a5\u6587\u534f\u8bae ICMP\u88ab\u4e3b\u673a\u548c\u8def\u7531\u5668\u7528\u6765\u5f7c\u6b64\u6c9f\u901a\u7f51\u7edc\u5c42\u7684\u4fe1\u606f ICMP\u7684\u6700\u5178\u578b\u7528\u9014\u662f\u5dee\u9519\u62a5\u544a ICMP\u4f5c\u4e3a\u6709\u6548\u8f7d\u8377\u627f\u8f7d\u5728IP\u62a5\u6587\u6bb5\u4e2d \u6307\u660e\u4e0a\u5c42\u534f\u8bae\u4e3aICMP\u7684IP\u6570\u636e\u62a5\uff0c\u5206\u89e3\u51fa\u8be5\u6570\u636e\u62a5\u5185\u5bb9\u7ed9ICMP ICMP\u62a5\u6587\u7531\u4e00\u4e2a\u7c7b\u578b\u5b57\u6bb5\u548c\u4e00\u4e2a\u7f16\u7801\u5b57\u6bb5\uff0c\u5e76\u4e14\u5305\u542b\u5f15\u8d77\u8be5ICMP\u62a5\u6587\u9996\u6b21\u751f\u6210\u7684IP\u6570\u636e\u62a5\u7684\u9996\u90e8\u548c\u524d8\u4e2a\u5b57\u8282\uff08\u4ee5\u4fbf\u53d1\u9001\u65b9\u80fd\u786e\u5b9a\u5f15\u8d77\u8be5\u5dee\u9519\u7684\u6570\u636e\u62a5\uff09 ICMPv6\u8fd8\u589e\u52a0\u4e86\u65b0\u5174IPv6\u529f\u80fd\u6240\u9700\u7684\u65b0\u7c7b\u578b\u548c\u7f16\u7801 \u5206\u7ec4\u592a\u5927 \u672a\u88ab\u8ba4\u53ef\u7684IPv6\u9009\u9879 \u3002\u3002\u3002 \u6570\u636e\u94fe\u8def\u5c42 \u671f\u672b\u901f\u6210 TCP\u53d1\u9001\u65b9\u7ef4\u6301\u62e5\u585e\u7a97\u53e3 TCP\u63a5\u6536\u65b9\u7ef4\u6301\u63a5\u6536\u7a97\u53e3 \u7269\u7406\u5c42 \u5948\u5f0f\u5b9a\u5f8b \u9999\u6d53\u5b9a\u5f8b \u91c7\u6837\u9891\u7387\u4e3a\u5b9e\u9645\u9891\u7387\u76842\u500d\u4ee5\u4e0a \u7801\u5143 = log2\u6bd4\u7279\u6570 \u4fe1\u566a\u6bd4\uff08db\uff09 = 10 log10 S/N \u6ce2\u7279\u7387 \u662f\u6307\u5355\u4f4d\u65f6\u95f4\u5185\u4f20\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u4f4d\u6570\uff0c\u5355\u4f4d\u7528 bps(\u4f4d/\u79d2)* \u8868\u793a\uff0c\u8bb0\u4f5c* \u6ce2\u7279 4\u76f8\u4f4d\u4ee3\u8868\u4e24\u4e2a\u6bd4\u7279\u4f4d\uff0c2400bps = 1200\u6ce2\u7279 \u6570\u636e\u94fe\u8def\u5c42 \u6700\u957f\u6570\u636e\u5e27\u4e3a1500B \u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6 = 2 * \u4f20\u64ad\u65f6\u5ef6 * \u6570\u636e\u4f20\u8f93\u901f\u7387 \u4ee5\u592a\u7f51\u4e2d Hub \u4f20\u8f93\u901f\u7387\u4e3a100Mb/s \u4ee5\u592a\u7f51\u6700\u5c0f\u5e27\u957f\u5ea6 64B CRC\u5dee\u9519\u68c0\u9a8c \u4ea4\u6362\u673a\u8868 \u7f51\u7edc\u5c42 RIP\u534f\u8bae \u5c06\u4f20\u9001\u6765\u7684RIP\u62a5\u6587\u4e2d\u7684\u4e0b\u4e00\u8df3\u66ff\u6362\u4e3a\u53d1\u9001\u6765\u7684\u8def\u7531\u5668\u7f16\u53f7\uff0c\u8ddd\u79bb\u52a0+1 \u5982\u679c\u5f53\u524d\u8def\u7531\u5668\u6ca1\u6709\u8be5\u7f51\u7edc\u76f4\u63a5\u52a01 \u5982\u679c\u6709\u8be5\u7f51\u7edc\uff0c\u5e76\u4e14\u4e0b\u4e00\u8df3\u5730\u5740\u4e5f\u662f\u53d1\u9001\u6765\u7684\u8def\u7531\u5668\uff0c\u5219\u76f4\u63a5\u66ff\u6362 \u5982\u679c\u6709\u8be5\u7f51\u7edc\uff0c\u4f46\u662f\u4e0d\u662f\u8be5\u8def\u7531\uff0c\u9009\u62e9\u8f83\u77ed\u7684\u8def\u5f84 3\u5206\u949f\u672a\u6536\u5230\uff0c\u7f6e\u4e3a\u4e0d\u53ef\u8fbe\uff0816\uff09 \u8fd0\u8f93\u5c42 \u5e94\u7528\u5c42 @ \u8003\u8bd5\u7ed3\u675f\uff0c\u5b8c\u7ed3","title":"CN-Top-Down"},{"location":"CN-Top2down/#computer-networking-a-top-down-approach-eight-edition","text":"","title":"Computer Networking: A Top-Down Approach Eight edition`"},{"location":"CN-Top2down/#_1","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51"},{"location":"CN-Top2down/#11","text":"\u6240\u6709\u56e0\u7279\u7f51\u8bbe\u5907\u88ab\u79f0\u4e3a \u4e3b\u673a \u6216 \u7aef\u7cfb\u7edf \u7aef\u7cfb\u7edf\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a\u7684\u7f51\u7edc\u94fe\u63a5\u5230\u4e00\u8d77 \u7aef\u7cfb\u7edf\u901a\u8fc7\u56e0\u7279\u7f51\u670d\u52a1\u63d0\u4f9b\u5546\uff08ISP\uff09\u63a5\u5165\u56e0\u7279\u7f51 \u6bcf\u4e2aISP\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a\u7531\u591a\u53f0\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u591a\u6bb5\u901a\u4fe1\u94fe\u8def\u7ec4\u6210\u7684\u7f51\u7edc \u56e0\u7279\u7f51\u6807\u51c6\u89c4\u5b9a\u4e86\u6240\u6709\u56e0\u7279\u7f51\u534f\u8bae\u7684\u6807\u51c6\uff0c\u79f0\u4e3a\u8bf7\u6c42\u8bc4\u8bba\uff08RFC\uff09 \u5230\u5e95\u4ec0\u4e48\u662f\u56e0\u7279\u7f51\uff1f \u56e0\u7279\u7f51\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\u7684\u57fa\u7840\u8bbe\u65bd \u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u5bf9\u7b49\u901a\u4fe1\u5b9e\u4f53\u4e4b\u95f4\u4ea4\u6362\u7684\u62a5\u6587\u7684\u683c\u5f0f\u548c\u987a\u5e8f\uff0c\u4ee5\u53ca\u62a5\u6587\u53d1\u9001/\u63a5\u53d7\u6216\u5176\u4ed6\u65f6\u95f4\u6240\u91c7\u53d6\u7684\u64cd\u4f5c \u4ee5\u592a\u7f51\u662f\u5c40\u57df\u7f51\u6280\u672f\uff1a\u7269\u7406 + \u534f\u8bae","title":"1.1"},{"location":"CN-Top2down/#13","text":"\u4ea4\u6362\u673a\u4e3b\u8981\u6709\u8def\u7531\u5668\u548c\u94fe\u8def\u5c42\u4ea4\u6362\u673a \u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93\uff1a\u5728\u4ea4\u6362\u673a\u5f00\u59cb\u5411\u8f93\u51fa\u7535\u8def\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u524d\uff0c\u5fc5\u987b\u63a5\u6536\u5230\u6574\u4e2a\u5206\u7ec4 \u6392\u961f\u65f6\u5ef6\u548c\u5206\u7ec4\u4e22\u5931\uff1a\u5bf9\u4e8e\u6bcf\u6761\u76f8\u8fde\u7684\u94fe\u8def\uff0c\u8be5\u5206\u7ec4\u4ea4\u6362\u673a\u90fd\u6709\u4e00\u4e2a\u8f93\u51fa\u7f13\u5b58\uff08\u8f93\u51fa\u961f\u5217\uff09\uff0c\u7528\u4e8e\u5b58\u50a8\u8def\u7531\u5668\u51c6\u5907\u53d1\u5f80\u90a3\u6761\u94fe\u8def\u7684\u5206\u7ec4\u3002 \u8f6c\u53d1\u8868\u548c\u8def\u7531\u534f\u8bae \u8f6c\u53d1\u8868\u7528\u4e8e\u5c06\u76ee\u7684\u5730\u5740\u6620\u5c04\u8f93\u51fa\u4e3a\u8f93\u51fa\u94fe\u8def \u8f6c\u53d1\u5c40\u90e8\uff0c\u8def\u7531\u5168\u5c40 \u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u7535\u8def\u4ea4\u6362\u548c\u5206\u7ec4\u4ea4\u6362 \u7535\u8def\u4ea4\u6362\uff1a\u9884\u7559\u4e86\u7aef\u7cfb\u7edf\u95f4\u6cbf\u8def\u5f84\u901a\u4fe1\u6240\u9700\u8981\u7684\u8d44\u6e90\uff08\u7f13\u5b58\uff0c\u94fe\u8def\u4f20\u8f93\u901f\u7387\uff09 \u9891\u5206\u590d\u7528\uff08FDM\uff09 \u65f6\u5206\u590d\u7528\uff08TDM\uff09 \u6ce2\u5206\u590d\u7528\uff08WDM\uff09 \u7801\u5206\u590d\u7528\uff08CDM\uff09 \u5206\u7ec4\u4ea4\u6362\uff1a\u4e0d\u9884\u7559\uff0c\u56e0\u7279\u7f51\u5c3d\u6700\u5927\u52aa\u529b\u4ee5\u53ca\u65f6\u4ea4\u4ed8\u5206\u7ec4\uff0c\u4f46\u5b83\u4e0d\u505a\u4efb\u4f55\u4fdd\u8bc1","title":"1.3"},{"location":"CN-Top2down/#14","text":"\u5206\u7ec4\u4ea4\u6362\u7f51\u4e2d\u7684\u65f6\u5ef6\uff1a \u8282\u70b9\u5904\u7406\u65f6\u5ef6\uff1a\u68c0\u67e5\u5206\u7ec4\u5b57\u6bb5\u51b3\u5b9a\u5bfc\u5411\u4f55\u5904 \u6392\u961f\u65f6\u5ef6\uff1a\u5206\u7ec4\u5728\u94fe\u8def\u4e0a\u7b49\u5f85\u4f20\u8f93 \u4f20\u8f93\u65f6\u5ef6\uff1a\u5c06\u6240\u6709\u5206\u7ec4\u7684\u6bd4\u7279\u63a8\u5411\u94fe\u8def\u7684\u65f6\u95f4\uff0c\u8def\u7531\u5668\u63a8\u51fa\u5206\u7ec4\u7684\u65f6\u95f4 \u4f20\u64ad\u65f6\u5ef6\uff1a\u4e00\u4e2a\u6bd4\u7279\u4ece\u94fe\u8def\u8d77\u70b9\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\uff0c\u5206\u7ec4\u4ece\u4e00\u4e2a\u8def\u7531\u5668\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684\u65f6\u95f4 \u541e\u5410\u91cf\uff1a \u77ac\u65f6\u541e\u5410\u91cf\u662f\u4e3b\u673aB\u63a5\u6536\u5230\u8be5\u6587\u4ef6\u7684\u901f\u7387","title":"1.4"},{"location":"CN-Top2down/#15","text":"\u534f\u8bae\u5c42 \u4f20\u8f93\u4fe1\u606f \u5e38\u89c1\u534f\u8bae \u5e94\u7528\u5c42 \u62a5\u6587 HTTP,FTP,SMTP \u8fd0\u8f93\u5c42 \u62a5\u6587\u6bb5 TCP,UDP \u7f51\u7edc\u5c42 \u6570\u636e\u62a5 IP \u94fe\u8def\u5c42 \u5e27 \u7269\u7406\u5c42 \u6bd4\u7279 \u5e94\u7528\u5c42\u662f\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u53ca\u4ed6\u4eec\u7684\u5e94\u7528\u5c42\u534f\u8bae\u5b58\u7559\u7684\u5730\u65b9 \u8fd0\u8f93\u5c42\u63d0\u4f9b\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u673a\u5236 \u7f51\u7edc\u5c42\u5305\u62ec\u4e86\u7f51\u9645\u534f\u8bae\u548c\u4e00\u4e9b\u8def\u7531\u9009\u62e9\u534f\u8bae \u7f51\u9645\u534f\u8bae\uff08IP\uff09\u5b9a\u4e49\u4e86\u5728\u6570\u636e\u62a5\u4e2d\u7684\u5404\u4e2a\u5b57\u6bb5\u4ee5\u53ca\u7aef\u7cfb\u7edf\u548c\u8def\u7531\u5668\u5982\u4f55\u4f5c\u7528\u4e0e\u8fd9\u4e9b\u5b57\u6bb5 \u94fe\u8def\u5c42\u670d\u52a1\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u94fe\u8def\u5c42\u534f\u8bae\uff0c\u8d1f\u8d23\u5c06\u6574\u4e2a\u5e27\u4ece\u5f53\u524d\u7f51\u7edc\u5143\u7d20\u79fb\u52a8\u81f3\u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u7f51\u7edc\u5143\u7d20 \u7269\u7406\u5c42\u5c06\u94fe\u8def\u5c42\u5e27\u7684\u4e00\u4e2a\u4e2a\u6bd4\u7279\u4ece\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9","title":"1.5 \u534f\u8bae\u5206\u5c42\u53ca\u5176\u670d\u52a1\u6a21\u578b"},{"location":"CN-Top2down/#16","text":"\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08DOS\uff09\uff0c\u5206\u5e03\u5f0f\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08DDOS\uff09 \u5f31\u70b9\u653b\u51fb \u5e26\u5bbd\u6d2a\u6cdb \u94fe\u63a5\u6d2a\u6cdb \u5206\u7ec4\u55c5\u63a2 IP\u54c4\u9a97","title":"1.6 \u7f51\u7edc\u653b\u51fb"},{"location":"CN-Top2down/#_2","text":"TCP\uff1a \u4f20\u8f93\u63a7\u5236\u534f\u8bae \u62a5\u6587\u6bb5 UDP\uff1a \u7528\u6237\u6570\u636e\u5305\u534f\u8bae \u6570\u636e\u62a5 \u5c06\u4e3b\u673a\u95f4\u4ea4\u4ed8\u6269\u5c55\u5230\u8fdb\u7a0b\u95f4\u4ea4\u4ed8\u88ab\u79f0\u4e3a\u8fd0\u8f93\u5c42\u7684 \u591a\u8def\u590d\u7528 \u4e0e \u591a\u8def\u5206\u89e3 \u5c06\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u4e2d\u7684\u6570\u636e\u4ea4\u4ed8\u9053\u6b63\u786e\u7684\u5957\u63a5\u5b57\u7684\u5de5\u4f5c\u79f0\u4e3a\u591a\u8def\u5206\u89e3 \u5c06\u6765\u81ea\u6e90\u4e3b\u673a\u7684\u4e0d\u540c\u6570\u636e\u5757\u6536\u96c6\u8d77\u6765\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6570\u636e\u5757\u5c01\u88c5\u4e0a\u9996\u90e8\u4fe1\u606f\u4ece\u800c\u751f\u6210\u62a5\u6587\u6bb5\uff0c\u7136\u540e\u5c06\u62a5\u6587\u6bb5\u4f20\u9012\u81f3\u7f51\u7edc\u5c42\u79f0\u4e3a\u591a\u8def\u590d\u7528 \u591a\u8def\u590d\u7528\u8981\u6c42\uff1a \u5957\u63a5\u5b57\u6709\u552f\u4e00\u6807\u8bc6\u7b26 \u6bcf\u4e2a\u62a5\u6587\u6bb5\u6709\u7279\u6b8a\u5b57\u6bb5\u6765\u6307\u793a\u8be5\u62a5\u6587\u6bb5\u8981\u4ea4\u4ed8\u7684\u5957\u63a5\u5b57 \u6e90\u7aef\u53e3\u53f7\u548c\u76ee\u7684\u7aef\u53e3\u53f7 \u7aef\u53e3\u53f716\u6bd4\u7279 \u6bcf\u4e2a\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u6700\u8d77\u7801\u5305\u62ec\u76ee\u7684\u7aef\u53e3\u53f7\u548c\u6e90\u7aef\u53e3\u53f7 \u591a\u8def\u5206\u89e3\u670d\u52a1\uff1a \u5728\u4e3b\u673a\u4e0a\u7684\u6bcf\u4e2a\u5957\u63a5\u5b57\u80fd\u591f\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\u53f7\uff0c\u5f53\u62a5\u6587\u6bb5\u5230\u8fbe\u4e3b\u673a\u65f6\uff0c\u8fd0\u8f93\u5c42\u68c0\u67e5\u76ee\u7684\u7aef\u53e3\u53f7\u5e76\u5c06\u5176\u5b9a\u4f4d\u5230\u76f8\u5e94\u7684\u5957\u63a5\u5b57 \u4e00\u4e2aUDP\u5957\u63a5\u5b57\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff08\u76ee\u7684IP\uff0c\u76ee\u7684\u7aef\u53e3\u53f7\uff09\uff1b\u4e24\u4e2aUDP\u62a5\u6587\u6bb5\u6709\u4e0d\u540c\u7684\u6e90IP\u6216\u6e90\u7aef\u53e3\uff0c\u6307\u5411\u76f8\u540c\u7684\u76ee\u7684IP\u548c\u76ee\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4e24\u4e2a\u62a5\u6587\u6bb5\u5c06\u901a\u8fc7\u76f8\u540c\u7684\u76ee\u7684\u5957\u63a5\u5b57\u88ab\u5b9a\u5411\u5230 \u76f8\u540c \u7684\u8fdb\u7a0b\u3002 \u4e00\u4e2aTCP\u5957\u63a5\u5b57\u662f\u4e00\u4e2a\u56db\u5143\u7ec4\uff08\u6e90IP\uff0c\u6e90\u7aef\u53e3\uff0c\u76ee\u7684IP\uff0c\u76ee\u7684\u7aef\u53e3\uff09\uff1b\u4e24\u4e2aTCP\u62a5\u6587\u6bb5\u6709\u4e0d\u540c\u7684\u6e90IP\u6216\u6e90\u7aef\u53e3\uff0c\u6307\u5411\u76f8\u540c\u7684\u76ee\u7684IP\u548c\u76ee\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4e24\u4e2a\u62a5\u6587\u6bb5\u5c06\u901a\u8fc7\u76f8\u540c\u7684\u76ee\u7684\u5957\u63a5\u5b57\u88ab\u5b9a\u5411\u5230 \u4e24\u4e2a\u4e0d\u540c \u7684\u8fdb\u7a0b\u3002","title":"\u8fd0\u8f93\u5c42"},{"location":"CN-Top2down/#udp","text":"UDP\u53ea\u5728\u6700\u57fa\u7840\u7684\u8fd0\u8f93\u5c42\u9700\u8981\u63d0\u4f9b\u7684\u670d\u52a1\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u4e86\u4e00\u70b9\u5dee\u9519\u68c0\u6d4b\u670d\u52a1 \u65e0\u9700\u8fde\u63a5\u5efa\u7acb \u65e0\u8fde\u63a5\u72b6\u6001 \u5206\u7ec4\u9996\u90e8\u5f00\u9500\u5c0f \u5173\u4e8e\u53d1\u9001\u4ec0\u4e48\u6570\u636e\u4ee5\u53ca\u4f55\u65f6\u53d1\u9001\u63a7\u5236\u66f4\u7cbe\u7ec6 \u53ef\u4ee5\u5728\u5e94\u7528\u5c42\u6784\u5efa\u53ef\u9760\u6027\uff0c\u4ece\u800c\u907f\u514d\u4e86TCP\u534f\u8bae\u7684\u62e5\u585e\u63a7\u5236\u548c\u6d41\u91cf\u63a7\u5236","title":"\u65e0\u8fde\u63a5\u8fd0\u8f93\uff1aUDP"},{"location":"CN-Top2down/#udp_1","text":"\u6e90\u7aef\u53e3\u53f7\uff0c\u76ee\u7684\u7aef\u53e3\u53f7\uff0c\u957f\u5ea6\uff0c\u6821\u9a8c\u548c\u5206\u522b16\u6bd4\u7279 \u6821\u9a8c\u548c\uff1a\u53d1\u9001\u65b9UDP\u62a5\u6587\u6bb5\u4e2d\u6240\u670916\u6bd4\u7279\u5b57\u7684\u548c\u8fdb\u884c\u53cd\u7801\u6c42\u548c\u65f6\u9047\u5230\u7684\u6240\u6709\u6ea2\u51fa\u90fd\u4f1a\u56de\u5377\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u3002 UDP\u63d0\u4f9b\u5dee\u9519\u68c0\u6d4b\u662f\u56e0\u4e3a\u4e0d\u80fd\u4fdd\u8bc1\u4ece\u6e90\u548c\u76ee\u7684\u4e4b\u95f4\u7684\u6240\u6709\u94fe\u8def\u90fd\u6709\u5dee\u9519\u68c0\u9a8c","title":"UDP\u62a5\u6587\u6bb5\u7ed3\u6784"},{"location":"CN-Top2down/#_3","text":"\u53d1\u9001\u65b9\u9700\u8981\u53d1\u9001(\u51fd\u6570)\uff1a rdt_send() udt_send() \u63a5\u6536\u65b9\u9700\u8981(\u51fd\u6570): deliver_data() rdt_rcv() rdt\u7684\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u9700\u8981\u5f80\u8fd4\u4ea4\u6362\u63a7\u5236\u5206\u7ec4\uff0c\u8c03\u7528 udt_send()","title":"\u53ef\u9760\u6570\u636e\u4f20\u8f93\u539f\u7406"},{"location":"CN-Top2down/#rdt-10","text":"\u5047\u8bbe\u5e95\u5c42\u4fe1\u9053\u5b8c\u5168\u53ef\u9760 \u53d1\u9001\u65b9\u4f7f\u7528rdt_send\u53d1\u9001\u4e4b\u540e\u53ea\u9700\u7b49\u5f85\u4e0a\u5c42\u8c03\u7528 \u63a5\u6536\u65b9\u4f7f\u7528rdt_rcv\u63a5\u53d7\u4e4b\u540e\u53ea\u9700\u7b49\u5f85\u4e0b\u5c42\u8c03\u7528","title":"rdt 1.0"},{"location":"CN-Top2down/#rdt-20","text":"\u6b64\u65f6\u5206\u7ec4\u4e2d\u7684\u6bd4\u7279\u53ef\u80fd\u4f1a\u53d7\u635f \u53d1\u9001\u65b9 \u81ea\u52a8\u91cd\u4f20\u8bf7\u6c42\u534f\u8bae\uff08ARQ\uff09 \u5dee\u9519\u68c0\u6d4b \u63a5\u6536\u65b9\u53cd\u9988\uff1aACK\u548cNAK \u91cd\u4f20 \u53d1\u9001\u65b9\u5e76\u4e0d\u80fd\u4ece \u4e0a\u5c42 \u83b7\u53d6\u66f4\u591a\u7684\u6570\u636e\uff0crdt_send\u4e0d\u4f1a\u51fa\u73b0\uff0c\u53d1\u9001\u65b9\u4e0d\u4f1a\u53d1\u9001\u65b0\u7684\u6570\u636e\uff1b\u505c\u7b49\u534f\u8bae \u63a5\u6536\u65b9 \u63a5\u53d7\u6570\u636e\uff0c\u8fdb\u884c\u5dee\u9519\u68c0\u9a8c\uff0c\u6839\u636e\u7ed3\u679c\u8fd4\u56deACK\u6216NAK","title":"rdt 2.0"},{"location":"CN-Top2down/#rdt-21","text":"\u4f20\u9001\u8fc7\u7a0b\u4e2dACK\u6216\u8005NAK\u53d7\u635f \u5f53\u53d1\u9001\u65b9\u63a5\u6536\u5230\u542b\u7cca\u4e0d\u6e05\u7684ACK\u6216NAK\u5206\u7ec4\u65f6\u91cd\u4f20\uff0c\u4f46\u662f\u63a5\u6536\u65b9\u5e76\u4e0d\u77e5\u9053\u8fd9\u6b21\u7684\u5206\u7ec4\u662f\u65b0\u7684\u8fd8\u662f\u4e00\u6b21\u91cd\u4f20\uff0c \u5197\u4f59\u5206\u7ec4 \u53d1\u9001\u65b9\u5bf9\u6570\u636e\u5206\u7ec4\u8fdb\u884c\u7f16\u53f7\uff0c\u5c06\u6570\u636e\u5206\u7ec4\u7684\u5e8f\u53f7\u653e\u5728\u8be5\u5b57\u6bb5","title":"rdt 2.1"},{"location":"CN-Top2down/#rdt-22","text":"\u5728 rdt 2.1 \u7684\u57fa\u7840\u4e0a\u53bb\u6389\u4e86NAK \u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u9700\u8981\u9644\u5e26\u5206\u7ec4\u5e8f\u53f7","title":"rdt 2.2"},{"location":"CN-Top2down/#rdt-30","text":"\u5047\u8bbe\u9664\u4e86\u6bd4\u7279\u53d7\u635f\u4e4b\u5916\uff0c\u5e95\u5c42\u4fe1\u9053\u8fd8\u4f1a\u4e22\u5305 \u5b9a\u65f6\u91cd\u4f20\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u5012\u6570\u8ba1\u65f6\u5668\uff0c\u53d1\u9001\u65b9\u6bcf\u53d1\u9001\u4e00\u4e2a\u5206\u7ec4\u5c31\u4f1a\u542f\u52a8\u4e00\u4e2a\u5012\u6570\u8ba1\u65f6\u5668 \u6570\u636e\u4f20\u8f93\u534f\u8bae\u7684\u8981\u70b9\uff1a\u6821\u9a8c\u548c\u3001\u5e8f\u53f7\u3001\u5b9a\u65f6\u5668\u3001\u80af\u5b9a\u4e0e\u5426\u5b9a\u786e\u8ba4","title":"rdt 3.0\uff08\u6bd4\u7279\u4ea4\u66ff\u534f\u8bae\uff09"},{"location":"CN-Top2down/#_4","text":"\u505c\u7b49\u534f\u8bae\u6d6a\u8d39\u4e86\u5927\u91cf\u8d44\u6e90\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u6d41\u6c34\u7ebf\u673a\u5236 \u5f15\u5165\u6d41\u6c34\u7ebf\u673a\u5236\u5fc5\u987b\u5bf9RDT\u534f\u8bae\u505a\u51fa\u6539\u53d8 \u589e\u52a0\u5e8f\u53f7\u8303\u56f4 \u534f\u8bae\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u9700\u8981\u7f13\u5b58\u591a\u4e2a\u5206\u7ec4 \u6d41\u6c34\u7ebf\u7684\u5dee\u9519\u6062\u590d\uff1a \u56de\u9000N\u6b65 \u548c \u9009\u62e9\u91cd\u4f20 \u56de\u9000N\u6b65(GBN) base:\u6700\u5148\u53d1\u51fa\u4f46\u662f\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4\u7684\u5e8f\u53f7 nextseqnum:\u4e0b\u4e00\u4e2a\u672a\u88ab\u4f7f\u7528\u7684\u5206\u7ec4\u7684\u5e8f\u53f7 N\u6700\u5927\u957f\u5ea6:\u7a97\u53e3\u6700\u5927\u957f\u5ea6 \u4e00\u4e2a\u5206\u7ec4\u7684\u5e8f\u53f7\u627f\u8f7d\u5728\u5206\u7ec4\u9996\u90e8\u7684\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u6bb5\u91cd GBN\u53d1\u9001\u65b9\u5fc5\u987b\u54cd\u5e94\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5 \u4e0a\u5c42\u7684\u8c03\u7528:\u4e0a\u5c42\u8c03\u7528rdt_send(),GBN\u68c0\u67e5\u53d1\u9001\u7a97\u53e3\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86;\u5982\u679c\u672a\u6ee1\u5219\u66f4\u65b0\u53d8\u91cf,\u5426\u5219\u5411\u4e0a\u5c42\u53cd\u9988 \u6536\u5230\u4e00\u4e2aACK:\u63a5\u6536\u65b9\u5df2\u7ecf\u6b63\u786e\u63a5\u6536\u5230ACK\u4e3an\u4ee5\u53ca\u4e4b\u524d\u7684\u6240\u6709\u5206\u7ec4 \u8d85\u65f6\u91cd\u4f20:\u4e00\u65e6\u51fa\u73b0\u8d85\u65f6,GBN\u4f1a\u91cd\u4f20\u6240\u6709\u5df2\u53d1\u9001\u4f46\u662f\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4 \u53d1\u9001\u65b9\u53ea\u6709\u4e00\u4e2a\u5b9a\u65f6\u5668,\u6bcf\u5f53\u6536\u5230\u4e00\u4e2aACK\u5e76\u4e14\u8fd8\u6709\u5df2\u53d1\u9001\u672a\u88ab\u786e\u8ba4\u7684\u5206\u7ec4,\u91cd\u542f\u5b9a\u65f6\u5668 GBN\u53d1\u9001\u65b9\u5fc5\u987b\u7ef4\u62a4\u7a97\u53e3\u7684\u4e0a\u4e0b\u8fb9\u754c\u4ee5\u53canextnum\u5728\u8be5\u7a97\u53e3\u4e2d\u7684\u4f4d\u7f6e GBN\u7684\u63a5\u6536\u65b9: \u63a5\u6536\u65b9\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6309\u5e8f\u63a5\u53d7\u7684\u5206\u7ec4\u5e8f\u53f7,expectnum \u63a5\u6536\u65b9\u6b63\u786e\u6536\u5230\u4e00\u4e2a\u5e8f\u53f7\u4e3an\u7684\u5206\u7ec4 \u7d2f\u8ba1\u786e\u8ba4:\u63a5\u6536\u65b9\u6536\u5230\u4e3an\u7684\u6b63\u786e\u6309\u5e8f\u5206\u7ec4\u610f\u5473\u7740\u4e4b\u524d\u7684\u5206\u7ec4\u4e5f\u5df2\u7ecf\u6309\u5e8f\u6b63\u786e\u6536\u5230 \u6309\u5e8f,\u63a5\u6536\u65b9\u4e3a\u5206\u7ec4n\u53d1\u9001ACK,\u5e76\u5c06\u8be5\u5206\u7ec4\u4e2d\u7684\u6570\u636e\u4ea4\u4ed8\u5230\u4e0a\u5c42 \u4e71\u5e8f,\u63a5\u6536\u65b9\u4e22\u5f03\u8be5\u5206\u7ec4,\u5e76\u5411\u53d1\u9001\u65b9\u8fd4\u56de\u6700\u8fd1\u6309\u5e8f\u63a5\u53d7\u7684\u5206\u7ec4ACK","title":"\u6d41\u6c34\u7ebf\u534f\u8bae"},{"location":"CN-Top2down/#_5","text":"\u5728GBN\u534f\u8bae\u4e2d\u5355\u4e2a\u5206\u7ec4\u7684\u5dee\u9519\u5c31\u4f1a\u5f15\u8d77\u5927\u91cfGBN\u534f\u8bae\u5206\u7ec4\u7684\u91cd\u4f20,\u8bb8\u591a\u5206\u7ec4\u6ca1\u5fc5\u8981\u91cd\u4f20,\u56e0\u6b64\u51fa\u73b0\u4e86\u9009\u62e9\u91cd\u4f20(SR) \u9009\u62e9\u91cd\u4f20(SR)\u8ba9\u53d1\u9001\u65b9\u4ec5\u91cd\u4f20\u90a3\u4e9b\u53c8\u53ef\u80fd\u51fa\u9519\u7684\u5206\u7ec4 \u8fd9\u79cd\u4e2a\u522b\u7684,\u6309\u9700\u7684\u91cd\u4f20\u8981\u6c42\u63a5\u6536\u65b9\u9010\u4e2a\u786e\u8ba4\u6b63\u786e\u63a5\u6536\u7684\u5206\u7ec4 SR\u63a5\u6536\u65b9\u4e5f\u5f15\u5165\u4e86\u63a5\u6536\u7a97\u53e3,\u5931\u5e8f\u7684\u5206\u7ec4\u5c06\u88ab\u7f13\u5b58,\u76f4\u5230\u6240\u6709\u7684\u5206\u7ec4\u90fd\u88ab\u63a5\u53d7\u4e3a\u6b62 SR\u53d1\u9001\u65b9: \u4ece\u4e0a\u5c42\u63a5\u6536\u5230\u6570\u636e \u8d85\u65f6,\u6bcf\u4e2a\u5206\u7ec4\u90fd\u6709\u81ea\u5df1\u7684\u903b\u8f91\u5b9a\u65f6\u5668,\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u786c\u4ef6\u5b9a\u65f6\u5668\u6a21\u62df\u591a\u4e2a\u903b\u8f91\u5b9a\u65f6\u5668 \u6536\u5230ACK,\u5982\u679c\u8be5ACK\u5206\u7ec4\u5728SR\u53d1\u9001\u7a97\u53e3\u5185,\u5219\u6807\u8bb0\u4e3a\u5df2\u786e\u8ba4\u5206\u7ec4;\u5982\u679c\u8be5ACK\u5bf9\u5e94\u7684\u662fsend_base\u5219\u6574\u4e2a\u7a97\u53e3\u5411\u524d\u79fb\u52a8\u5230\u5177\u6709\u6700\u5c0f\u672a\u88ab\u786e\u8ba4\u5206\u7ec4\u5904;\u5982\u679c\u7a97\u53e3\u79fb\u52a8\u671f\u95f4\u6709\u5e8f\u53f7\u843d\u5728\u7a97\u53e3\u5185\u7684\u672a\u53d1\u9001\u5206\u7ec4,\u5219\u53d1\u9001\u8fd9\u4e9b\u5206\u7ec4. SR\u63a5\u6536\u65b9: \u5e8f\u53f7\u5728rcv_base~rcv_base+N-1\u5185\u7684\u5206\u7ec4\u88ab\u6b63\u786e\u63a5\u53d7 \u5982\u679c\u672a\u88ab\u63a5\u53d7\u8fc7,\u5219\u8be5\u5206\u7ec4\u88ab\u7f13\u5b58,\u5e76\u5411\u53d1\u9001\u65b9\u8fd4\u56de\u4e00\u4e2a\u9009\u62e9ACK \u5982\u679c\u662f\u8d77\u59cbrcv_base\u5e8f\u53f7,\u5219\u6309\u5e8f\u5411\u4e0a\u5c42\u4f20\u9001\u4ee5\u8be5\u5e8f\u53f7\u4e3a\u8d77\u59cb\u7684\u5df2\u7ecf\u7f13\u5b58\u7684\u5206\u7ec4 \u5e8f\u53f7\u5728rcv_base - N ~ rcv_base - 1 \u7684\u5e8f\u53f7,\u5fc5\u987b\u4ea7\u751f\u4e00\u4e2aACK,\u5373\u4f7f\u63a5\u6536\u65b9\u4e4b\u524d\u786e\u8ba4\u8fc7 \u5176\u4f59\u60c5\u51b5,\u5ffd\u7565 \u5bf9\u4e8eSR\u534f\u8bae\u800c\u8a00,\u7a97\u53e3\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5e8f\u53f7\u7a7a\u95f4\u5927\u5c0f\u7684\u4e00\u534a \u5728\u5206\u7ec4\u88ab\u91cd\u65b0\u6392\u5e8f\u7684\u60c5\u51b5\u4e0b,\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u4e2a\u5e8f\u53f7\u4e0d\u88ab\u91cd\u65b0\u4f7f\u7528,\u9664\u975e\u53d1\u9001\u65b9\u786e\u4fe1\u4efb\u4f55\u5148\u524d\u53d1\u9001\u7684\u5e8f\u53f7\u4e3ax\u7684\u5206\u7ec4\u90fd\u4e0d\u5728\u7f51\u7edc\u4e2d\u4e3a\u6b62,\u901a\u8fc7\u5047\u8bbe\u4e00\u4e2a\u5206\u7ec4\u5728\u7f51\u7edc\u4e2d\u7684\u5b58\u6d3b\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u67d0\u4e00\u4e2a\u6700\u5927\u91cf\u6765\u5b9e\u73b0.","title":"\u9009\u62e9\u91cd\u4f20"},{"location":"CN-Top2down/#tcp","text":"tcp\u662f\u9762\u5411\u8fde\u63a5\u7684,\u4e09\u6b21\u63e1\u624b TCP\u8fd0\u884c\u5728\u7aef\u7cfb\u7edf\u4e2d,\u4e2d\u95f4\u7684\u7f51\u7edc\u5143\u7d20\u4e0d\u4f1a\u7ef4\u6301TCP\u7684\u94fe\u63a5\u72b6\u6001,\u5bf9\u4e8e\u4ed6\u4eec\u800c\u8a00\u53ea\u662f\u6570\u636e\u5305 TCP\u662f\u5168\u53cc\u5de5\u670d\u52a1,Poin2Point \u5ba2\u6237\u7aef\u901a\u8fc7socket\u5957\u63a5\u5b57\u4f20\u9012\u6570\u636e \u5ba2\u6237\u7aef\u901a\u8fc7socket\u5957\u63a5\u5b57\u6765\u4f20\u9012\u6570\u636e\u6d41\uff0cTCP\u5c06\u6570\u636e\u5f15\u5bfc\u5230\u53d1\u9001\u7f13\u5b58\u4e2d TCP\u53ef\u4ee5\u4ece\u53d1\u9001\u7f13\u5b58\u4e2d\u53d6\u51fa\u5e76\u653e\u5165\u62a5\u6587\u6bb5\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e MSS MSS \u901a\u5e38\u7531\u672c\u5730\u4e3b\u673a\u53d1\u9001\u7684\u6700\u5927\u94fe\u8def\u5c42\u5e27\u957f\u5ea6 MTU \u6765\u8bbe\u7f6e MSS \u4fdd\u8bc1\u4e00\u4e2aTCP\u62a5\u6587\u6bb5\u5c01\u88c5\u5728 IP \u6570\u636e\u62a5\u4e2d,\u52a0\u4e0a TCP/IP \u9996\u90e8\u957f\u5ea6(\u901a\u5e3840\u5b57\u8282) MTU\u4e00\u822c\u4e3a1500\u5b57\u8282,MSS\u4e00\u822c\u4e3a1460\u5b57\u8282 TCP\u94fe\u63a5\u7684\u6bcf\u4e00\u7aef\u90fd\u6709\u5404\u81ea\u7684\u53d1\u9001\u7f13\u5b58\u548c\u63a5\u6536\u7f13\u5b58 TCP\u94fe\u63a5\u4e00\u822c\u7531\u4e00\u53f0\u4e3b\u673a\u7684\u53d8\u91cf,\u7f13\u5b58\u4ee5\u53ca\u5957\u63a5\u5b57\u548c\u53e6\u5916\u4e00\u53f0\u4e3b\u673a\u7684\u76f8\u5e94\u5143\u7d20\u7ec4\u6210","title":"\u6709\u94fe\u63a5\u8fd0\u8f93\uff1aTCP"},{"location":"CN-Top2down/#tcp_1","text":"TCP\u62a5\u6587\u6bb5\u7531\u9996\u90e8\u5b57\u6bb5\u548c\u6570\u636e\u5b57\u6bb5\u7ec4\u6210,\u6570\u636e\u5b57\u6bb5\u5927\u5c0f\u88abMSS\u9650\u5236 \u9996\u90e8\u5b57\u6bb5\u5305\u62ec: \u6e90\u7aef\u53e3\u53f7\u548c\u76ee\u7684\u7aef\u53e3\u53f7:\u7528\u4e8e\u591a\u8def\u590d\u7528/\u591a\u8def\u5206\u89e3 \u5e8f\u53f7\u548c\u786e\u8ba4\u53f7:\u7528\u4e8eTCP\u53cc\u65b9\u5b9e\u73b0\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u5e8f\u53f7\u662f\u8be5\u62a5\u6587\u6bb5\u9996\u5b57\u8282\u7684\u5b57\u8282\u6d41\u7f16\u53f7. \u786e\u8ba4\u53f7\u8868\u660e\u4e86\u6e90\u4e3b\u673a\u5e0c\u671b\u76ee\u7684\u4e3b\u673a\u53d1\u9001\u7684\u4e0b\u4e00\u5b57\u8282\u7684\u5e8f\u53f7 \u9996\u90e8\u957f\u5ea6:\u56e0\u4e3aTCP\u9996\u90e8\u5b57\u6bb5\u662f\u53d8\u957f\u7684(\u901a\u5e38\u9009\u9879\u4e3a\u7a7a\u7684\u65f6\u5019,\u5927\u5c0f\u4e3a 20\u5b57\u8282 ),\u8be5\u5b57\u6bb5\u6307\u793a\u4e86\u4ee532\u6bd4\u7279\u7684\u5b57\u4e3a\u5355\u4f4d\u7684 TCP\u9996\u90e8\u7684\u957f\u5ea6 \u4fdd\u7559\u672a\u7528: \u6807\u5fd7\u4f4d: ACK:\u7528\u4e8e\u786e\u8ba4 RST,SYN,FIN:\u7528\u4e8e\u94fe\u63a5\u5efa\u7acb\u548c\u62c6\u9664 URG:\u7528\u4e8e\u6307\u793a\u62a5\u6587\u6bb5\u5b58\u5728\u7740\"\u7d27\u6025\u6570\u636e\",\u7d27\u6025\u6570\u636e\u753116\u6bd4\u7279\u7684\u7d27\u6025\u6570\u636e\u6307\u9488\u6307\u51fa \u63a5\u53d7\u7a97\u53e3:\u7528\u4e8e\u6d41\u91cf\u63a7\u5236 \u56e0\u7279\u7f51\u6821\u9a8c\u548c:\u68c0\u67e5\u6821\u9a8c\u548c \u7d27\u6025\u6570\u636e\u6307\u9488: \u9009\u9879:\u53ef\u9009\u4e0e\u53d8\u957f,\u7528\u4e8e\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u534f\u5546\u6700\u5927\u62a5\u6587\u5b57\u6bb5\u957f\u5ea6 \u4e00\u6761TCP\u94fe\u63a5\u7684\u53cc\u65b9\u5747\u53ef\u968f\u673a\u9009\u62e9\u5e8f\u53f7 TCP\u88ab\u79f0\u4e3a\u63d0\u4f9b\u7d2f\u8ba1\u786e\u8ba4 \u5f80\u8fd4\u65f6\u95f4\u7684\u4f30\u8ba1\u4e0e\u8d85\u65f6 \u6837\u672c\u65f6\u95f4 SampleRTT \u7ef4\u62a4\u4e00\u4e2a\u5747\u503c SampleRTT,EstimateRTT $EstimateRTT=(1-\\alpha) EstimateRTT + \\alpha SampleRTT$ \u4e00\u822c$\\alpha$\u7684\u503c\u53d60.125 \u8fd9\u79cd\u6307\u6570\u52a0\u6743\u79fb\u52a8\u79fb\u52a8\u5e73\u5747(EWMA) \u6d4b\u91cf EstimateRTT\u53d8\u5316 $DevRTT=(1-\\beta)DevRTT+\\beta*|SampleRTT-EstimateRTT|$ $\\beta$\u4e3a0.25 \u5982\u679cSampleRTT\u53d8\u5316\u5c0fDevRTT\u503c\u4e5f\u5c0f \u8d85\u65f6\u95f4\u9694TimeoutInterval\u8bbe\u7f6e\u4e3aEstimateRTT\u52a0\u4e0a\u4e00\u70b9\u4f59\u91cf $TimeoutInterval=EstimateRTT+4*DevRTT$ \u4e00\u822c\u521d\u59cbTime\u8bbe\u7f6e\u4e3a1\u79d2\uff0c\u5982\u679c\u51fa\u73b0 \u8d85\u65f6 \uff0cTime\u52a0\u500d\uff0c\u76f4\u5230\u6536\u5230\u62a5\u6587\u6bb5\u624d\u4f1a\u4f7f\u7528\u4e0a\u8ff0\u516c\u5f0f\u518d\u6b21\u8ba1\u7b97Time","title":"TCP\u62a5\u6587\u6bb5\u7ed3\u6784"},{"location":"CN-Top2down/#_6","text":"TCP\u4e3b\u89813\u4e2a\u4e8b\u4ef6\u6709\u5173:\u4ece\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u6570\u636e\u3001\u5b9a\u65f6\u5668\u8d85\u65f6\u3001\u6536\u5230ACK \u4ece\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u63a5\u53d7\u6570\u636e\uff1a\u542f\u52a8\u5b9a\u65f6\u5668\uff0c\u66f4\u65b0Nextseqnum \u5b9a\u65f6\u5668\u8d85\u65f6\uff1aTCP\u91cd\u4f20\u5f15\u8d77\u8d85\u65f6\u7684\u62a5\u6587\u6bb5\uff0cTCP\u91cd\u542f\u5b9a\u65f6\u5668 \u6536\u5230ACK:TCP\u662f\u7d2f\u8ba1\u786e\u8ba4\uff0c\u6536\u5230y\u4ee3\u8868y\u4e4b\u524d\u7684\u6240\u6709\u5b57\u8282\u5e8f\u5217\u90fd\u5df2\u7ecf\u6b63\u786e\u88ab\u63a5\u53d7\uff0c\u5982\u679cy\u5927\u4e8esendbase\uff0c\u5219\u4ee3\u8868\u8be5ACK\u5728\u786e\u8ba4\u4e00\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u672a\u88ab\u786e\u8ba4\u7684\u62a5\u6587\u6bb5\uff1b\u5982\u679c\u5f53\u524d\u4ecd\u6709\u672a\u786e\u8ba4\u7684\u62a5\u6587\u6bb5\uff0cTCP\u8fd8\u8981\u91cd\u542f\u5b9a\u65f6\u5668 \u8d85\u65f6\u95f4\u9694\u52a0\u500d TCP\u91cd\u4f20\u5177\u6709\u6700\u5c0f\u5e8f\u53f7\u7684\u8fd8\u672a\u88ab\u786e\u8ba4\u7684\u62a5\u6587\u6bb5 \u6bcf\u6b21TCP\u8d85\u65f6\u91cd\u4f20\u7684\u65f6\u95f4\u95f4\u9694\u662f\u5148\u524d\u7684\u4e24\u500d\uff0c\u800c\u4e0d\u662f\u901a\u8fc7EstimatedRTT\u4e2aDevRTT\u63a8\u7b97\u7684\u503c \u5f53\u5b9a\u65f6\u5668\u5728\u53e6\u5916\u4e24\u4e2a\u65f6\u95f4\u89e6\u53d1\u7684\u65f6\u5019\uff08\u6536\u5230\u4e0a\u5c42\u5e94\u7528\u6570\u636e\u548c\u6536\u5230ACK\uff09TimeoutRTT\u88ab\u66f4\u65b0\u4e3a\u63a8\u7b97\u51fa\u6765\u7684\u503c \u5feb\u901f\u91cd\u4f20 \u56e0\u4e3a\u8d85\u65f6\u91cd\u4f20\u7684\u65f6\u95f4\u95f4\u9694\u53ef\u80fd\u5f88\u957f\uff0c\u4f1a\u589e\u52a0\u4e86\u7aef\u5230\u7aef\u65f6\u5ef6 \u5f53TCP\u53d1\u9001\u65b9\u8fde\u7eed\u6536\u5230\u4e09\u4e2a\u5197\u4f59ACK\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u53d1\u5feb\u901f\u91cd\u4f20 \u5feb\u901f\u91cd\u4f20\uff1a\u5728\u8be5\u62a5\u6587\u6bb5\u5b9a\u65f6\u5668\u8fc7\u671f\u4e4b\u524d\uff0c\u8fc5\u901f\u91cd\u4f20\u4e4b\u524d\u4e22\u5931\u7684\u62a5\u6587\u6bb5 TCP\u5dee\u9519\u6062\u590d\u673a\u5236 TCP\u7684\u5dee\u9519\u6062\u590d\u673a\u5236\u4e3aGBN\u548cSR\u7684\u6df7\u5408\u4f53 TCP\u63a5\u6536\u65b9\u4f18\u9009\u62e9\u5730\u786e\u8ba4\u5931\u5e8f\u62a5\u6587\u6bb5\uff0c\u5c06\u6b63\u786e\u63a5\u6536\u4f46\u662f\u5931\u5e8f\u7684\u62a5\u6587\u6bb5\u7f13\u5b58\u8d77\u6765","title":"\u53ef\u9760\u6570\u636e\u4f20\u8f93"},{"location":"CN-Top2down/#_7","text":"\u7ecf\u8fc7TCP\u53d1\u9001\u7684\u6570\u636e\u4f1a\u5230\u8fbe\u63a5\u6536\u65b9\u7684TCP\u7f13\u5b58\u4e2d\u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\uff0c\u4f46\u662f\u5982\u679cTCP\u53d1\u9001\u7684\u6570\u636e\u901f\u5ea6\u8fc7\u5927\u4f1a\u5bfc\u81f4\u63a5\u6536\u65b9\u7f13\u5b58\u6ea2\u51fa \u6d41\u91cf\u63a7\u5236\u662f\u4e00\u4e2a\u901f\u5ea6\u5339\u914d\u670d\u52a1\uff0c\u5373\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u5e94\u7528\u7a0b\u5e8f\u7684\u8bfb\u53d6\u901f\u7387\u76f8\u5339\u914d \u62e5\u585e\u63a7\u5236\u548c\u6d41\u91cf\u63a7\u5236\u90fd\u662f\u5bf9\u53d1\u9001\u65b9\u7684\u904f\u5236\uff0c\u4f46\u662f\u5f15\u8d77\u4e8c\u8005\u7684\u539f\u56e0\u4e0d\u540c \u6d41\u91cf\u63a7\u5236\u7684\u5b9e\u73b0 TCP\u8ba9\u53d1\u9001\u65b9\u7ef4\u62a4\u4e00\u4e2a\u63a5\u53d7\u7a97\u53e3\u6765\u8fdb\u884c \u6d41\u91cf\u63a7\u5236 \uff0c\u63a5\u6536\u7a97\u53e3\u7528\u4e8e\u7ed9\u53d1\u9001\u65b9\u6307\u793a\u63a5\u6536\u65b9\u8fd8\u6709\u591a\u5c11\u53ef\u7528\u7684\u7f13\u5b58 \u63a5\u6536\u7f13\u5b58\u5927\u5c0f\uff1aRcvBuffer LastByteRead\uff1a\u63a5\u6536\u65b9\u7528\u7528\u7a0b\u5e8f\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u53d6\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u7f16\u53f7 LastByteRcvd\uff1a\u63a5\u6536\u65b9\u7f13\u5b58\u7684\u6570\u636e\u6d41\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u7f16\u53f7 LastByteRcvd - LastByteRead <= RcvBuffer \u63a5\u53d7\u7a97\u53e3\u7528rwnd\u8868\u793a rwnd = RcvBuffer - [LastByteRcvd - LastByteRead] rwnd\u662f\u52a8\u6001\u53d8\u5316\u7684 TCP\u53d1\u9001\u65b9 LastByteSent\uff1a\u6700\u540e\u4e00\u4e2a\u53d1\u9001\u7684\u5b57\u8282\u7684\u5e8f\u53f7 LastByteAcked\uff1a\u6700\u540e\u4e00\u4e2a\u88ab\u786e\u8ba4\u7684\u5b57\u8282\u7684\u5e8f\u53f7 LastByteSent - LastByteAcked <= rwnd \u901a\u8fc7\u5c06\u672a\u786e\u8ba4\u7684\u503c\u63a7\u5236\u5728 rwnd \u4e4b\u95f4\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u63a5\u6536\u65b9\u7f13\u5b58\u4e0d\u4f1a\u6ea2\u51fa TCP\u63a5\u6536\u65b9\u4ec5\u5f53\u6709\u6570\u636e\u6216\u6709\u786e\u8ba4\u8981\u53d1\u65f6\u624d\u4f1a\u53d1\u9001\u62a5\u6587\u6bb5\u7ed9TCP\u53d1\u9001\u65b9 TCP\u63a5\u53d7\u7f13\u5b58\u6ee1\u4e86\u4e4b\u540e\uff0c\u53d1\u9001\u65b9\u5c31\u4e0d\u4f1a\u53d1\u9001\u6570\u636e\uff0c\u4f46\u662f\u6b64\u65f6\u63a5\u6536\u65b9\u5df2\u7ecf\u91ca\u653e\u4e86\u65b0\u7684\u7f13\u5b58\uff0c\u9700\u8981\u544a\u77e5\u53d1\u9001\u65b9 \u53d1\u9001\u65b9\u4f1a\u7ee7\u7eed\u53d1\u9001\u53ea\u6709\u4e00\u4e2a\u5b57\u8282\u6570\u636e\u7684\u62a5\u6587\u6bb5\uff0c\u8fd9\u4e9b\u62a5\u6587\u6bb5\u4f1a\u88ab\u63a5\u6536\u65b9\u63a5\u53d7\uff0c\u5f00\u59cb\u6e05\u7406\u7f13\u5b58\uff0c\u5e76\u4e14\u786e\u8ba4\u62a5\u6587\u4e2d\u542b\u6709\u4e00\u4e2a\u975e0 rwnd\u7684\u503c","title":"\u6d41\u91cf\u63a7\u5236"},{"location":"CN-Top2down/#tcp_2","text":"\u4e09\u6b21\u63e1\u624b TCP\u5ba2\u6237\u7aef\u53d1\u9001\u4e0d\u542b\u5e94\u7528\u6570\u636e\u7684SYN\u62a5\u6587\u6bb5\uff0c\u6807\u5fd7\u4f4dSYN\u88ab\u7f6e\u4e3a1 \u670d\u52a1\u5668\u63a5\u6536\u5230\u8be5\u62a5\u6587\uff0c\u5e76\u4e3a\u8fd9\u4e2aTCP\u94fe\u63a5\u5206\u914d\u7f13\u5b58\u548c\u53d8\u91cf\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u62a5\u6587\uff0cSYN\u88ab\u7f6e\u4e3a1\uff0c\u786e\u8ba4\u53f7\u4e3aclient_server + 1\uff0c\u5e8f\u53f7\u4e3aserver_client,\u8fd9\u4e2a\u5141\u8bb8\u94fe\u63a5\u7684\u62a5\u6587\u6bb5\u88ab\u79f0\u4e3aSYNACK\u62a5\u6587\u6bb5 \u5ba2\u6237\u7aef\u6536\u5230SYNACK\u4e4b\u540e\uff0c\u5ba2\u6237\u4e3a\u8be5\u94fe\u63a5\u5206\u914d\u7f13\u5b58\u548c\u53d8\u91cf\uff0c\u540c\u65f6\u5411\u670d\u52a1\u5668\u8fdb\u884c\u4e86\u786e\u8ba4\uff0c\u8be5SYN\u6bd4\u7279\u88ab\u7f6e\u4e3a0\uff0c\u6b64\u65f6\u53ef\u4ee5\u8d1f\u8f7d\u5ba2\u6237\u5230\u670d\u52a1\u5668\u7684\u6570\u636e \u5173\u95ed\u91ca\u653e\u94fe\u63a5 \u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u53d1\u9001\u62a5\u6587\u6bb5\uff0cFIN\u6bd4\u7279\u4f4d\u7f6e\u4e3a1\uff0c\u53d8\u4e3aFIN_WAIR_1\u72b6\u6001 \u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668ACK\u4e4b\u540e\u53d8\u4e3aFIN_WAIR_2\u72b6\u6001 \u63a5\u6536\u5230\u670d\u52a1\u5668\u7684FIN\u4e4b\u540e\u53d8\u4e3aTIME_WAIT\u72b6\u6001\uff0c\u7b49\u5f8530\u79d2\uff0c\u8fdb\u5165CLOSED\u72b6\u6001 \u670d\u52a1\u5668\u7aef \u670d\u52a1\u5668\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u7684FIN\u540e\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001ACK \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u53d1\u9001FIN\uff0c\u63a5\u6536\u5230ACK\u4e4b\u540e\u5173\u95ed\u94fe\u63a5 \u5f53\u7aef\u53e3\u53f7\u6216\u6e90IP\u4e0e\u5957\u63a5\u5b57\u4e0d\u5339\u914d\u7684\u65f6\u5019,\u76ee\u7684\u4e3b\u673a\u5411\u6e90\u4e3b\u673a\u53d1\u9001\u4e00\u4e2a\u7279\u6b8a\u91cd\u7f6e\u62a5\u6587RST \u5f53\u6536\u5230UDP\u5957\u63a5\u5b57\u4e0d\u5339\u914d,\u53d1\u9001ICMP\u6570\u636e\u5305 nmap\u5c31\u662f\u8fd9\u79cd\u65b9\u5f0f\u6765\u626b\u63cf\u7aef\u53e3 \u6536\u5230TCPSYNACK\u62a5\u6587,\u5219\u76ee\u6807\u4e3b\u673a\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528TCP\u5728\u8be5\u7aef\u53e3\u8fd0\u884c \u6536\u5230TCP RST\u62a5\u6587,\u76ee\u6807\u4e3b\u673a\u8be5\u7aef\u53e3\u6ca1\u6709\u8fd0\u884cTCP\u7a0b\u5e8f,\u4f46\u662f\u6ca1\u6709\u9632\u706b\u5899\u7b49\u963b\u6321 \u4ec0\u4e48\u4e5f\u6ca1\u6536\u5230,\u8bc1\u660e\u88ab\u9632\u706b\u5899\u7b49\u963b\u6321","title":"TCP\u94fe\u63a5\u7ba1\u7406"},{"location":"CN-Top2down/#_8","text":"","title":"\u62e5\u585e\u63a7\u5236\u539f\u7406"},{"location":"CN-Top2down/#_9","text":"\u5206\u7ec4\u7684\u5230\u8fbe\u901f\u7387\u63a5\u8fd1\u94fe\u8def\u5bb9\u91cf\uff0c\u5206\u7ec4\u7ecf\u5386\u5de8\u5927\u7684\u6392\u961f\u65f6\u5ef6 \u53d1\u9001\u65b9\u5fc5\u987b\u91cd\u53d1\u6765\u8865\u507f\u56e0\u4e3a\u7f13\u5b58\u6ea2\u51fa\u800c\u4e22\u5f03\u7684\u5206\u7ec4 \u53d1\u9001\u65b9\u56e0\u4e3a\u9047\u5230\u5927\u65f6\u5ef6\u6240\u8fdb\u884c\u7684\u4e0d\u5fc5\u8981\u91cd\u4f20\u4f1a\u5f15\u8d77\u8def\u7531\u5668\u4f7f\u7528\u5176\u6709\u9650\u94fe\u8def\u5e26\u5bbd\u6765\u8f6c\u53d1\u4e0d\u5fc5\u8981\u7684\u5206\u7ec4 \u7ade\u4e89\u8def\u7531\u5668R\u4e0a\u7684\u4f18\u5148\u7f13\u5b58\u7a7a\u95f4,\u5f53\u8f7d\u8377\u8fc7\u5927\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4A-C\u7aef\u541e\u5410\u91cf\u8d8b\u8fd1\u4e8e0 \u4e00\u4e2a\u5206\u7ec4\u5728\u4e00\u6761\u8def\u5f84\u88ab\u4e22\u5f03\u65f6,\u6bcf\u4e2a\u4e0a\u6e38\u8def\u7531\u5668\u7528\u4e8e\u8f6c\u53d1\u8be5\u5206\u7ec4\u7684\u4f20\u8f93\u5bb9\u91cf\u90fd\u88ab\u6d6a\u8d39\u6389\u4e86","title":"\u62e5\u585e\u539f\u56e0\u548c\u4ee3\u4ef7"},{"location":"CN-Top2down/#_10","text":"\u7aef\u5230\u7aef\u62e5\u585e\u63a7\u5236,\u7f51\u7edc\u5c42\u6ca1\u6709\u4e3a\u8fd0\u8f93\u5c42\u63d0\u4f9b\u663e\u5f0f\u652f\u6301 \u7f51\u7edc\u8f85\u52a9\u7684\u62e5\u585e\u63a7\u5236,\u8def\u7531\u5668\u5411\u53d1\u9001\u65b9\u63d0\u4f9b\u5173\u4e8e\u7f51\u7edc\u4e2d\u62e5\u585e\u72b6\u6001\u7684\u663e\u5f0f\u53cd\u9988\u4fe1\u606f \u963b\u585e\u5206\u7ec4 \u8def\u7531\u5668\u6807\u8bb0\u6216\u66f4\u65b0\u4ece\u53d1\u9001\u65b9\u5411\u63a5\u6536\u65b9\u7684\u5206\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5b57\u6bb5,\u63a5\u6536\u65b9\u63a5\u6536\u540e\u4f1a\u5411\u53d1\u9001\u65b9\u901a\u77e5\u8be5\u7f51\u7edc\u62e5\u585e\u6307\u793a(\u8be5\u65b9\u6cd5\u81f3\u5c11\u9700\u8981\u4e00\u4e2aRTT)","title":"\u62e5\u585e\u63a7\u5236\u65b9\u6cd5"},{"location":"CN-Top2down/#tcp_3","text":"","title":"TCP\u62e5\u585e\u63a7\u5236"},{"location":"CN-Top2down/#tcp_4","text":"Tcp\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u662f\u8ba9\u6bcf\u4e00\u4e2a\u53d1\u9001\u65b9\u90fd\u80fd\u611f\u53d7\u5230\u7f51\u7edc\u62e5\u585e\u7a0b\u5ea6\u6765\u9650\u5236\u5176\u80fd\u5411\u94fe\u63a5\u53d1\u9001\u6d41\u91cf\u7684\u901f\u7387 \u600e\u4e48\u611f\u77e5\u62e5\u585e\u7a0b\u5ea6? \u5982\u4f55\u9650\u5236? \u91c7\u7528\u4ec0\u4e48\u7b97\u6cd5\u6765\u6539\u53d8\u901f\u7387? \u8fd0\u884c\u5728TCP\u53d1\u9001\u7aef\u62e5\u585e\u63a7\u5236\u673a\u5236\u8ddf\u8e2a\u4e00\u4e2a\u989d\u5916\u53d8\u91cf,\u62e5\u585e\u7a97\u53e3 cwnd LastByteSent - LastByteRead <= min{cwnd,rwnd} \u901a\u8fc7\u8c03\u8282cwnd\u7684\u503c\u6765\u8c03\u6574\u53d1\u9001\u65b9\u5411\u94fe\u63a5\u53d1\u9001\u6570\u636e\u7684\u901f\u7387 \u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u4ee3\u8868\u7740\u62e5\u585e: \u8d85\u65f6 \u6536\u5230\u4e09\u4e2a\u5197\u4f59ACK TCP\u901a\u8fc7\u786e\u8ba4\u6765\u589e\u5927\u62e5\u585e\u7a97\u53e3\u957f\u5ea6,TCP\u88ab\u79f0\u4e3a \u81ea\u8ba1\u65f6 TCP\u62e5\u585e\u63a7\u5236\u7b97\u6cd5:\u6162\u542f\u52a8,\u62e5\u585e\u907f\u514d,\u5feb\u901f\u6062\u590d \u6162\u542f\u52a8 cwnd\u4ee5\u4e00\u4e2aMSS\u5f00\u59cb\u542f\u52a8,\u6bcf\u6b21\u88ab\u786e\u8ba4\u7684\u65f6\u5019 cwnd\u52a0\u500d \u9047\u5230 \u8d85\u65f6 ,cwnd\u88ab\u8bbe\u7f6e\u4e3a1\u4e2aMSS,\u91cd\u542f\u6162\u542f\u52a8\u8fc7\u7a0b.\u6162\u542f\u52a8\u9608\u503cssthresh\u88ab\u8bbe\u7f6e\u4e3acwnd/2 \u5230\u8fbe\u6216\u8d85\u8fc7\u9608\u503cssthresh\u7684\u65f6\u5019,TCP\u7ed3\u675f\u6162\u542f\u52a8\u8fdb\u5165 \u62e5\u585e\u907f\u514d\u6a21\u5f0f \u9047\u5230 3\u4e2a\u5197\u4f59ACK ,TCP\u6267\u884c\u5feb\u901f\u91cd\u4f20,\u5e76\u8fdb\u5165 \u5feb\u901f\u6062\u590d\u72b6\u6001 \u4e00\u822c\u91cd\u4f20\u53ea\u6709\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u624d\u4f1a\u91cd\u4f20 \u5feb\u901f\u91cd\u4f20\u5219\u662f\u4e0d\u9700\u8981\u7b49\u5f85\u5b9a\u65f6\u5668\u8fc7\u671f,\u76f4\u63a5\u91cd\u4f20\u4e22\u5931\u7684\u62a5\u6587\u6bb5 \u62e5\u585e\u907f\u514d \u6bcf\u4e2aRTT,cwnd\u589e\u52a0\u4e00\u4e2aMSS \u9047\u5230 \u8d85\u65f6 ,\u4e0e\u6162\u542f\u52a8\u4e00\u6837,cwnd\u88ab\u8bbe\u7f6e\u4e3a1MSS,ssthresh\u88ab\u8bbe\u7f6e\u4e3acwnd/2 \u9047\u5230 3\u4e2a\u5197\u4f59ACK ,cwnd \u51cf\u534a (\u5df2\u6536\u5230\u76843\u4e2a\u5197\u4f59ACK,\u4e5f\u9700\u8981\u52a03\u4e2aMSS),ssthresh\u8bbe\u7f6e\u4e3acwnd/2,\u8fdb\u5165 \u5feb\u901f\u6062\u590d\u72b6\u6001 \u5feb\u901f\u6062\u590d \u5728\u5feb\u901f\u6062\u590d\u4e2d,\u5bf9\u4e8e\u5f15\u8d77TCP\u8fdb\u5165\u5feb\u901f\u6062\u590d\u72b6\u6001\u7684\u7f3a\u5931\u62a5\u6587\u6bb5,\u6bcf\u5f53\u6536\u5230\u5197\u4f59ACK,cwnd\u5c31\u589e\u52a0\u4e00\u4e2aMSS.\u6700\u7ec8\u5f53\u5bf9\u4e22\u5931\u62a5\u6587\u7684\u4e00\u4e2aACK\u5230\u8fbe\u65f6,TCP\u964d\u4f4ecwnd\u540e\u8fdb\u5165\u62e5\u585e\u907f\u514d\u72b6\u6001. \u9047\u5230 \u8d85\u65f6 ,\u4e0e\u6162\u542f\u52a8\u548c\u62e5\u585e\u907f\u514d\u4e00\u6837,\u6267\u884c\u76f8\u540c\u64cd\u4f5c,\u5e76\u8fdb\u5165 \u6162\u542f\u52a8\u72b6\u6001 #### \u7f51\u7edc\u8f85\u52a9\u7684\u62e5\u585e\u63a7\u5236 \u660e\u786e\u62e5\u585e\u901a\u544a(ECN) ECN\u660e\u786e\u6d89\u53caTCP\u548cIP,\u6709\u4e24\u4e2a\u6bd4\u7279\u7528\u4e8eECN,\u8fd9\u4e24\u4e2a\u6bd4\u7279\u4f4d\u4e8e IP\u6570\u636e\u62a5 \u7684\u670d\u52a1\u7c7b\u578b\u5b57\u6bb5\u4e2d \u5f53 \u63a5\u6536\u65b9 \u6536\u5230\u7684\u6570\u636e\u5305\u4e2d\u5305\u542b\u7f51\u7edc\u5c42\u8bbe\u7f6e\u7684ECN\u4fe1\u53f7\u65f6,\u5728\u8fd4\u56deTCP ACK\u62a5\u6587\u6bb5\u7684ECE\u6bd4\u7279\u7f6e\u4f4d,\u53d1\u9001\u65b9\u6536\u5230TCP ACK\u4e4b\u540e\u4f1a\u5bf9ECE\u6307\u793a\u505a\u51fa\u53cd\u5e94,\u5e76\u5728\u4e0b\u4e00\u4e2a\u53d1\u9001\u7684\u62a5\u6587\u6bb5\u4e2d\u5bf9 CWR(\u62e5\u585e\u7a97\u53e3\u7f29\u51cf) \u6bd4\u7279\u8fdb\u884c\u7f6e\u4f4d \u9664\u4e86TCP\u4ee5\u5916\u7684\u8fd0\u8f93\u5c42\u534f\u8bae\u4e5f\u53ef\u4ee5\u5229\u7528\u7f51\u7edc\u5c42\u53d1\u9001ECN\u4fe1\u53f7","title":"\u7ecf\u5178TCP\u62e5\u585e\u63a7\u5236"},{"location":"CN-Top2down/#_11","text":"UDP\u6d41\u91cf\u4f1a\u538b\u5236TCP\u7684\u6d41\u91cf\u4f20\u9001 \u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u540c\u65f6\u5f00\u542f\u591a\u4e2a\u5e76\u884cTCP\u94fe\u63a5,\u4e5f\u4f1a\u5360\u7528\u5927\u91cf\u5e26\u5bbd.","title":"\u516c\u5e73\u6027"},{"location":"CN-Top2down/#_12","text":"\u5f85\u8865\u5145...","title":"\u8fd0\u8f93\u5c42\u529f\u80fd\u6f14\u5316"},{"location":"CN-Top2down/#_13","text":"\u7f51\u7edc\u5c42\u4e2d\u7684\u6bcf\u4e00\u53f0\u4e3b\u673a\u548c\u8def\u7531\u5668\u90fd\u6709\u4e00\u4e2a\u7f51\u7edc\u5c42\u7684\u90e8\u5206\uff0c\u7f51\u7edc\u5c42\u53ef\u4ee5\u88ab\u5206\u89e3\u4e3a\u4e24\u4e2a\u76f8\u4e92\u4f5c\u7528\u7684\u90e8\u5206\uff1a \u6570\u636e\u5e73\u9762 \u548c \u63a7\u5236\u5e73\u9762 \u6570\u636e\u5e73\u9762\u4e3b\u8981\u662f\u7f51\u7edc\u4e2d\u6bcf\u53f0\u8def\u7531\u5668\u7684\u529f\u80fd\uff0c\u8be5\u6570\u636e\u5e73\u9762\u529f\u80fd\u51b3\u5b9a\u5230\u8fbe\u8def\u7531\u5668\u8f93\u5165\u94fe\u8def\u4e4b\u4e00\u7684\u6570\u636e\u5305\u5982\u4f55 \u8f6c\u53d1 \u5230\u8f93\u51fa\u94fe\u8def \u4e4b\u4e00 \u76ee\u524d\u7684\u8f6c\u53d1\u4e3b\u8981\u5305\u62ec \u57fa\u4e8e\u6570\u636e\u62a5\u76ee\u7684\u5730\u5740\u7684\u8f6c\u53d1 \u4ee5\u53ca \u901a\u7528\u8f6c\u53d1\uff08\u57fa\u4e8e\u6570\u636e\u62a5\u9996\u90e8\u4e0d\u540c\u51e0\u4e2a\u57df\u7684\u503c\u6267\u884c\u8f6c\u53d1\u548c\u5176\u4ed6\u529f\u80fd\uff09","title":"\u7f51\u7edc\u5c42\uff1a\u6570\u636e\u5e73\u9762"},{"location":"CN-Top2down/#_14","text":"\u6570\u636e\u5e73\u9762\u4e3b\u8981\u4f5c\u7528\u662f\u4ece\u5176\u8f93\u5165\u94fe\u8def\u5411\u5176\u8f93\u51fa\u94fe\u8def\u8f6c\u53d1\u6570\u636e\u62a5 \u63a7\u5236\u5e73\u9762\u4e3b\u8981\u4f5c\u7528\u662f\u534f\u8c03\u8fd9\u4e9b\u6bcf\u672c\u5730\u8def\u7531\u5668\u7684\u8f6c\u53d1\u64cd\u4f5c\uff0c\u4f7f\u6570\u636e\u62a5\u6cbf\u7740\u6e90\u548c\u76ee\u7684\u4e3b\u673a\u4e4b\u95f4\u7684\u8def\u7531\u5668\u8def\u5f84\u6700\u7ec8\u8fdb\u884c\u7aef\u5230\u7aef\u4f20\u9001 \u8def\u7531\u5668\u4e0d\u8fd0\u884c \u5e94\u7528\u5c42 \u548c \u8fd0\u8f93\u5c42 \u534f\u8bae","title":"\u7f51\u7edc\u5c42\u6982\u8ff0"},{"location":"CN-Top2down/#_15","text":"\u8f6c\u53d1\uff1a\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u8def\u7531\u5668\u7684\u8f93\u5165\u7aef\u53e3\u65f6\uff0c\u8def\u7531\u5668\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u8f93\u51fa\u7aef\u53e3\u5c06\u5176\u8f6c\u53d1\u51fa\u53bb\uff0c\u8f6c\u53d1\u662f\u5728 \u6570\u636e\u5e73\u9762\u552f\u4e00\u5b9e\u73b0 \u7684\u529f\u80fd \u8def\u7531\u9009\u62e9\uff1a\u5206\u7ec4\u4ece\u53d1\u9001\u65b9\u6d41\u5411\u63a5\u6536\u65b9\uff0c\u7f51\u7edc\u5c42\u5fc5\u987b\u51b3\u5b9a\u8fd9\u4e9b\u5206\u7ec4\u6240\u9009\u62e9\u7684\u8def\u5f84\u6216\u8def\u7531\uff0c\u8ba1\u7b97\u8fd9\u4e9b\u8def\u5f84\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a \u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u8f6c\u53d1\u901a\u5e38\u7531 \u786c\u4ef6 \u5b9e\u73b0\uff0c\u662f\u8def\u7531\u5668\u672c\u5730\u64cd\u4f5c \u8def\u7531\u9009\u62e9\u901a\u5e38\u7531 \u8f6f\u4ef6 \u5b9e\u73b0\uff0c\u662f\u7f51\u7edc\u8303\u56f4\u5904\u7406\u8fc7\u7a0b \u8f6c\u53d1 \u6bcf\u53f0\u8def\u7531\u5668\u90fd\u5177\u6709 \u8f6c\u53d1\u8868 \uff0c\u8def\u7531\u5668\u68c0\u67e5\u5230\u8fbe\u5206\u7ec4\u9996\u90e8\u7684 \u4e00\u4e2a\u6216\u591a\u4e2a \u5b57\u6bb5\u6765\u5728\u5176\u8f6c\u53d1\u8868\u4e2d\u8fdb\u884c\u7d22\u5f15\u67e5\u627e \u8f93\u51fa\u94fe\u8def\u63a5\u53e3 \u8def\u7531\u9009\u62e9\u7b97\u6cd5\u51b3\u5b9a\u8f6c\u53d1\u8868\u7684\u503c \u4f20\u7edf\u65b9\u6cd5\uff1a\u6bcf\u53f0\u8def\u7531\u5668\u90fd\u6709\u4e00\u4e2a\u4e0e\u5176\u4ed6\u8def\u7531\u5668\u8fdb\u884c\u8def\u7531\u9009\u62e9\u901a\u4fe1\u7684\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\uff0c\u901a\u8fc7\u8def\u7531\u9009\u62e9\u534f\u8bae\u4ea4\u6362\u5305\u542b\u8def\u7531\u9009\u62e9\u4fe1\u606f\u7684\u8def\u7531\u9009\u62e9\u62a5\u6587 SDN\u65b9\u6cd5\uff1a\u8fdc\u7a0b\u63a7\u5236\u5668\u8fdb\u884c\u8ba1\u7b97\u3001\u5206\u53d1\u8def\u7531\u8868\uff0c\u672c\u5730\u8def\u7531\u5668\u53ea\u8d1f\u8d23\u8f6c\u53d1\u3002\u8def\u7531\u5668\u548c\u8fdc\u7a0b\u63a7\u5236\u5668\u901a\u8fc7\u4ea4\u6362\u5305\u542b\u8f6c\u53d1\u8868\u548c\u5176\u4ed6\u8def\u7531\u9009\u62e9\u4fe1\u606f\u7684\u62a5\u6587 \u56e0\u7279\u7f51\u7684\u7f51\u7edc\u5c42\u53ea\u63d0\u4f9b\u4e86 \u5c3d\u529b\u800c\u4e3a \u670d\u52a1 \u8def\u7531\u5668\u548c\u4ea4\u6362\u673a\u90fd\u5c5e\u4e8e\u5206\u7ec4\u4ea4\u6362\u673a","title":"\u8f6c\u53d1\u548c\u8def\u7531"},{"location":"CN-Top2down/#_16","text":"\u8def\u7531\u5668\u57fa\u672c\u7ec4\u4ef6\u5305\u542b\uff1a \u8f93\u5165\u7aef\u53e3\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u4e0e\u6570\u636e\u94fe\u8def\u5c42\u8fdb\u884c\u4ea4\u4e92 \u6267\u884c\u67e5\u627e\u529f\u80fd\uff1a\u901a\u8fc7\u67e5\u8be2\u8f6c\u53d1\u8868\u51b3\u5b9a\u8def\u7531\u5668\u7684\u8f93\u51fa\u7aef\u53e3 \u5230\u8fbe\u7684\u5206\u7ec4\u7ecf\u8fc7\u4ea4\u6362\u7ed3\u6784\u53d1\u9001\u5230\u8f93\u51fa\u7aef\u53e3\uff0c\u63a7\u5236\u5206\u7ec4\u4ece\u8f93\u5165\u7aef\u53e3\u8f6c\u53d1\u5230\u8def\u7531\u9009\u62e9\u5904\u7406\u5668 \u8f93\u51fa\u7aef\u53e3\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u5b58\u50a8\u4ece \u4ea4\u6362\u7ed3\u6784 \u63a5\u53d7\u7684\u5206\u7ec4\u5e76\u6267\u884c\u5fc5\u8981\u7684\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\u529f\u80fd\u5728\u8f93\u51fa\u94fe\u8def\u4e0a\u4f20\u8f93\u8fd9\u4e9b\u5206\u7ec4 \u4ea4\u6362\u7ed3\u6784\uff08\u786c\u4ef6\u5b9e\u73b0\uff09 \u5c06\u8f93\u5165\u7aef\u53e3\u8fde\u63a5\u5230\u8f93\u51fa\u7aef\u53e3 \u8def\u7531\u9009\u62e9\u5904\u7406\u5668\uff08CPU\uff09 \u6267\u884c\u63a7\u5236\u5e73\u9762\u7684\u529f\u80fd \u4f20\u7edf\u8def\u7531\u5668\u4e2d\uff1a\u6267\u884c\u8def\u7531\u9009\u62e9\u534f\u8bae\uff0c\u7ef4\u62a4\u8def\u7531\u9009\u62e9\u8868\u548c\u76f8\u5173\u94fe\u8def\u72b6\u6001\u4fe1\u606f\uff0c\u4e3a\u8def\u7531\u5668\u8ba1\u7b97\u8f6c\u53d1\u8868 SDN\u8def\u7531\u5668\u4e2d\uff1a\u8d1f\u8d23\u4e0e\u8fdc\u7a0b\u63a7\u5236\u5668\u901a\u4fe1\uff0c\u63a5\u53d7\u8fdc\u7a0b\u63a7\u5236\u5668\u8ba1\u7b97\u7684\u8f6c\u53d1\u8868\u9879\uff0c\u5e76\u5728\u8def\u7531\u5668\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\u5b89\u88c5\u8fd9\u4e9b\u8868\u9879 \u8f93\u5165\u7aef\u53e3\u7684\u5904\u7406 \u8f93\u5165\u7aef\u53e3\u6267\u884c\u67e5\u627e\u8f6c\u53d1\u8868\u529f\u80fd\u6765\u51b3\u5b9a\u8f93\u51fa\u7aef\u53e3 \u8f6c\u53d1\u8868\u662f\u7531\u8def\u7531\u9009\u62e9\u5904\u7406\u5668\u8ba1\u7b97\u548c\u66f4\u65b0\u5f97\u51fa\u7684 \u8f6c\u53d1\u8868\u662f\u7531\u9009\u62e9\u5904\u7406\u5668\u7ecf\u8fc7\u72ec\u7acb\u603b\u7ebf\u590d\u5236\u5230\u7ebf\u8def\u5361 \u8f6c\u53d1\u51b3\u7b56\u80fd\u5728\u6bcf\u4e2a\u8f93\u5165\u7aef\u53e3\u672c\u5730\u505a\uff0c\u800c\u65e0\u9700\u57fa\u4e8e\u6bcf\u4e2a\u5206\u7ec4\u8c03\u7528\u96c6\u4e2d\u5f0f\u8def\u7531\u9009\u62e9\u5904\u7406\u5668 \u57fa\u4e8e\u76ee\u7684\u8f6c\u53d1 \u6700\u957f\u524d\u7f00\u5339\u914d \u5b58\u5728\u9ed8\u8ba4\u8f6c\u53d1\u94fe\u8def\u63a5\u53e3 \u53ef\u80fd\u5206\u7ec4\u88ab\u963b\u585e\u6392\u961f\u5728\u8f93\u5165\u7aef\u53e3 \u4ea4\u6362 \u7ecf\u5185\u5b58\u4ea4\u6362 \u5728CPU\u64cd\u4f5c\u4e0b\uff0c\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u4ea4\u6362 \u7ecf\u603b\u7ebf\u4ea4\u6362 \u901a\u8fc7\u5171\u4eab\u603b\u7ebf\u4ea4\u6362\uff0c\u8f93\u5165\u7aef\u53e3\u4e3a\u5206\u7ec4\u52a0\u4e0a\u4ea4\u6362\u673a\u5185\u90e8\u6807\u7b7e\u7136\u540e\u53d1\u9001\u7ed9\u6240\u6709\u7684\u8f93\u51fa\u7aef\u53e3\uff0c\u8f93\u51fa\u7aef\u53e3\u4f1a\u8fdb\u884c\u5339\u914d \u7ecf\u4e92\u8054\u7f51\u7edc\u4ea4\u6362 \u901a\u8fc72N\u6761\u603b\u7ebf\u6765\u7ec4\u6210\u4e92\u8054\u7f51\u7edc\uff0c\u94fe\u63a5N\u4e2a\u8f93\u5165\u7aef\u53e3\u548cN\u4e2a\u8f93\u51fa\u7aef\u53e3 \u8f93\u51fa\u7aef\u53e3 \u53d6\u51fa\u5b58\u653e\u5728\u8f93\u51fa\u7aef\u53e3\u5185\u5b58\u4e2d\u7684\u5206\u7ec4\u5e76\u5c06\u5176\u53d1\u9001\u5230\u8f93\u51fa\u94fe\u8def\u4e2d \u6392\u961f \u8f93\u5165\u6392\u961f \u4ea4\u6362\u673a\u901f\u5ea6\u6ca1\u6709\u8fbe\u5230\u8ba9\u6240\u6709\u5206\u7ec4\u65e0\u65f6\u5ef6\u7684\u4ea4\u6362 \u8f93\u51fa\u6392\u961f \u5f03\u5c3e\uff1a\u4e22\u5f03\u521a\u5230\u8fbe\u7684\u5206\u7ec4\u6216\u8005\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u5df2\u6392\u961f\u7684\u5206\u7ec4 \u5728\u7f13\u5b58\u586b\u6ee1\u524d\u4e22\u5f03\u4e00\u4e2a\u5206\u7ec4\u6216\u8005\u5728\u9996\u90e8\u52a0\u4e0a\u6807\u8bb0\u6765\u5411\u53d1\u9001\u65b9\u63d0\u4f9b\u4e00\u4e2a\u62e5\u585e\u4fe1\u53f7 \u541e\u5410\u91cf\u548c\u6700\u5c0f\u7684\u65f6\u5ef6\u90fd\u5f88\u91cd\u8981 \u5206\u7ec4\u8c03\u5ea6 \u5148\u8fdb\u5148\u51fa \u4f18\u5148\u6743\u6392\u961f \u5faa\u73af\u6392\u961f\uff1a\u6309\u7167\u7c7b\u522b\u8fdb\u884c\u4f20\u8f93 \u52a0\u6743\u516c\u5e73\u6392\u961f\uff1a\u6839\u636e\u6bcf\u4e2a\u7c7b\u522b\u7b49\u5f85\u7684\u5206\u7ec4\u6570\u91cf\u6765\u8ba1\u7b97\u6743\u91cd","title":"\u8def\u7531\u5668\u5de5\u4f5c\u539f\u7406"},{"location":"CN-Top2down/#ipv4","text":"","title":"IPv4\u6570\u636e\u62a5\u548c\u5bfb\u5740"},{"location":"CN-Top2down/#ipv4_1","text":"IPv4\u6570\u636e\u62a5\u683c\u5f0f \u7248\u672c\u53f7\uff1a4bit\uff0c\u89c4\u5b9a\u4e86\u6570\u636e\u62a5\u7684IP\u534f\u8bae\u7248\u672c \u9996\u90e8\u957f\u5ea6\uff1a4bit\uff0cIPv4\u6570\u636e\u62a5\u5305\u542b\u4e00\u4e9b\u53ef\u53d8\u6570\u91cf\u7684\u9009\u9879\uff0c\u901a\u8fc7\u8be5\u5b57\u6bb5\u6765\u786e\u5b9a\u8fd0\u8f93\u5c42\u62a5\u6587\u6bb5\u5b9e\u9645\u5f00\u59cb\u7684\u5730\u65b9\uff0c\u4e00\u822c\u5177\u6709 20\u5b57\u8282 \u7684\u9996\u90e8 \u670d\u52a1\u7c7b\u578b\uff1a8bit\uff0c\u533a\u5206\u5f00\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u62a5\uff1a\u5b9e\u65f6\u6570\u636e\u62a5\u3001\u975e\u5b9e\u65f6\u6570\u636e\u62a5\u7b49 \u6570\u636e\u62a5\u957f\u5ea6\uff1a16bit\uff0cIP\u6570\u636e\u62a5\u603b\u957f\u5ea6\uff08\u9996\u90e8+\u8f7d\u8377\uff09\uff0cIP\u6570\u636e\u62a5\u7406\u8bba\u6700\u5927\u957f\u5ea6\u4e3a65535\u5b57\u8282 \u6807\u8bc6\u3001\u6807\u5fd7\u3001\u7247\u504f\u79fb\uff1a\u8fd9\u4e09\u4e2a\u5b57\u6bb5\u4e0eIP\u5206\u7247\u6709\u5173\uff08IPv6\u5c31\u53d6\u6d88\u4e86\uff09\uff0c\u4e00\u4e2a\u5927\u7684IP\u6570\u636e\u62a5\u88ab\u5206\u4e3a\u51e0\u4e2a\u5c0f\u7684IP\u6570\u636e\u62a5\u7136\u540e\u88ab\u53d1\u9001\u5230\u76ee\u7684\u4e3b\u673a\u8fdb\u884c\u91cd\u65b0\u7ec4\u88c5 \u5bff\u547d\uff1aTTL\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u53f0\u8def\u7531\u5668\uff0cTTL-1\uff0cTTL\u4e3a0\u4e22\u5f03\u8be5\u6570\u636e\u5305 \u534f\u8bae\uff1a\u6307\u660e\u4e86\u8be5IP\u6570\u636e\u62a5\u4ea4\u7ed9\u54ea\u4e00\u4e2a\u4e0a\u5c42\u8fd0\u8f93\u5c42\u534f\u8bae \u534f\u8bae\u53f7\u5c06\u7f51\u7edc\u5c42\u548c\u8fd0\u8f93\u5c42\u7ed1\u5b9a\u5728\u4e00\u8d77 \u7aef\u53e3\u53f7\u5c06\u8fd0\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u7ed1\u5b9a\u5230\u4e00\u8d77 \u9996\u90e8\u6821\u9a8c\u548c\uff1a16bit \u7528\u4e8e\u5e2e\u52a9\u8def\u7531\u5668\u68c0\u6d4b\u6536\u5230\u7684IP\u6570\u636e\u62a5\u4e2d\u7684\u6bd4\u7279\u9519\u8bef \u6839\u636e\u9996\u90e8\u4e2d\u7684\u5b57\u6bb5\u503c\u6765\u8fdb\u884c\u8ba1\u7b97\u7684\uff0c \u6bcf\u53f0\u8def\u7531\u5668\u90fd\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff0c\u56e0\u4e3aTLL\u5b57\u6bb5\u4ee5\u53ca\u53ef\u80fd\u7684\u9009\u9879\u5b57\u6bb5\u4f1a\u6539\u53d8 \u91cd\u590d\u68c0\u6d4b\u662f\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\u7684 \u534f\u8bae\u642d\u914d \u6e90\u548c\u76ee\u7684IP\u5730\u5740\uff1a\u90fd\u662f32bit \u9009\u9879\uff1a\u9009\u9879\u5b57\u6bb5\u5141\u8bb8IP\u9996\u90e8\u88ab\u6269\u5c55 \u6570\u636e\uff08\u6709\u6548\u8f7d\u8377\uff09\uff1a\u9001\u5f80\u8fd0\u8f93\u5c42\u7684\u62a5\u6587\u6bb5\uff08TCP/UDP,\u4e5f\u53ef\u4ee5\u662fICMP\uff09 IPv4\u7f16\u5740 \u6bcf\u4e2a\u63a5\u53e3 \u90fd\u5177\u6709IP\u5730\u5740 \u8def\u7531\u5668\u5177\u6709\u591a\u4e2a\u63a5\u53e3 \u6bcf\u53f0\u4e3b\u673a\u548c\u6bcf\u4e2a\u8def\u7531\u5668\u63a5\u53e3\u90fd\u5177\u6709\u5404\u81ea\u7684IP\u5730\u5740 \u6bcf\u4e2aIPv4\u5730\u5740\u957f\u5ea6\u4e3a32bit\uff084\u5b57\u8282\uff09 IP\u5730\u5740\u9700\u8981\u7531\u5176\u94fe\u63a5\u7684\u5b50\u7f51\u6765\u51b3\u5b9a \u5b50\u7f51\u63a9\u7801 \u4e09\u4e2a\u4e3b\u673a\u63a5\u53e3\u548c\u4e00\u4e2a\u8def\u7531\u5668\u63a5\u53e3\u5f62\u6210\u4e86\u4e00\u4e2a\u5b50\u7f51 \u65e0\u7c7b\u522b\u57df\u95f4\u8def\u7531\u9009\u62e9\uff08CIDR\u7f16\u5740\uff09\uff0ca.b.c.d/x x\u9ad8\u6bd4\u7279\u6784\u6210\u4e86IP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206 \u8def\u7531\u805a\u5408 32-x\u6bd4\u7279\u88ab\u7528\u4e8e\u533a\u5206\u7ec4\u7ec7\u5185\u90e8\u8bbe\u5907 \u5206\u7c7b\u7f16\u5236 IP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206\u88ab\u9650\u5236\u4e3a8\u300116\u300124\u6bd4\u7279\uff0c\u5206\u522b\u4ee3\u8868A\u3001B\u548cC\u7f51\u7edc 255.255.255.255\u4e3aIP\u5e7f\u64ad\u5730\u5740\uff0c0.0.0.0\u4e3a\u81ea\u8eab\u7684IP\u5730\u5740\uff0c\u7528\u4e8e\u5728\u4e00\u4e9b\u7279\u6b8a\u573a\u5408","title":"IPv4"},{"location":"CN-Top2down/#dhcp","text":"DHCP\u5141\u8bb8\u4e3b\u673a\u81ea\u52a8\u83b7\u53d6\u4e00\u4e2aIP\u5730\u5740\uff08\u53ef\u4ee5\u914d\u7f6e\u4e3a\u76f8\u540cIP\u5730\u5740\u6216\u8005\u4e34\u65f6IP\u5730\u5740\uff09 DHCP\u8fd8\u5f97\u77e5\u5176\u4f59\u4fe1\u606f\uff0c\u5b50\u7f51\u63a9\u7801\uff0c\u7b2c\u4e00\u8df3\u8def\u7531\u5730\u5740\uff08\u7f51\u5173\uff09\uff0c\u672c\u5730DNS\u670d\u52a1\u5668\u5730\u5740\u7b49 \u5ba2\u6237-\u670d\u52a1\u5668\u534f\u8bae\uff1a\u5ba2\u6237\u901a\u5e38\u662f\u65b0\u5230\u8fbe\u7684\u4e3b\u673a\uff0c\u9700\u8981\u83b7\u5f97\u5305\u62ec\u81ea\u8eabIP\u5730\u5740\u7b49\u4fe1\u606f \u7406\u60f3\u60c5\u51b5\u4e0b\u6bcf\u4e2a\u5b50\u7f51\u5177\u6709\u4e00\u53f0DHCP\u670d\u52a1\u5668\u6216\u8005DHCP\u4e2d\u7ee7\u4ee3\u7406\uff0c\u8be5\u4ee3\u7406\u77e5\u9053\u8be5\u7f51\u7edcDHCP\u670d\u52a1\u5668\u7684\u5730\u5740 DCHP\u5ba2\u6237\u548c\u670d\u52a1\u5668\u4ea4\u4e92 DHCP\u670d\u52a1\u5668\u53d1\u73b0\uff1a\u5ba2\u6237\u673a\u53d1\u9001 DHCP\u53d1\u73b0\u62a5\u6587 \uff0cUDP\uff0c\u7aef\u53e3\u53f767\uff0c\u5e7f\u64ad\u76ee\u7684\u5730\u5740255.255.255.255\uff0c\u4ee5\u53ca\u201c\u6e90\u4e3b\u673aIP\u201d0.0.0.0 DHCP\u670d\u52a1\u5668\u63d0\u4f9b\uff1a\u670d\u52a1\u5668\u53d1\u9001 DHCP\u63d0\u4f9b\u62a5\u6587 \uff0c\u5e7f\u64ad255.255.255.255\uff0c\u62a5\u6587\u4e2d\u5305\u542b\u63a8\u8350IP\u5730\u5740\u3001\u7f51\u7edc\u63a9\u7801\u3001IP\u5730\u5740\u79df\u7528\u671f\u7b49 DHCP\u8bf7\u6c42\uff1a\u5ba2\u6237\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u5668\u63d0\u4f9b\u4e2d\u9009\u62e9\u4e00\u4e2a\uff0c\u5e76\u5411\u5176\u53d1\u9001 DHCP\u8bf7\u6c42\u62a5\u6587 \u54cd\u5e94\uff0c\u56de\u663e\u914d\u7f6e\u7684\u53c2\u6570 DHCP ACK\uff1a\u670d\u52a1\u5668\u7528 DHCP ACK \u62a5\u6587 \u5bf9DHCP\u8bf7\u6c42\u62a5\u6587\u8fdb\u884c\u54cd\u5e94\uff0c\u8bc1\u5b9e\u53c2\u6570 DHCP\u8fd8\u63d0\u4f9b\u4e86\u673a\u5236\u6765\u5141\u8bb8\u5ba2\u6237\u66f4\u65b0\u5bf9\u4e00\u4e2aIP\u5730\u5740\u7684\u79df\u7528","title":"DHCP\uff08\u52a8\u6001\u4e3b\u673a\u914d\u7f6e\u534f\u8bae\uff09"},{"location":"CN-Top2down/#nat","text":"NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\uff09 NAT\u5bf9\u5916\u754c\u76f8\u5f53\u4e8e\u5177\u6709\u5355\u4e00IP\u5730\u5740\u7684\u5355\u4e00\u8bbe\u5907 NAT\u5bf9\u5916\u754c\u9690\u85cf\u4e86\u5b50\u7f51\u7684\u7ec6\u8282 \u8def\u7531\u5668\u4eceISP\u7684DHCP\u670d\u52a1\u5668\u5f97\u5230NAT\u5730\u5740 NAT\u8def\u7531\u5668\u5177\u6709\u4e00\u5f20NAT\u8f6c\u6362\u8868\uff0c\u8868\u9879\u4e2d\u5305\u542b\u4e86 \u7aef\u53e3\u53f7\u548c\u5176IP\u5730\u5740 \u8def\u7531\u5668\u91cd\u5199\u6570\u636e\u62a5\u7684ip\u5730\u5740\u548c\u7aef\u53e3 \u5411\u5916\u754c\u53d1\u9001 \u6e90IP\u66ff\u6362\u4e3aNAT IP\u5730\u5740 \u6e90\u7aef\u53e3\u66ff\u6362\u4e3aNAT\u4e2d\u7a7a\u4f59\u7aef\u53e3 \u4ece\u5916\u754c\u63a5\u53d7 \u76ee\u7684IP\u6839\u636eNAT\u8f6c\u6362\u8868\u901a\u8fc7\u7aef\u53e3\u6765\u67e5\u8be2 \u66ff\u6362\u76ee\u7684IP NAT\u5c5e\u4e8e\u4e2d\u95f4\u76d2 \u4e2d\u95f4\u76d2\u4e0d\u6267\u884c\u4f20\u7edf\u7684\u6570\u636e\u62a5\u8f6c\u53d1\uff0c\u800c\u662f\u6267\u884c\u8bf8\u5982NAT\u3001\u6d41\u91cf\u8d1f\u8f7d\u5747\u8861\u3001\u6d41\u91cf\u9632\u706b\u5899\u7b49\u529f\u80fd","title":"NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u534f\u8bae\uff09"},{"location":"CN-Top2down/#ipv6","text":"IPv6\u6570\u636e\u62a5\u683c\u5f0f \u6269\u5927\u7684\u5730\u5740\u5bb9\u91cf\uff1a\u753132\u6bd4\u7279\u5347\u4e3a128\u6bd4\u7279\uff0c\u5e76\u5f15\u5165\u4e86\u9664\u5355\u64ad\u548c\u591a\u64ad\u4e4b\u5916\u7684\u4efb\u64ad \u7b80\u5316\u9ad8\u6548\u768440\u5b57\u8282\u9996\u90e8\uff1a\u5b9a\u957f40\u5b57\u8282\u9996\u90e8 \u6d41\u6807\u7b7e\uff1a\u7ed9\u7279\u6b8a\u6d41\u7684\u5206\u7ec4\u52a0\u4e0a\u6807\u7b7e\uff08\u97f3\u9891\u89c6\u9891\u7b49\uff09 IPv6\u6570\u636e\u62a5 \u7248\u672c\uff1aIP\u7248\u672c\u53f7 \u6d41\u91cf\u7c7b\u578b\uff1a\u670d\u52a1\u7c7b\u578b\uff0c\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684IP\u6570\u636e\u62a5 \u6d41\u6807\u7b7e\uff1a20bit\uff0c\u5bf9\u4e00\u6761\u6d41\u4e2d\u7684\u67d0\u4e9b\u6570\u636e\u62a5\u7ed9\u51fa\u4f18\u5148\u7ea7 \u6709\u6548\u8f7d\u8377\u5b57\u6bb5\uff1a40\u5b57\u8282\u9996\u90e8\u5b57\u6bb5\u540e\u7684\u6570\u636e\u8f7d\u8377\u5b57\u8282\u6570\u91cf \u4e0b\u4e00\u4e2a\u9996\u90e8\uff1a\u6807\u8bc6\u6570\u636e\u62a5\u4ea4\u4ed8\u7ed9\u54ea\u4e2a\u534f\u8bae\uff08TCP\u3001UDP\uff09 \u8df3\u9650\u5236\uff1a\u7ea6\u7b49\u4e8eTTL \u6e90\u5730\u5740\u548c\u76ee\u7684\u5730\u5740\uff1a128bit \u6570\u636e\uff1a\u6570\u636e\u8f7d\u8377\u90e8\u5206 \u4eceIPv4\u5230IPv6\u7684\u8fc1\u79fb IPv6\u517c\u5bb9IPv4 IPv4\u7f51\u7edc\u8bbe\u5907\u4e0d\u652f\u6301IPv4 \u89e3\u51b3\u529e\u6cd5\uff1a\u5efa\u96a7\u9053 \u4e24\u4e2aIPv6\u8282\u70b9\u901a\u8fc7IPv4\u7f51\u7edc\u8bbe\u5907\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c06IPv6\u6570\u636e\u62a5\u653e\u5230\u4e00\u4e2aIPv4\u6570\u636e\u62a5\u7684\u8f7d\u8377\u5b57\u6bb5 IPv6\u63a5\u6536\u7aef\u901a\u8fc7\u89c2\u5bdf\u8be5IPv4\u7684\u534f\u8bae\u53f7\u5b57\u6bb541\u6765\u5224\u65ad\u6709\u6548\u8f7d\u8377\u548cIPv6\u6570\u636e\u62a5","title":"IPv6\u6570\u636e\u62a5\u548c\u5bfb\u5740"},{"location":"CN-Top2down/#sdn","text":"\u8f6c\u53d1\u53ef\u4ee5\u6982\u62ec\u4e3a \u5339\u914d\u548c\u64cd\u4f5c \u5728\u6cdb\u5316\u8f6c\u53d1\u4e2d\uff0c\u64cd\u4f5c\u53ef\u4ee5\u5305\u62ec\u8bb8\u591a\u4e0d\u540c\u79cd\u64cd\u4f5c \u6bcf\u53f0\u5206\u7ec4\u4ea4\u6362\u673a\u4e2d\u90fd\u6709\u5339\u914d\u52a0\u64cd\u4f5c\u8868\uff0c\u8be5\u8868\u7531\u8fdc\u7a0b\u63a7\u5236\u5668\u8ba1\u7b97\u3001\u5b89\u88c5\u548c\u66f4\u65b0 O penFlow \u662f\u6cdb\u5316\u8f6c\u53d1\u4e2d\u4e00\u79cd\u534f\u8bae \u5339\u914d\u52a0\u64cd\u4f5c\u8f6c\u53d1\u8868 \u5728OpenFlow\u4e2d\u79f0\u4e3a\u6d41\u8868\uff0c\u6bcf\u4e2a\u8868\u9879\u5305\u62ec \u9996\u90e8\u5b57\u6bb5\u503c\u7684\u96c6\u5408\uff1a\u5165\u5206\u7ec4\u5c06\u4e0e\u4e4b\u5339\u914d\uff0c\u57fa\u4e8e\u786c\u4ef6\u7684\u5339\u914d\u6267\u884c\u6700\u4e3a\u8fc5\u901f\uff0c\u5339\u914d\u4e0d\u4e0a\u7684\u6d41\u8868\u5c06\u4f1a\u88ab\u4e22\u5f03\u6216\u53d1\u9001\u5230\u8fdc\u7a0b\u63a7\u5236\u5668\u505a\u66f4\u591a\u7684\u5904\u7406 \u8ba1\u6570\u5668\u96c6\u5408\uff1a\u5f53\u5206\u7ec4\u4e0e\u6d41\u8868\u9879\u5339\u914d\u65f6\u66f4\u65b0\u8ba1\u6570\u5668 \u64cd\u4f5c\u96c6\u5408\uff1a\u5f53\u5206\u7ec4\u5339\u914d\u6d41\u8868\u9879\u65f6\u6240\u91c7\u53d6\u7684\u64cd\u4f5c\u96c6\u5408 \u5339\u914d OpenFlow 1.0\u6d41\u8868\u5177\u670911\u4e2a\u5206\u7ec4\u9996\u90e8\u5b57\u6bb5\u548c\u5165\u7aef\u53e3ID\uff08\u6700\u8fd1\u5df2\u7ecf\u589e\u52a0\u5230\u4e8641\u4e2a\uff09 OpenFlow\u7684\u5339\u914d\u62bd\u8c61\u5141\u8bb8\u5bf9\u6765\u81ea\u4e09\u4e2a\u5c42\u6b21\u7684\u534f\u8bae\u9996\u90e8\u6240\u9009\u62e9\u7684\u5b57\u6bb5\u8fdb\u884c\u5339\u914d \u5165\u7aef\u53e3\u662f\u6307\u5206\u7ec4\u4ea4\u6362\u673a\u4e0a\u63a5\u53d7\u5206\u7ec4\u7684\u8f93\u5165\u7aef\u53e3 \u6d41\u8868\u9879\u4e5f\u5177\u6709\u901a\u914d\u7b26 \u64cd\u4f5c \u6bcf\u4e2a\u6d41\u8868\u9879\u90fd\u5177\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u5217\u8868 \u8f6c\u53d1 \u4e22\u5f03 \u4fee\u6539\u5b57\u6bb5 ... SDN\u63a7\u5236\u5668\u8ba1\u7b97\u548c\u5206\u53d1\u6d41\u8868\uff0c\u534f\u8bae\u7528\u4e8e\u5728\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u5b83\u7684\u63a7\u5236\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1 \u4e2d\u95f4\u76d2 \"\u5728\u6e90\u4e3b\u673a\u548c\u76ee\u7684\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u8def\u5f84\u4e0a\uff0c\u6267\u884c\u9664\u4e86IP\u8def\u7531\u5668\u7684\u6b63\u5e38\u6807\u51c6\u529f\u80fd\u4e4b\u5916\u7684\u5176\u4ed6\u529f\u80fd\u7684\u4efb\u4f55\u4e2d\u95f4\u7684\u76d2\u5b50\" \u5927\u81f4\u5305\u62ec\u4ee5\u4e0b\u4e09\u79cd NAT\u8f6c\u6362 \u5b89\u5168\u670d\u52a1\uff1a\u9632\u706b\u5899\u57fa\u4e8e\u9996\u90e8\u5b57\u6bb5\u503c\u6216\u91cd\u5b9a\u5411\u5206\u7ec4\u6765\u963b\u585e\u6d41\u91cf\uff0c\u4ece\u800c\u8fdb\u884c\u9644\u52a0\u5904\u7406 \u6027\u80fd\u589e\u5f3a \u200b \u968f\u7740\u4e2d\u95f4\u4ef6\u7684\u589e\u591a\uff0c\u5355\u72ec\u7684\u4e13\u7528\u786c\u4ef6\u3001\u5355\u72ec\u7684\u4e13\u7528\u8f6f\u4ef6\u5806\u6808\u7b49\u90fd\u610f\u5473\u7740\u5de8\u5927\u7684\u6210\u672c\u548c\u6295\u8d44\u8d39\u7528\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u4eba\u5458\u6b63\u5728\u63a2\u7d22\u4f7f\u7528\u5546\u7528\u786c\u4ef6\uff08\u7f51\u7edc\u3001\u8ba1\u7b97\u548c\u670d\u52a1\uff09\uff0c\u5e76\u8bd5\u56fe\u5728\u901a\u7528\u8f6f\u4ef6\u5806\u6808\u4e0a\u6784\u5efa\u4e13\u95e8\u7684\u8f6f\u4ef6\u6765\u5b9e\u73b0\u8fd9\u4e9b\u670d\u52a1\uff0c\u800c\u8fd9\u5c31\u662fSDN\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u7f51\u7edc\u529f\u80fd\u865a\u62df\u5316\uff08NFV\uff09\uff1b\u53e6\u4e00\u79cd\u88ab\u63a2\u7d22\u7684\u65b9\u6cd5\u662f\u628a\u4e2d\u95f4\u76d2\u529f\u80fd\u5916\u5305\u7ed9\u4e91\u3002 IP\u6c99\u6f0f \u7aef\u5230\u7aef\u539f\u5219","title":"\u6cdb\u5316\u8f6c\u53d1\u548cSDN"},{"location":"CN-Top2down/#_17","text":"\u63a7\u5236\u5e73\u9762\u4f5c\u4e3a\u4e00\u79cd\u7f51\u7edc\u8303\u56f4\u7684\u903b\u8f91\uff0c\u4e0d\u4ec5\u63a7\u5236\u6cbf\u7740\u4ece\u6e90\u4e3b\u673a\u5230\u76ee\u7684\u4e3b\u673a\u7684\u7aef\u5230\u7aef\u8def\u5f84\u95f4\u7684\u8def\u7531\u5668\u5982\u4f55\u8f6c\u53d1\u6570\u636e\u62a5\uff0c\u800c\u4e14\u63a7\u5236\u7f51\u7edc\u5c42\u7ec4\u4ef6\u548c\u670d\u52a1\u5982\u4f55\u914d\u7f6e\u548c\u7ba1\u7406","title":"\u7f51\u7edc\u5c42\uff1a\u63a7\u5236\u5e73\u9762"},{"location":"CN-Top2down/#_18","text":"\u8f6c\u53d1\u8868\uff08\u57fa\u4e8e\u76ee\u7684\u5730\u8f6c\u53d1\u7684\u573a\u666f\uff09\u548c\u6d41\u8868\uff08\u6cdb\u5316\u8f6c\u53d1\u7684\u573a\u666f\uff09 \u8ba1\u7b97\u3001\u7ef4\u62a4\u548c\u5b89\u88c5\u6d41\u8868\u4ee5\u53ca\u8f6c\u53d1\u8868 \u6bcf\u8def\u7531\u5668\u63a7\u5236 \u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u4e2a\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\uff0c\u7528\u4e8e\u548c\u5176\u4ed6\u8def\u7531\u5668\u8def\u7531\u9009\u62e9\u7ec4\u4ef6\u901a\u4fe1 \u903b\u8f91\u96c6\u4e2d\u5f0f\u63a7\u5236 \u903b\u8f91\u96c6\u4e2d\u5f0f\u63a7\u5236\u5668\u8ba1\u7b97\u5e76\u5206\u53d1\u8f6c\u53d1\u8868\u4ee5\u4f9b\u6bcf\u53f0\u8def\u7531\u5668\u4f7f\u7528 \u8be5\u63a7\u5236\u5668\u4e0e\u6bcf\u53f0\u8def\u7531\u5668\u4e2d\u7684 \u63a7\u5236\u4ee3\u7406\uff08CA\uff09 \u8fdb\u884c\u4ea4\u4e92\uff0cCA\u4e00\u822c\u53ea\u5177\u6709 \u4e0e\u63a7\u5236\u5668\u901a\u4fe1\u5e76\u6309\u7167\u63a7\u5236\u5668\u547d\u4ee4\u884c\u4e8b \u8fd9\u4e00\u79cd\u529f\u80fd \u4e0e\u6bcf\u8def\u7531\u5668\u63a7\u5236\u4e2d\u7684CA\u4e0d\u540c\uff0c\u8fd9\u4e9bCA\u4e4b\u95f4\u4e0d\u80fd\u76f4\u63a5\u76f8\u4e92\u4ea4\u4e92\uff0c\u4e5f\u4e0d\u80fd\u4e3b\u52a8\u53c2\u4e0e\u8ba1\u7b97\u8f6c\u53d1\u8868","title":"\u6982\u8ff0"},{"location":"CN-Top2down/#_19","text":"\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u76ee\u7684\u662f\u4ece\u53d1\u9001\u65b9\u5230\u63a5\u6536\u65b9\u7684\u8fc7\u7a0b\u4e2d\u786e\u5b9a\u4e00\u6761\u901a\u8fc7\u8def\u7531\u5668\u7f51\u7edc\u7684\u597d\u8def\u5f84\uff08\u6700\u4f4e\u5f00\u9500\u7684\u8def\u5f84\uff09 \u6839\u636e\u96c6\u4e2d\u5f0f\u548c\u975e\u96c6\u4e2d\u5f0f\u6765\u5212\u5206 \u96c6\u4e2d\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u7528\u5b8c\u6574\u7684\u3001\u5168\u5c40\u7684\u7f51\u7edc\u77e5\u8bc6\u8ba1\u7b97\u51fa\u4ece\u6e90\u5230\u76ee\u7684\u5730\u4e4b\u95f4\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u96c6\u4e2d\u5f0f\u7b97\u6cd5\u5177\u6709\u5173\u4e8e\u8fde\u901a\u6027\u548c\u94fe\u8def\u5f00\u9500\u65b9\u9762\u7684\u5b8c\u6574\u4fe1\u606f \u5177\u6709\u5168\u5c40\u72b6\u6001\u4fe1\u606f\u7684\u7b97\u6cd5\u5e38\u88ab\u79f0\u4f5c \u94fe\u8def\u72b6\u6001\uff08LS\uff09\u7b97\u6cd5 \uff0c\u8be5\u7b97\u6cd5\u5fc5\u987b\u77e5\u9053\u7f51\u7edc\u4e2d\u6bcf\u6761\u94fe\u8def\u7684\u5f00\u9500 \u5206\u6563\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5 \u8def\u7531\u5668\u4ee5\u8fed\u4ee3\u3001\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8ba1\u7b97\u6700\u4f4e\u5f00\u9500\u8def\u5f84\uff0c\u6ca1\u6709\u8282\u70b9\u62e5\u6709\u5173\u4e8e\u6240\u6709\u7f51\u7edc\u94fe\u8def\u5f00\u9500\u7684\u5b8c\u6574\u4fe1\u606f \u6bcf\u4e2a\u8282\u70b9\u4ec5\u6709\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u94fe\u8def\u7684\u5f00\u9500\u77e5\u8bc6\uff0c\u7136\u540e\u901a\u8fc7\u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\u4ee5\u53ca\u76f8\u90bb\u8282\u70b9\u7684\u4fe1\u606f\u4ea4\u6362\u6765\u786e\u5b9a\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u8ddd\u79bb\u5411\u91cf\uff08DV\uff09\u7b97\u6cd5 \uff0c\u5206\u6563\u5f0f\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5230\u7f51\u7edc\u4e2d\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u5f00\u9500(\u8ddd\u79bb)\u7684\u5411\u91cf \u6839\u636e\u9759\u6001\u548c\u52a8\u6001\u6765\u5212\u4efd \u9759\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u8def\u7531\u968f\u65f6\u95f4\u53d8\u5316\u975e\u5e38\u7f13\u6162\uff0c\u901a\u5e38\u662f\u4eba\u5de5\u8fdb\u884c\u8c03\u6574 \u52a8\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff0c\u968f\u7740 \u7f51\u7edc\u6d41\u91cf\u8d1f\u8f7d\u6216\u62d3\u6251\u53d1\u751f\u53d8\u5316 \u800c\u6539\u53d8\u8def\u7531\u9009\u62e9\u8def\u5f84 \u6613\u53d7\u5230\u8bf8\u5982\u8def\u7531\u9009\u62e9\u5faa\u73af\u3001\u8def\u7531\u632f\u8361\u4e4b\u7c7b\u95ee\u9898\u7684\u5f71\u54cd \u6839\u636e\u8d1f\u8f7d\u654f\u611f\u548c\u8d1f\u8d23\u8fdf\u949d\u6765\u5212\u5206 \u8d1f\u8f7d\u654f\u611f\u7b97\u6cd5\uff0c\u94fe\u8def\u5f00\u9500\u4f1a\u52a8\u6001\u5730\u53d8\u5316\u4ee5\u53cd\u6620\u51fa\u5e95\u5c42\u94fe\u8def\u7684\u5f53\u524d\u62e5\u585e\u6c34\u5e73 \u8d1f\u8f7d\u8fdf\u949d\u7b97\u6cd5\uff0c\u67d0\u6761\u94fe\u8def\u7684\u5f00\u9500\u4e0d\u660e\u786e\u53cd\u5e94\u5f53\u524d\u6216\u6700\u8fd1\u7684\u62e5\u585e\u6c34\u5e73\uff08\u4e3b\u6d41\uff09","title":"\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u4ecb\u7ecd\u4ee5\u53ca\u5212\u5206"},{"location":"CN-Top2down/#ls","text":"\u901a\u8fc7 \u94fe\u8def\u72b6\u6001\u5e7f\u64ad\u7b97\u6cd5 \uff0c\u5411\u6bcf\u4e2a\u8282\u70b9\u5411\u7f51\u8def\u4e2d \u6240\u6709\u5176\u4ed6\u8282\u70b9\u5e7f\u64ad\u94fe\u8def\u72b6\u6001\u5206\u7ec4 \uff0c\u6bcf\u4e2a\u5206\u7ec4\u5305\u542b\u5b83\u6240\u8fde\u63a5\u7684\u94fe\u8def\u7684\u6807\u8bc6\u548c\u5f00\u9500 \u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u7f51\u7edc\u7684\u7edf\u4e00\u3001\u5b8c\u6574\u89c6\u56fe\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u90fd\u80fd\u591f\u8fd0\u884cLS\u7b97\u6cd5\u5e76\u8ba1\u7b97\u51fa\u76f8\u540c\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u96c6\u5408 \u94fe\u8def\u72b6\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08LS\uff09\uff1aDijkstra\u7b97\u6cd5 Djkstra\u7b97\u6cd5\u8ba1\u7b97\u51fa\u67d0\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u8282\u70b9\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84 \u5f53\u540c\u4e00\u94fe\u8def\u4e24\u4e2a\u65b9\u5411\u8d1f\u8f7d\u4e0d\u540c\u65f6\uff0c\u4f1a\u51fa\u73b0\u632f\u8361\u60c5\u51b5 \u8be5\u60c5\u51b5\u4e0d\u4ec5\u51fa\u73b0\u5728LS\u4e2d\uff0c\u5b83\u51fa\u73b0\u5728\u4efb\u4f55\u4f7f\u7528\u62e5\u585e\u6216\u57fa\u4e8e\u65f6\u5ef6\u7684\u94fe\u8def\u6d4b\u5ea6\u7b97\u6cd5\u4e2d \u8ba9\u6240\u6709\u8def\u7531\u5668\u5e76\u975e\u540c\u65f6\u8fd0\u884cLS\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898 \u4e3a\u4e86\u907f\u514d\u81ea\u540c\u6b65\uff0c\u5c06\u901a\u544a\u65f6\u95f4\u968f\u673a\u5316","title":"\u94fe\u8def\u72b6\u6001\u8def\u7531\u9009\u62e9\u7b97\u6cd5\uff08LS\uff09"},{"location":"CN-Top2down/#dv","text":"\u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u7684\u3001\u5f02\u6b65\u7684\u548c\u5206\u5e03\u5f0f\u7b97\u6cd5 \u5206\u5e03\u5f0f\uff1a\u6bcf\u4e2a\u8282\u70b9\u90fd\u8981\u4ece\u76f8\u90bb\u8282\u70b9\u83b7\u53d6\u4fe1\u606f\u3001\u8ba1\u7b97\u7136\u540e\u5411\u90bb\u5c45\u5206\u53d1 \u8fed\u4ee3\uff1a\u6b64\u7b97\u6cd5\u4e00\u76f4\u6301\u7eed\u5230\u6ca1\u6709\u4fe1\u606f\u4ea4\u6362\u4e3a\u6b62 \u5f02\u6b65\uff1a\u4e0d\u8981\u6c42\u6240\u6709\u8282\u70b9\u76f8\u4e92\u4e4b\u95f4\u6b65\u4f10\u4e00\u81f4 Bellman-Ford\u7b97\u6cd5 \u8282\u70b9\u552f\u4e00\u5177\u6709\u7684\u4fe1\u606f\u662f \u5b83\u5230\u76f4\u63a5\u76f8\u8fde\u90bb\u5c45\u7684\u94fe\u8def\u5f00\u9500 \u548c \u5b83\u4ece\u8fd9\u4e9b\u90bb\u5c45\u63a5\u6536\u5230\u7684\u4fe1\u606f \uff0c\u6bcf\u4e2a\u8282\u70b9\u5177\u6709 \u521d\u59cb\u8def\u7531\u9009\u62e9\u8868 \u4ece\u90bb\u5c45\u63a5\u53d7\u66f4\u65b0\u8ddd\u79bb\u5411\u91cf\u3001\u91cd\u65b0\u8ba1\u7b97\u8def\u7531\u9009\u62e9\u8868\u9879\u548c\u901a\u77e5\u90bb\u5c45\u5230\u76ee\u7684\u5730\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u7684\u5f00\u9500\uff0c\u5faa\u73af\u5f80\u590d\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\uff0c\u8be5\u7b97\u6cd5\u8fdb\u5165\u9759\u6b62\u72b6\u6001 \u4e3a\u4e86\u907f\u514d\u8def\u7531\u9009\u62e9\u73af\u8def \u5982\u679c z\u901a\u8fc7y\u8def\u7531\u5230\u8fbex \uff0c\u5219z\u5c06\u901a\u544ay\uff0cz\u5230x\u7684\u8ddd\u79bb\u662f\u65e0\u7a77\u5927\u7684\u5373\uff0cDz(x)\u4e3a\u65e0\u7a77 \u53ea\u8981z\u7ecfy\u8def\u7531\u9009\u62e9\u5230x\uff0cz\u5c31\u6301\u7eed\u8fd9\u6837\u505a","title":"\u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5DV"},{"location":"CN-Top2down/#lsdv","text":"\u62a5\u6587\u590d\u6742\u5ea6\uff1aLS\u6bcf\u6b21\u94fe\u8def\u72b6\u6001\u53d1\u751f\u6539\u53d8\u5c31\u8981\u5411\u6240\u6709\u8282\u70b9\u53d1\u9001\u65b0\u7684\u94fe\u8def\u5f00\u9500\uff0cDV\u7b97\u6cd5\u4ec5\u5f53\u65b0\u7684\u94fe\u8def\u5f00\u9500\u5bfc\u81f4\u4e0e\u8be5\u94fe\u8def\u76f8\u8fde\u7684\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u53d1\u751f\u53d8\u5316\u65f6\u624d\u4f20\u64ad\u65b0\u7684\u5f00\u9500 \u6536\u655b\u901f\u5ea6\uff1aDV\u6162\uff0c\u4e14\u5728\u6536\u655b\u65f6\u4f1a\u9047\u5230\u8def\u7531\u9009\u62e9\u73af\u8def\u4ee5\u53ca\u65e0\u7a77\u8ba1\u6570\u95ee\u9898 \u5065\u58ee\u6027\uff1a LS\uff0c\u8def\u7531\u8ba1\u7b97\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u5206\u79bb\u7684\uff0c\u63d0\u4f9b\u4e86\u4e00\u5b9a\u7684\u5065\u58ee\u6027 DV\uff0c\u4e00\u4e2a\u4e0d\u6b63\u786e\u503c\u4f1a\u6269\u6563\u5230\u6574\u4e2a\u7f51\u7edc","title":"LS\u548cDV\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u6bd4\u8f83"},{"location":"CN-Top2down/#ospf","text":"\u968f\u7740\u8def\u7531\u5668\u6570\u76ee\u53d8\u5f97\u5de8\u5927\uff0c\u6210\u672c\u548c\u89c4\u6a21\u5c06\u4f1a\u9ad8\u7684\u4e0d\u53ef\u5b9e\u73b0 \u56e0\u7279\u7f51\u65f6ISP\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2aISP\u90fd\u6709\u81ea\u5df1\u7684\u8def\u7531\u5668\u7f51\u7edc \u5f15\u5165 \u81ea\u6cbb\u7cfb\u7edf\uff08AS\uff09 \u6bcf\u4e2aAS\u7531\u4e00\u7ec4\u5728 \u76f8\u540c\u7ba1\u7406\u63a7\u5236 \u4e0b\u7684\u8def\u7531\u5668\u7ec4\u6210\uff0c\u901a\u5e38\u5728\u4e00\u4e2aISP\u548c\u4e92\u8054\u4ed6\u4eec\u7684\u94fe\u8def\u6784\u6210\u4e00\u4e2aAS \u4e00\u4e2aISP\u53ef\u4ee5\u62c6\u5206\u4e3a\u591a\u4e2aAS \u6bcf\u4e2aAS\u90fd\u6709\u552f\u4e00\u7684ASN\u53f7\u6807\u8bc6 \u4e00\u4e2a\u81ea\u6cbb\u7cfb\u7edfAS\u5185\u90e8\u7684\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u53eb\u505a\u81ea\u6cbb\u7cfb\u7edf\u5185\u90e8\u8def\u7531\u9009\u62e9\u534f\u8bae \u5f00\u653e\u6700\u77ed\u8def\u4f18\u5148\uff08OSPF\uff09 OSPF\u662f\u4e00\u79cd\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff0c\u6d2a\u6cdb\u94fe\u8def\u72b6\u6001\u4fe1\u606f\u548cDijkstra\u6700\u4f4e\u5f00\u9500\u8def\u5f84\u7b97\u6cd5\uff0c\u4f7f\u7528OSPF\uff0c\u4e00\u53f0\u8def\u7531\u5668\u6784\u5efa\u4e86\u4e00\u5e45\u5173\u4e8e\u6574\u4e2a\u81ea\u6cbb\u7cfb\u7edf\u7684\u5b8c\u6574\u62d3\u6251\u56fe OSPF\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u8ba9\u7f51\u7edc\u7ba1\u7406\u5458\u4e3a\u7ed9\u5b9a\u7684\u94fe\u8def\u6743\u503c\u96c6\u5408\u786e\u5b9a\u6700\u4f4e\u5f00\u9500\u7684\u8def\u7531\u9009\u62e9 \u7ba1\u7406\u5458\u8bbe\u7f6e\u4e0d\u540c\u7684\u6743\u91cd\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u6700\u5c11\u8df3\u7b49 OSPF\u8def\u7531\u5668\u5411AS\u5185 \u6240\u6709\u8def\u7531\u5668 \u5e7f\u64ad\u8def\u7531\u9009\u62e9\u4fe1\u606f\uff0c\u5373\u4f7f\u72b6\u6001\u672a\u53d1\u751f\u6539\u53d8\uff0c\u5b83\u4e5f \u5468\u671f\u6027 \u7684\u5e7f\u64ad\u94fe\u8def\u72b6\u6001\uff08\u589e\u52a0\u4e86\u5065\u58ee\u6027\uff09 OSPF\u901a\u544a\u5305\u542b\u5728IP\u62a5\u6587\u4e2d\uff0c\u5bf9OSPF\u5176\u4e0a\u5c42\u534f\u8bae\u7684\u503c\u4e3a89\uff0c\u56e0\u6b64OSPF\u5fc5\u987b\u81ea\u5df1\u5b9e\u73b0\u8bf8\u5982\u53ef\u9760\u62a5\u6587\u4f20\u8f93\u3001\u94fe\u8def\u72b6\u6001\u5e7f\u64ad\u7b49\u529f\u80fd OSPF\u7684\u4f18\u70b9\uff1a \u5b89\u5168\uff1a\u80fd\u591f\u9274\u522bOSPF\u8def\u7531\u5668\u4e4b\u95f4\u7684\u4ea4\u6362 \u591a\u6761\u76f8\u540c\u5f00\u9500\u7684\u8def\u5f84\uff1a\u5b58\u5728\u591a\u6761\u76f8\u7b49\u5f00\u9500\u8def\u5f84\u65f6\uff0c\u65e0\u9700\u9009\u62e9\u5355\u4e00\u8def\u5f84\u627f\u8f7d\u6240\u6709\u6d41\u91cf \u5355\u64ad\u548c\u591a\u64ad\u8def\u7531\u9009\u62e9\u7684\u7efc\u5408\u652f\u6301 \u652f\u6301\u5728\u5355\u4e2aAS\u4e2d\u7684\u5c42\u6b21\u7ed3\u6784\uff1a\u4e00\u4e2aOSPF\u81ea\u6cbb\u7cfb\u7edf\u80fd\u591f\u5c42\u6b21\u5316\u914d\u7f6e\u591a\u4e2a\u533a\u57df \u6bcf\u4e2a\u533a\u57df\uff0c\u4e00\u53f0\u6216\u591a\u53f0\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\u8d1f\u8d23\u4e3a\u8be5\u533a\u57df\u4ee5\u5916\u7684\u5206\u7ec4\u63d0\u4f9b\u8def\u7531\u9009\u62e9 \u6bcf\u4e2aAS\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2aOSPF\u533a\u57df\u88ab\u914d\u7f6e\u4e3a \u4e3b\u5e72\u533a\u57df \uff0c\u4e3b\u5e72\u533a\u57df\u4e3a\u8be5AS\u4e2d \u5176\u4f59\u533a\u57df \u4e4b\u95f4\u7684\u6d41\u91cf\u63d0\u4f9b\u8def\u7531\u9009\u62e9 \u8be5\u4e3b\u5e72\u5305\u542b\u6240\u6709\u7684\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\u548c\u90e8\u5206\u975e\u8fb9\u754c\u8def\u7531\u5668 AS\u4e2d\u7684\u8def\u7531\u9009\u62e9\u8981\u6c42\uff0c\u5206\u7ec4\u5148\u5230\u8fbe\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\uff0c\u7136\u540e\u901a\u8fc7\u4e3b\u5e72\u533a\u57df\u5230\u8fbe\u76ee\u7684\u533a\u57df\u7684\u533a\u57df\u8fb9\u754c\u8def\u7531\u5668\uff0c\u8fdb\u800c\u5230\u6700\u7ec8\u76ee\u7684\u5730","title":"\u56e0\u7279\u7f51\u81ea\u6cbb\u7cfb\u7edf\u5185\u90e8\u8def\u7531\u9009\u62e9\uff1aOSPF"},{"location":"CN-Top2down/#ispbgp","text":"\u5f53\u5206\u7ec4\u8de8\u8d8a\u591a\u4e2aAS\u8fdb\u884c\u8def\u7531\u65f6\uff0c\u9700\u8981\u4e00\u4e2a\u81ea\u6cbb\u7cfb\u7edf\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae \u5728\u56e0\u7279\u7f51\u4e2d\u6240\u6709\u7684AS\u8fd0\u884c\u76f8\u540c\u7684AS\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae\uff0c\u79f0\u4e3a\u8fb9\u754c\u7f51\u5173\u534f\u8bae BGP\u5c06\u56e0\u7279\u7f51\u4e2d\u6570\u4ee5\u5343\u8ba1\u7684ISP\u7c98\u5408\u8d77\u6765\uff08\u56e0\u7279\u7f51\u4e2d\u534f\u8bae\u552f\u4e00\u53ef\u80fd\u7ade\u4e89\u8005\u662fIP\u534f\u8bae\uff09 BGP\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u548c\u5f02\u6b65\u7684\u534f\u8bae","title":"ISP\u4e4b\u95f4\u7684\u8def\u7531\u9009\u62e9\uff1aBGP"},{"location":"CN-Top2down/#bgp","text":"\u6bcf\u4e2a\u8def\u7531\u5668\u5177\u6709\u4e00\u53f0\u8f6c\u53d1\u8868\uff0c\u5bf9\u4e8e\u4f4d\u4e8e\u76f8\u540cAS\u7684\u76ee\u7684\u5730\u800c\u8a00\uff0c\u8f6c\u53d1\u8868\u8868\u9879\u7531AS\u5185\u90e8\u8def\u7531\u534f\u8bae\u51b3\u5b9a\uff0c\u5bf9\u4e8eAS\u5916\u90e8\u7684\u76ee\u7684\u5730\u7531AS\u95f4\u534f\u8bae\u51b3\u5b9a BGP\u4e2d\u5206\u7ec4\u8def\u7531\u5230\u4e00\u4e2aCIDR\u5316\u7684\u524d\u7f00\uff0c\u5176\u4e2d\u6bcf\u4e2a\u524d\u7f00\u4ee3\u8868\u4e00\u4e2a\u5b50\u7f51\u6216\u4e00\u4e2a\u5b50\u7f51\u7684\u96c6\u5408 \uff08x,i\uff09\u5f62\u5f0f x\u4ee3\u8868\u524d\u7f00\uff08138.16.68/22\uff09\uff0ci\u4ee3\u8868\u8def\u7531\u5668\u7684\u63a5\u53e3\u4e4b\u4e00\u7684\u63a5\u53e3\u53f7 BGP\u9700\u8981\u5b8c\u6210 \u4ece\u90bb\u5c45AS\u83b7\u5f97\u524d\u7f00\u7684\u53ef\u8fbe\u6027\u4fe1\u606f\uff0cBGP\u5141\u8bb8\u6bcf\u4e2a\u5b50\u7f51\u5411\u56e0\u7279\u7f51\u5176\u4f59\u6240\u6709\u90e8\u5206\u901a\u544a\u5b83\u7684\u5b58\u5728\uff0cBGP\u786e\u4fdd\u56e0\u7279\u7f51\u4e2d\u8fc7\u7684\u6240\u6709AS\u77e5\u9053\u8be5\u5b50\u7f51 \u786e\u5b9a\u5230\u8be5\u524d\u7f00\u7684\u6700\u597d\u7684\u8def\u7531\uff0c\u4e00\u53f0\u8def\u7531\u5668\u53ef\u80fd\u76f4\u5230\u591a\u6761\u901a\u5f80\u540c\u4e00\u524d\u7f00\u7684\u4e0d\u540c\u8def\u7531\uff0c\u8def\u7531\u5668\u672c\u5730\u8fd0\u884c\u4e00\u4e2aBGP\u8def\u7531\u9009\u62e9\u8fc7\u7a0b\uff08\u4f7f\u7528\u4ece\u76f8\u90bb\u8def\u7531\u5668\u83b7\u5f97\u7684\u7684\u524d\u7f00\u53ef\u8fbe\u4fe1\u606f\uff09\uff0c\u8be5\u6700\u597d\u7684\u8def\u7531\u57fa\u4e8e\u7b56\u7565\u4ee5\u53ca\u53ef\u8fbe\u6027\u4fe1\u606f\u6765\u786e\u5b9a \u901a\u544aBGP\u8def\u7531\u4fe1\u606f \u6bcf\u4e2aAS\u5185\u90e8\u6bcf\u53f0\u8def\u7531\u5668\u8981\u4e48\u662f\u4e00\u53f0 \u7f51\u5173\u8def\u7531\u5668 \uff0c\u8981\u4e48\u662f\u4e00\u53f0 \u5185\u90e8\u8def\u7531\u5668 \u7f51\u5173\u8def\u7531\u5668\u4f4d\u4e8eAS\u8fb9\u7f18\uff0c\u5b83\u94fe\u63a5\u5230\u5176\u4ed6AS\u7684\u4e00\u53f0\u6216\u591a\u53f0\u8def\u7531\u5668 \u5185\u90e8\u8def\u7531\u5668\u4ec5\u8fde\u63a5\u5728\u4ed6\u81ea\u5df1AS\u4e2d\u7684\u4e3b\u673a\u548c\u8def\u7531\u5668 \u5728BGP\u4e2d\u6bcf\u53f0\u8def\u7531\u5668\u4f7f\u7528179\u7aef\u53e3\u7684\u534a\u6c38\u4e45TCP\u94fe\u63a5\u4ea4\u6362\u8def\u7531\u9009\u62e9\u4fe1\u606f \u6bcf\u6761\u76f4\u63a5\u8fde\u63a5\u4ee5\u53ca\u6240\u6709\u901a\u8fc7\u8be5\u94fe\u63a5\u53d1\u9001\u7684BGP\u62a5\u6587\u79f0\u4e3a BGP\u94fe\u63a5 \u8de8\u8d8a\u4e24\u4e2aAS\u7684BGP\u94fe\u63a5\u79f0\u4e3a\u5916\u90e8BGP\u94fe\u63a5\uff08eBGP\uff09 \u76f8\u540cAS\u5185\u90e8\u7684BGP\u94fe\u63a5\u79f0\u4e3a\u5185\u90e8BGP\u94fe\u63a5\uff08iBGP\uff09\uff0ciBGP\u4e0d\u603b\u662f\u4e0e\u7269\u7406\u94fe\u8def\u76f8\u5bf9\u5e94 \u786e\u5b9a\u6700\u597d\u7684\u8def\u7531 \u8def\u7531\u5668\u901a\u8fc7BGP\u94fe\u63a5\u901a\u544a\u524d\u7f00\u65f6\uff0c\u524d\u7f00\u5305\u62ec\u4e00\u4e9bBGP\u5c5e\u6027\uff0c\u524d\u7f00\u53ca\u5176\u5c5e\u6027\u79f0\u4e3a \u8def\u7531 \u4e24\u4e2a\u91cd\u8981\u7684\u5c5e\u6027\u662f AS-PATH \u548c NEXT-HOP AS-PATH\u5305\u542b\u901a\u544a\u5df2\u7ecf\u901a\u8fc7\u7684AS\u7684\u5217\u8868 BGP\u8def\u7531\u5668\u8fd8\u901a\u8fc7\u8be5\u5c5e\u6027\u68c0\u6d4b\u548c\u9632\u6b62\u901a\u544a\u73af\u8def\uff08\u5728\u901a\u544a\u4e2d\u53d1\u73b0\u4e86\u5b83\u81ea\u5df1\uff0c\u62d2\u7edd\u8be5\u901a\u544a\uff09 NEXT-HOP\u662fAS-PATH\u8d77\u59cb\u7684\u8def\u7531\u5668\u63a5\u53e3\u7684IP\u5730\u5740 \u70ed\u571f\u8c46\u8def\u7531\u9009\u62e9 \u4ece\u6240\u6709\u53ef\u80fd\u7684\u8def\u7531\u4e2d\u9009\u62e9\u5230 \u5f00\u59cb\u8be5\u8def\u7531\u7684NEXT-HOP\u8def\u7531\u5668\u5177\u6709\u6700\u5c0f\u5f00\u9500 \u7684\u8def\u7531 \u76f8\u540cAS\u5185\u90e8\u7684\u4e24\u53f0\u8def\u7531\u5668\u5230\u8fbe\u4e00\u4e2a\u76ee\u7684\u5730\u53ef\u80fd\u5177\u6709\u4e0d\u540cAS\u8def\u5f84 \u8f6c\u53d1\u8868\u589e\u52a0AS\u5411\u5916\u524d\u7f00\u65f6\uff0cAS\u95f4\u8def\u7531\u9009\u62e9\u534f\u8bae\u548cAS\u5185\u90e8\u8def\u7531\u9009\u62e9\u534f\u8bae\u90fd\u8981\u7528\u5230 \u8def\u7531\u5668\u9009\u62e9\u7b97\u6cd5 \u5b9e\u9645\u7684BGP\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u66f4\u4e3a\u590d\u6742 \u8fdb\u5165BGP\u8def\u7531\u9009\u62e9\u7b97\u6cd5\u7684\u8f93\u5165\u662f\u5230\u67d0\u524d\u7f00\u7684\u6240\u6709\u8def\u7531\u7684\u96c6\u5408\uff0c\u8be5\u524d\u7f00\u662f\u5df2\u88ab\u8def\u7531\u5668\u5b66\u4e60\u548c\u63a5\u53d7\u7684\uff0c\u4ec5\u6709\u4e00\u6761\u65f6\u9009\u62e9\u8be5\u8def\u7531\uff0c\u5426\u5219\u987a\u5e8f\u8c03\u7528\u4ee5\u4e0b\u89c4\u5219 \u8def\u7531\u88ab\u6307\u6d3e\u4e00\u4e2a \u672c\u5730\u504f\u597d\u503c \u4f5c\u4e3a\u5176\u5c5e\u6027\u4e4b\u4e00\uff0c\u5b83\u53d6\u51b3\u4e8e\u8be5AS\u7684\u7f51\u7edc\u7ba1\u7406\u5458\uff0c\u6700\u9ad8\u672c\u5730\u504f\u597d\u503c\u8def\u7531\u88ab\u9009\u62e9 \u6700\u77edAS-PATH\u8def\u7531\uff0c\u5982\u679c\u8be5\u89c4\u5219\u662f\u552f\u4e00\u89c4\u5219\uff0cBGP\u5c06\u4f7f\u7528 \u8ddd\u79bb\u5411\u91cf\u7b97\u6cd5 \u51b3\u5b9a\u8def\u5f84\uff0c\u5176\u4e2d\u8ddd\u79bb\u6d4b\u5ea6\u4f7f\u7528\u7684\u662fAS\u8df3\u7684\u8df3\u6570\uff0c\u800c\u4e0d\u662f\u8def\u7531\u5668\u8df3\u6570 \u4f7f\u7528\u70ed\u571f\u8c46\u8def\u7531\u9009\u62e9\uff0c\u6700\u9760\u8fd1NEXT-HOP\u8def\u7531\u5668\u7684\u8def\u7531 \u4f7f\u7528BGP\u6807\u8bc6\u7b26\u9009\u62e9\u8def\u7531 IP\u4efb\u64ad BGP\u8fd8\u5e38\u88ab\u7528\u4f5c\u5b9e\u73b0IP\u4efb\u64ad\u670d\u52a1\uff0cDNS\u5e38\u4f7f\u7528\u8be5\u670d\u52a1 CDN\u4e3a\u4ed6\u7684\u591a\u53f0\u670d\u52a1\u5668\u6307\u6d3e\u76f8\u540c\u7684IP\u5730\u5740\uff0c\u5e76\u4f7f\u7528BGP\u6765\u901a\u544a\u8fd9\u4e9b\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c\u800c\u5904\u4e8e\u4e0d\u540c\u7684\u5ba2\u6237\u8bbf\u95ee\u8be5IP\u4f1a\u88ab\u5f15\u5bfc\u81f3\u4e0d\u540c\u7684\u4e0d\u540c\u7684\u670d\u52a1\u5668\uff08\u6700\u8fd1\uff09 DNS\u4e2d\uff0c\u6839\u670d\u52a1\u5668\u5177\u670913\u4e2aIP\u5730\u5740\uff0c\u4f46\u662f\u6bcf\u4e00\u4e2aIP\u5730\u5740\u5177\u6709\u591a\u53f0\u670d\u52a1\u5668\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u5206\u5e03\u5728\u5404\u5730\uff0c\u7528\u6237\u8bbf\u95ee\u8fd9\u4e9b\u6839\u670d\u52a1\u5668\u65f6\u5c06\u901a\u8fc7IP\u4efb\u64ad\u8def\u7531\u5230\u6700\u8fd1\u7684\u6839\u670d\u52a1\u5668","title":"BGP\u4f5c\u7528"},{"location":"CN-Top2down/#sdn_1","text":"\u63a7\u5236\u5206\u7ec4\u5728\u7f51\u7edc\u7684SDN\u4f7f\u80fd\u8bbe\u5907\u4e2d\u8f6c\u53d1\u7f51\u7edc\u8303\u56f4\u903b\u8f91 SDN\u56db\u4e2a\u5173\u952e\u7279\u5f81 \u57fa\u4e8e\u6d41\u7684\u8f6c\u53d1\uff1a\u80fd\u591f\u57fa\u4e8e\u8fd0\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u6216\u94fe\u8def\u5c42\u4e2d\u4efb\u610f\u6570\u91cf\u7684\u9996\u90e8\u5b57\u6bb5\u503c\u8fdb\u884c\uff1bSDN\u63a7\u5236\u5e73\u9762\u7684\u5de5\u4f5c\u662f\u8ba1\u7b97\u3001\u7ba1\u7406\u548c\u5b89\u88c5\u6240\u6709\u7f51\u7edc\u4ea4\u6362\u673a\u4e2d\u7684 \u6d41\u8868\u9879 \u6570\u636e\u5e73\u9762\u548c\u63a7\u5236\u5e73\u9762\u5206\u79bb \u6570\u636e\u5e73\u9762\u7531\u7f51\u7edc\u4ea4\u6362\u673a\u7ec4\u6210\uff0c\u6267\u884c\u201d\u5339\u914d+\u64cd\u4f5c\u201c\u7684\u89c4\u5219 \u63a7\u5236\u5e73\u9762\u7531\u670d\u52a1\u5668\u4ee5\u53ca\u51b3\u5b9a\u548c\u7ba1\u7406\u4ea4\u6362\u673a\u6d41\u8868\u7684\u8f6f\u4ef6\u7ec4\u6210 \u7f51\u7edc\u63a7\u5236\u529f\u80fd\uff1a\u4f4d\u4e8e\u6570\u636e\u5e73\u9762\u4ea4\u6362\u673a\u5916\u90e8\uff0c\u63a7\u5236\u5e73\u9762\u672c\u8eab\u6709\u4e24\u4e2a\u7ec4\u6210 \u4e00\u4e2aSDN\u63a7\u5236\u5668\uff08\u7f51\u7edc\u64cd\u4f5c\u7cfb\u7edf\uff09 \u63a7\u5236\u5668\u7ef4\u62a4\u51c6\u786e\u7684\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\uff0c\u4e3a\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f \u63d0\u4f9b\u65b9\u6cd5\u6765\u8ba9\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u76d1\u89c6\u3001\u7f16\u7a0b\u548c\u63a7\u5236\u4e0b\u9762\u7684\u7f51\u7edc\u8bbe\u5907 \u63a7\u5236\u5668\u662f\u903b\u8f91\u4e0a\u96c6\u4e2d\uff0c\u901a\u5e38\u7531\u51e0\u53f0\u670d\u52a1\u5668\u5b9e\u73b0 \u82e5\u5e72\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\uff1a \u53ef\u7f16\u7a0b\u7684\u7f51\u7edc\uff1a \u8fd0\u884c\u5728\u63a7\u5236\u5e73\u9762\u4e0a\u7684\u7f51\u8def\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4e86SDN\u63a7\u5236\u5668\u63d0\u4f9b\u7684API\u6765\u5b9a\u4e49\u548c\u63a7\u5236\u7f51\u7edc\u8bbe\u5907\u7684\u6570\u636e\u5e73\u9762 SDN\u4fc3\u8fdb\u4e86\u7f51\u7edc\u7684\u5206\u7c7b\uff0c\u8ba9\u8ba1\u7b97\u786c\u4ef6\u3001\u7cfb\u7edf\u8f6f\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u7c7b\uff0c\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u9886\u57df\u7684\u521b\u65b0\u63d0\u4f9b\u4e86\u4e30\u5bcc\u3001\u5f00\u653e\u7684\u751f\u6001\u7cfb\u7edf","title":"SDN\u63a7\u5236\u5e73\u9762"},{"location":"CN-Top2down/#sdn_2","text":"\u901a\u4fe1\u5c42\uff1aSDN\u63a7\u5236\u5668\u548c\u53d7\u63a7\u7f51\u7edc\u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u9700\u8981\u4e00\u4e2a\u534f\u8bae\u6765\u4f20\u9001\u63a7\u5236\u5668\u4e0e\u8fd9\u4e9b\u8bbe\u5907\u4e4b\u95f4\u7684\u4fe1\u606f\uff08OpenFlow\uff09 \u7f51\u7edc\u72b6\u6001\u7ba1\u7406\u5c42\uff1a\u7531SDN\u63a7\u5236\u5e73\u9762\u6240\u4f5c\u51fa\u7684\u6700\u7ec8\u63a7\u5236\u51b3\u5b9a\uff0c\u5177\u6709\u5404\u7c7b\u6700\u65b0\u72b6\u6001\u4fe1\u606f \u5bf9\u4e8e\u7f51\u7edc\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u63a5\u53e3\uff1a\u63a7\u5236\u5668\u901a\u8fc7\u4ed6\u7684\u201d\u5317\u5411\u201c\u63a5\u53e3\u548c\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\uff0c\u8be5API\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5728\u72b6\u6001\u7ba1\u7406\u5c42\u4e4b\u95f4\u8bfb/\u5199\u7f51\u7edc\u72b6\u6001\u548c\u6d41\u8868\uff0c\u5f53\u72b6\u6001\u6539\u53d8\u4e8b\u4ef6\u51fa\u73b0\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u6ce8\u518c\u8fdb\u884c\u901a\u544a","title":"SDN\u63a7\u5236\u5668"},{"location":"CN-Top2down/#openflow","text":"OpenFlow\u534f\u8bae\u8fd0\u884c\u5728SDN\u63a7\u5236\u5668\u548cSDN\u63a7\u5236\u7684\u4ea4\u6362\u673a\u6216\u5176\u4ed6\u5b9e\u73b0OpenFlow API\u7684\u8bbe\u5907\u4e4b\u95f4 \u8fd0\u884c\u5728TCP\u4e4b\u4e0a\uff0c\u4f7f\u75286653\u9ed8\u8ba4\u7aef\u53e3 \u63a7\u5236\u5668\u6d41\u5411\u53d7\u63a7\u4ea4\u6362\u673a\u91cd\u8981\u62a5\u6587\uff1a \u914d\u7f6e\uff1a\u8be5\u62a5\u6587\u5141\u8bb8\u63a7\u5236\u5668\u67e5\u8be2\u5e76\u8bbe\u7f6e\u4ea4\u6362\u673a\u7684\u914d\u7f6e\u53c2\u6570 \u4fee\u6539\u72b6\u6001\uff1a\u8be5\u62a5\u6587\u7531\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u4ee5\u589e\u52a0/\u5220\u9664\u6216\u4fee\u6539\u4ea4\u6362\u673a\u6d41\u8868\u4e2d\u7684\u8868\u9879\uff0c\u5e76\u8bbe\u7f6e\u4ea4\u6362\u673a\u7aef\u53e3\u7279\u6027 \u8bfb\u72b6\u6001\uff1a\u4ece\u4ea4\u6362\u673a\u7684\u6d41\u8868\u548c\u7aef\u53e3\u6536\u96c6\u7edf\u8ba1\u6570\u636e\u548c\u8ba1\u7b97\u5668\u7684\u503c \u53d1\u9001\u5206\u7ec4\uff1a\u5728\u53d7\u63a7\u4ea4\u6362\u673a\u4ece\u7279\u5b9a\u7684\u7aef\u53e3\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u62a5\u6587 \u53d7\u63a7\u4ea4\u6362\u673a\u6d41\u5411\u63a7\u5236\u5668\u91cd\u8981\u62a5\u6587: \u6d41\u5220\u9664\uff1a\u901a\u77e5\u63a7\u5236\u5668\u5df2\u5220\u9664\u4e00\u4e2a\u6d41\u8868\u9879 \u7aef\u53e3\u72b6\u6001\uff1a\u901a\u77e5\u7aef\u53e3\u72b6\u6001\u53d8\u5316 \u5206\u7ec4\u5165:\u4e00\u4e2a\u5206\u7ec4\u4e0d\u4e0e\u6240\u6709\u6d41\u8868\u9879\u5339\u914d\uff0c\u8fd9\u4e2a\u5206\u7ec4\u88ab\u53d1\u7ed9\u63a7\u5236\u5668\u8fdb\u884c\u989d\u5916\u5904\u7406","title":"OpenFlow\u534f\u8bae"},{"location":"CN-Top2down/#icmp","text":"ICMP\u88ab\u4e3b\u673a\u548c\u8def\u7531\u5668\u7528\u6765\u5f7c\u6b64\u6c9f\u901a\u7f51\u7edc\u5c42\u7684\u4fe1\u606f ICMP\u7684\u6700\u5178\u578b\u7528\u9014\u662f\u5dee\u9519\u62a5\u544a ICMP\u4f5c\u4e3a\u6709\u6548\u8f7d\u8377\u627f\u8f7d\u5728IP\u62a5\u6587\u6bb5\u4e2d \u6307\u660e\u4e0a\u5c42\u534f\u8bae\u4e3aICMP\u7684IP\u6570\u636e\u62a5\uff0c\u5206\u89e3\u51fa\u8be5\u6570\u636e\u62a5\u5185\u5bb9\u7ed9ICMP ICMP\u62a5\u6587\u7531\u4e00\u4e2a\u7c7b\u578b\u5b57\u6bb5\u548c\u4e00\u4e2a\u7f16\u7801\u5b57\u6bb5\uff0c\u5e76\u4e14\u5305\u542b\u5f15\u8d77\u8be5ICMP\u62a5\u6587\u9996\u6b21\u751f\u6210\u7684IP\u6570\u636e\u62a5\u7684\u9996\u90e8\u548c\u524d8\u4e2a\u5b57\u8282\uff08\u4ee5\u4fbf\u53d1\u9001\u65b9\u80fd\u786e\u5b9a\u5f15\u8d77\u8be5\u5dee\u9519\u7684\u6570\u636e\u62a5\uff09 ICMPv6\u8fd8\u589e\u52a0\u4e86\u65b0\u5174IPv6\u529f\u80fd\u6240\u9700\u7684\u65b0\u7c7b\u578b\u548c\u7f16\u7801 \u5206\u7ec4\u592a\u5927 \u672a\u88ab\u8ba4\u53ef\u7684IPv6\u9009\u9879 \u3002\u3002\u3002","title":"ICMP\uff1a\u56e0\u7279\u7f51\u63a7\u5236\u62a5\u6587\u534f\u8bae"},{"location":"CN-Top2down/#_20","text":"","title":"\u6570\u636e\u94fe\u8def\u5c42"},{"location":"CN-Top2down/#_21","text":"TCP\u53d1\u9001\u65b9\u7ef4\u6301\u62e5\u585e\u7a97\u53e3 TCP\u63a5\u6536\u65b9\u7ef4\u6301\u63a5\u6536\u7a97\u53e3","title":"\u671f\u672b\u901f\u6210"},{"location":"CN-Top2down/#_22","text":"\u5948\u5f0f\u5b9a\u5f8b \u9999\u6d53\u5b9a\u5f8b \u91c7\u6837\u9891\u7387\u4e3a\u5b9e\u9645\u9891\u7387\u76842\u500d\u4ee5\u4e0a \u7801\u5143 = log2\u6bd4\u7279\u6570 \u4fe1\u566a\u6bd4\uff08db\uff09 = 10 log10 S/N \u6ce2\u7279\u7387 \u662f\u6307\u5355\u4f4d\u65f6\u95f4\u5185\u4f20\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u4f4d\u6570\uff0c\u5355\u4f4d\u7528 bps(\u4f4d/\u79d2)* \u8868\u793a\uff0c\u8bb0\u4f5c* \u6ce2\u7279 4\u76f8\u4f4d\u4ee3\u8868\u4e24\u4e2a\u6bd4\u7279\u4f4d\uff0c2400bps = 1200\u6ce2\u7279","title":"\u7269\u7406\u5c42"},{"location":"CN-Top2down/#_23","text":"\u6700\u957f\u6570\u636e\u5e27\u4e3a1500B \u6700\u5c0f\u6570\u636e\u5e27\u957f\u5ea6 = 2 * \u4f20\u64ad\u65f6\u5ef6 * \u6570\u636e\u4f20\u8f93\u901f\u7387 \u4ee5\u592a\u7f51\u4e2d Hub \u4f20\u8f93\u901f\u7387\u4e3a100Mb/s \u4ee5\u592a\u7f51\u6700\u5c0f\u5e27\u957f\u5ea6 64B CRC\u5dee\u9519\u68c0\u9a8c \u4ea4\u6362\u673a\u8868","title":"\u6570\u636e\u94fe\u8def\u5c42"},{"location":"CN-Top2down/#_24","text":"RIP\u534f\u8bae \u5c06\u4f20\u9001\u6765\u7684RIP\u62a5\u6587\u4e2d\u7684\u4e0b\u4e00\u8df3\u66ff\u6362\u4e3a\u53d1\u9001\u6765\u7684\u8def\u7531\u5668\u7f16\u53f7\uff0c\u8ddd\u79bb\u52a0+1 \u5982\u679c\u5f53\u524d\u8def\u7531\u5668\u6ca1\u6709\u8be5\u7f51\u7edc\u76f4\u63a5\u52a01 \u5982\u679c\u6709\u8be5\u7f51\u7edc\uff0c\u5e76\u4e14\u4e0b\u4e00\u8df3\u5730\u5740\u4e5f\u662f\u53d1\u9001\u6765\u7684\u8def\u7531\u5668\uff0c\u5219\u76f4\u63a5\u66ff\u6362 \u5982\u679c\u6709\u8be5\u7f51\u7edc\uff0c\u4f46\u662f\u4e0d\u662f\u8be5\u8def\u7531\uff0c\u9009\u62e9\u8f83\u77ed\u7684\u8def\u5f84 3\u5206\u949f\u672a\u6536\u5230\uff0c\u7f6e\u4e3a\u4e0d\u53ef\u8fbe\uff0816\uff09","title":"\u7f51\u7edc\u5c42"},{"location":"CN-Top2down/#_25","text":"","title":"\u8fd0\u8f93\u5c42"},{"location":"CN-Top2down/#_26","text":"@ \u8003\u8bd5\u7ed3\u675f\uff0c\u5b8c\u7ed3","title":"\u5e94\u7528\u5c42"},{"location":"algorithm/DP/","text":"\u7ebf\u6027DP \u80cc\u5305\u95ee\u9898 01\u80cc\u5305 \u72b6\u6001\u8ba1\u7b97\u65f6 \uff0c\u6bcf\u4e2a\u72b6\u6001\u90fd\u6709\u9009\u6216\u4e0d\u9009\u4e24\u79cd\u60c5\u51b5 f[i][j] = max(f[i][j],f[i -1][j - v[i]] + w[i]); \u6709 NN \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u7b2c ii \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int n,m; int f[N][N]; int v[N],w[N]; int main(void) { cin >> n >> m; for(int i = 0;i<n;i++) cin >> v[i] >> w[i];// \u8f93\u5165\u6570\u636e for(int i = 1;i<=n;i++) for(int j = 0;j<=m;j++) { f[i][j] = f[i-1][j]; if( j >= v[i]) f[i][j] = max(f[i][j],f[i-1][j - v[i]] + w[i]); } cout << f[n][m] << endl; return 0; } \u5b8c\u5168\u80cc\u5305 \u6700\u6734\u7d20\u505a\u6cd5\u9700\u8981\u679a\u4e3ek\u7684\u6b21\u6570\uff08\u4e09\u7ef4\uff09 \u4f18\u5316\u540e\u53d8\u6210\u4e8c\u7ef4 \u6709 NN \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 \u7b2c ii \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int n,m; int f[N][N]; int v[N],w[N]; int main(void) { cin >> n >> m; for(int i = 1;i<=n;i++) cin >> v[i] >> w[i]; for(int i = 1;i<=n;i++) for(int j = 1;j<=m;j++) { f[i][j] = f[i-1][j]; if(j >= v[i]) f[i][j] = max(f[i][j],f[i][j -v[i]] + w[i]); } cout << f[n][m] << endl; return 0; } \u591a\u91cd\u80cc\u5305\u95ee\u9898 \u6709 NN \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\u3002 \u7b2c ii \u79cd\u7269\u54c1\u6700\u591a\u6709 sisi \u4ef6\uff0c\u6bcf\u4ef6\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u4f53\u79ef\u603b\u548c\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c \u76f4\u63a5\u679a\u4e3e\u6bcf\u6b21\u53d6\u5f97\u6570\u91cf\u5373\u53ef #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int n,m; int w[N],s[N],v[N]; int f[N][N]; int main(void) { cin >> n >> m; for(int i = 1;i <= n;i++) cin >> v[i] >> w[i] >> s[i]; for(int i = 1;i <= n;i++) for(int j = 0;j <=m;j++) for(int k= 0;k <= s[i] && j >= v[i] * k;k++) f[i][j] = max(f[i][j],f[i-1][j-v[i] * k] + w[i] * k); cout << f[n][m] << endl; return 0; } \u591a\u91cd\u80cc\u5305\u590d\u6742\u7248 0<N\u226410000<N\u22641000 0<V\u226420000<V\u22642000 0<vi,wi,si\u22642000 \u5229\u7528\u4e8c\u8fdb\u5236\u4f18\u5316 #include <iostream> #include <algorithm> using namespace std; const int N = 25000,M = 2010; int n,m; int v[N],w[N]; int f[M]; int main(void) { cin >> n >> m; int cnt = 0; for(int i = 1;i<=n;i++) { int k = 1; int a,b,s; cin >> a >> b >> s; while(k<=s) { cnt++; v[cnt] = a*k; w[cnt] = b*k; s = s - k; k = k * 2; } /* \u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u628a \u4e00\u4e2a\u6574\u6570 s \u5212\u5206\u6210\u4e86\u4e8c\u8fdb\u5236\u7684\u6570\uff0c\u7136\u540e\u5229\u7528\u4e8c\u8fdb\u5236\u6570\u7684\u7ec4\u5408 \u53ef\u4ee5\u628as\u4e2a\u6570\u5206 \u6210 logs \u4e2a\u6570 \u7136\u540e\u5229\u7528\u8fd9 logs \u4e2a\u6570 \u53ef\u4ee5\u7ec4\u5408\u6210 0~s \u4e4b\u95f4\u7684\u4efb\u610f\u6570 \u5728\u8fd9\u4e2a\u9898\u610f\u4e2d\u5c31\u53ef\u4ee5\u628a \u53d6 0~s \u4e2a\u7684\u6240\u6709\u60c5\u51b5\u5305\u62ec\u4e86 \u8fd9\u6837\u5c31\u53ef\u4ee5\u8282\u7701\u4e86\u8bb8\u591a\u65f6\u95f4 \u7ecf\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u540e \u5c31\u4f1a\u4ea7\u751f \u76f8\u5f53\u4e8e 01 \u80cc\u5305\u7684\u95ee\u9898\u4e00\u6837 \u8bb8\u591a\u53ea\u80fd\u53d6\u4e00\u6b21\u7684\u6570\u636e \u6240\u4ee5\u6b64\u65f6\u5c31\u53ef\u4ee5\u5229\u7528 01 \u80cc\u5305\u4f18\u5316\u5bf9\u6b64\u65f6\u7684\u6240\u6709\u60c5\u51b5\u8fdb\u884c\u53d6 \u6700\u5927\u503c // \u603b\u800c\u8a00\u4e4b \u672c\u9898 \u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f \u5229\u7528\u4e8c\u8fdb\u5236\u4f18\u5316 \u628a s \u4e2a\u60c5\u51b5\u5206\u6210 logs \u4e2a \u5728\u5229\u7528 01 \u80cc\u5305 \u8fdb\u884c\u6700\u540e\u7684\u7ed3\u679c\u7684\u603b\u8fd0\u7b97 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a cnt \u8fd9\u4e2a\u6570\u7ec4\u5df2\u7ecf\u62a5\u542b\u4e86 \u5728\u6570\u7ec4\u4e2d\u53d6\u4efb\u610f\u4e2a\u6570\u5b57\u7684\u60c5\u51b5 */ if( s > 0) { cnt ++; v[cnt] = a*s; w[cnt] = b*s; } } n = cnt; for(int i = 1;i<=n;i++) for(int j = m;j>=v[i];j--) f[j] = max(f[j],f[j-v[i]] + w[i]); cout << f[m] << endl; return 0; } \u5206\u7ec4\u80cc\u5305\u95ee\u9898 \u6709 N \u7ec4\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\u3002 \u6bcf\u7ec4\u7269\u54c1\u6709\u82e5\u5e72\u4e2a\uff0c\u540c\u4e00\u7ec4\u5185\u7684\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u3002 \u6bcf\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f vij\uff0c\u4ef7\u503c\u662f wij\uff0c\u5176\u4e2d i \u662f\u7ec4\u53f7\uff0cj \u662f\u7ec4\u5185\u7f16\u53f7\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c \u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff0c\u679a\u4e3e\u6bcf\u4e00\u7ec4\u7684\u7b2c\u51e0\u4e2a\u7269\u54c1\u88ab\u9009 #include<bits/stdc++.h> using namespace std; const int N=110; int f[N][N]; //\u53ea\u4ece\u524di\u7ec4\u7269\u54c1\u4e2d\u9009\uff0c\u5f53\u524d\u4f53\u79ef\u5c0f\u4e8e\u7b49\u4e8ej\u7684\u6700\u5927\u503c int v[N][N],w[N][N],s[N]; //v\u4e3a\u4f53\u79ef\uff0cw\u4e3a\u4ef7\u503c\uff0cs\u4ee3\u8868\u7b2ci\u7ec4\u7269\u54c1\u7684\u4e2a\u6570 int n,m,k; int main(){ cin>>n>>m; for(int i=1;i<=n;i++){ cin>>s[i]; for(int j=0;j<s[i];j++){ cin>>v[i][j]>>w[i][j]; //\u8bfb\u5165 } } for(int i=1;i<=n;i++){ for(int j=0;j<=m;j++){ f[i][j]=f[i-1][j]; //\u4e0d\u9009 for(int k=0;k<s[i];k++){ if(j>=v[i][k]) f[i][j]=max(f[i][j],f[i-1][j-v[i][k]]+w[i][k]); } } } cout<<f[n][m]<<endl; } #include <iostream> #include <algorithm> using namespace std; const int N = 110; int w[N][N],v[N][N],s[N]; int f[N][N]; int n,m; int main(void) { cin >> n >> m; for(int i = 1; i <= n ; i ++) { cin >> s[i]; for(int j = 1 ; j <= s[i]; j++) cin >> v[i][j] >> w[i][j]; } for(int i = 1; i <= n ; i++) for(int j = 0; j <= m ; j ++) { f[i][j] = f[i - 1][j]; // \u4e0d\u9009\u7684\u60c5\u51b5 for(int k = 1 ; k <= s[i] ; k ++) // \u679a\u4e3e\u9009\u7684\u60c5\u51b5 { if( j >= v[i][k]) f[i][j] = max(f[i][j] , f[i-1][j - v[i][k]] + w[i][k]); } } cout << f[n][m] << endl; return 0; } \u533a\u95f4DP \u6811\u5f62DP \u8ba1\u6570\u7c7bDP \u6570\u4f4d\u7edf\u8ba1DP \u72b6\u6001\u538b\u7f29DP \u8bb0\u5fc6\u5316\u641c\u7d22","title":"\u52a8\u6001\u89c4\u5212"},{"location":"algorithm/DP/#dp","text":"","title":"\u7ebf\u6027DP"},{"location":"algorithm/DP/#_1","text":"","title":"\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/DP/#01","text":"\u72b6\u6001\u8ba1\u7b97\u65f6 \uff0c\u6bcf\u4e2a\u72b6\u6001\u90fd\u6709\u9009\u6216\u4e0d\u9009\u4e24\u79cd\u60c5\u51b5 f[i][j] = max(f[i][j],f[i -1][j - v[i]] + w[i]); \u6709 NN \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u7b2c ii \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int n,m; int f[N][N]; int v[N],w[N]; int main(void) { cin >> n >> m; for(int i = 0;i<n;i++) cin >> v[i] >> w[i];// \u8f93\u5165\u6570\u636e for(int i = 1;i<=n;i++) for(int j = 0;j<=m;j++) { f[i][j] = f[i-1][j]; if( j >= v[i]) f[i][j] = max(f[i][j],f[i-1][j - v[i]] + w[i]); } cout << f[n][m] << endl; return 0; }","title":"01\u80cc\u5305"},{"location":"algorithm/DP/#_2","text":"\u6700\u6734\u7d20\u505a\u6cd5\u9700\u8981\u679a\u4e3ek\u7684\u6b21\u6570\uff08\u4e09\u7ef4\uff09 \u4f18\u5316\u540e\u53d8\u6210\u4e8c\u7ef4 \u6709 NN \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 \u7b2c ii \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int n,m; int f[N][N]; int v[N],w[N]; int main(void) { cin >> n >> m; for(int i = 1;i<=n;i++) cin >> v[i] >> w[i]; for(int i = 1;i<=n;i++) for(int j = 1;j<=m;j++) { f[i][j] = f[i-1][j]; if(j >= v[i]) f[i][j] = max(f[i][j],f[i][j -v[i]] + w[i]); } cout << f[n][m] << endl; return 0; }","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"algorithm/DP/#_3","text":"\u6709 NN \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f VV \u7684\u80cc\u5305\u3002 \u7b2c ii \u79cd\u7269\u54c1\u6700\u591a\u6709 sisi \u4ef6\uff0c\u6bcf\u4ef6\u4f53\u79ef\u662f vivi\uff0c\u4ef7\u503c\u662f wiwi\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u4f53\u79ef\u603b\u548c\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c \u76f4\u63a5\u679a\u4e3e\u6bcf\u6b21\u53d6\u5f97\u6570\u91cf\u5373\u53ef #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int n,m; int w[N],s[N],v[N]; int f[N][N]; int main(void) { cin >> n >> m; for(int i = 1;i <= n;i++) cin >> v[i] >> w[i] >> s[i]; for(int i = 1;i <= n;i++) for(int j = 0;j <=m;j++) for(int k= 0;k <= s[i] && j >= v[i] * k;k++) f[i][j] = max(f[i][j],f[i-1][j-v[i] * k] + w[i] * k); cout << f[n][m] << endl; return 0; }","title":"\u591a\u91cd\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/DP/#_4","text":"0<N\u226410000<N\u22641000 0<V\u226420000<V\u22642000 0<vi,wi,si\u22642000 \u5229\u7528\u4e8c\u8fdb\u5236\u4f18\u5316 #include <iostream> #include <algorithm> using namespace std; const int N = 25000,M = 2010; int n,m; int v[N],w[N]; int f[M]; int main(void) { cin >> n >> m; int cnt = 0; for(int i = 1;i<=n;i++) { int k = 1; int a,b,s; cin >> a >> b >> s; while(k<=s) { cnt++; v[cnt] = a*k; w[cnt] = b*k; s = s - k; k = k * 2; } /* \u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u628a \u4e00\u4e2a\u6574\u6570 s \u5212\u5206\u6210\u4e86\u4e8c\u8fdb\u5236\u7684\u6570\uff0c\u7136\u540e\u5229\u7528\u4e8c\u8fdb\u5236\u6570\u7684\u7ec4\u5408 \u53ef\u4ee5\u628as\u4e2a\u6570\u5206 \u6210 logs \u4e2a\u6570 \u7136\u540e\u5229\u7528\u8fd9 logs \u4e2a\u6570 \u53ef\u4ee5\u7ec4\u5408\u6210 0~s \u4e4b\u95f4\u7684\u4efb\u610f\u6570 \u5728\u8fd9\u4e2a\u9898\u610f\u4e2d\u5c31\u53ef\u4ee5\u628a \u53d6 0~s \u4e2a\u7684\u6240\u6709\u60c5\u51b5\u5305\u62ec\u4e86 \u8fd9\u6837\u5c31\u53ef\u4ee5\u8282\u7701\u4e86\u8bb8\u591a\u65f6\u95f4 \u7ecf\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u540e \u5c31\u4f1a\u4ea7\u751f \u76f8\u5f53\u4e8e 01 \u80cc\u5305\u7684\u95ee\u9898\u4e00\u6837 \u8bb8\u591a\u53ea\u80fd\u53d6\u4e00\u6b21\u7684\u6570\u636e \u6240\u4ee5\u6b64\u65f6\u5c31\u53ef\u4ee5\u5229\u7528 01 \u80cc\u5305\u4f18\u5316\u5bf9\u6b64\u65f6\u7684\u6240\u6709\u60c5\u51b5\u8fdb\u884c\u53d6 \u6700\u5927\u503c // \u603b\u800c\u8a00\u4e4b \u672c\u9898 \u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f \u5229\u7528\u4e8c\u8fdb\u5236\u4f18\u5316 \u628a s \u4e2a\u60c5\u51b5\u5206\u6210 logs \u4e2a \u5728\u5229\u7528 01 \u80cc\u5305 \u8fdb\u884c\u6700\u540e\u7684\u7ed3\u679c\u7684\u603b\u8fd0\u7b97 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a cnt \u8fd9\u4e2a\u6570\u7ec4\u5df2\u7ecf\u62a5\u542b\u4e86 \u5728\u6570\u7ec4\u4e2d\u53d6\u4efb\u610f\u4e2a\u6570\u5b57\u7684\u60c5\u51b5 */ if( s > 0) { cnt ++; v[cnt] = a*s; w[cnt] = b*s; } } n = cnt; for(int i = 1;i<=n;i++) for(int j = m;j>=v[i];j--) f[j] = max(f[j],f[j-v[i]] + w[i]); cout << f[m] << endl; return 0; }","title":"\u591a\u91cd\u80cc\u5305\u590d\u6742\u7248"},{"location":"algorithm/DP/#_5","text":"\u6709 N \u7ec4\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\u3002 \u6bcf\u7ec4\u7269\u54c1\u6709\u82e5\u5e72\u4e2a\uff0c\u540c\u4e00\u7ec4\u5185\u7684\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u3002 \u6bcf\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f vij\uff0c\u4ef7\u503c\u662f wij\uff0c\u5176\u4e2d i \u662f\u7ec4\u53f7\uff0cj \u662f\u7ec4\u5185\u7f16\u53f7\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u7269\u54c1\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa\u6700\u5927\u4ef7\u503c \u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff0c\u679a\u4e3e\u6bcf\u4e00\u7ec4\u7684\u7b2c\u51e0\u4e2a\u7269\u54c1\u88ab\u9009 #include<bits/stdc++.h> using namespace std; const int N=110; int f[N][N]; //\u53ea\u4ece\u524di\u7ec4\u7269\u54c1\u4e2d\u9009\uff0c\u5f53\u524d\u4f53\u79ef\u5c0f\u4e8e\u7b49\u4e8ej\u7684\u6700\u5927\u503c int v[N][N],w[N][N],s[N]; //v\u4e3a\u4f53\u79ef\uff0cw\u4e3a\u4ef7\u503c\uff0cs\u4ee3\u8868\u7b2ci\u7ec4\u7269\u54c1\u7684\u4e2a\u6570 int n,m,k; int main(){ cin>>n>>m; for(int i=1;i<=n;i++){ cin>>s[i]; for(int j=0;j<s[i];j++){ cin>>v[i][j]>>w[i][j]; //\u8bfb\u5165 } } for(int i=1;i<=n;i++){ for(int j=0;j<=m;j++){ f[i][j]=f[i-1][j]; //\u4e0d\u9009 for(int k=0;k<s[i];k++){ if(j>=v[i][k]) f[i][j]=max(f[i][j],f[i-1][j-v[i][k]]+w[i][k]); } } } cout<<f[n][m]<<endl; } #include <iostream> #include <algorithm> using namespace std; const int N = 110; int w[N][N],v[N][N],s[N]; int f[N][N]; int n,m; int main(void) { cin >> n >> m; for(int i = 1; i <= n ; i ++) { cin >> s[i]; for(int j = 1 ; j <= s[i]; j++) cin >> v[i][j] >> w[i][j]; } for(int i = 1; i <= n ; i++) for(int j = 0; j <= m ; j ++) { f[i][j] = f[i - 1][j]; // \u4e0d\u9009\u7684\u60c5\u51b5 for(int k = 1 ; k <= s[i] ; k ++) // \u679a\u4e3e\u9009\u7684\u60c5\u51b5 { if( j >= v[i][k]) f[i][j] = max(f[i][j] , f[i-1][j - v[i][k]] + w[i][k]); } } cout << f[n][m] << endl; return 0; }","title":"\u5206\u7ec4\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/DP/#dp_1","text":"","title":"\u533a\u95f4DP"},{"location":"algorithm/DP/#dp_2","text":"","title":"\u6811\u5f62DP"},{"location":"algorithm/DP/#dp_3","text":"","title":"\u8ba1\u6570\u7c7bDP"},{"location":"algorithm/DP/#dp_4","text":"","title":"\u6570\u4f4d\u7edf\u8ba1DP"},{"location":"algorithm/DP/#dp_5","text":"","title":"\u72b6\u6001\u538b\u7f29DP"},{"location":"algorithm/DP/#_6","text":"","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"algorithm/graph/","text":"\u56fe\u8bba\u7b97\u6cd5 \u6700\u77ed\u8def \u80fd\u7528dijkstra\u7684\u5c31\u522b\u7528spfa Dijkstra \u7b97\u6cd5 \u9898\u89e3 \u6734\u7d20\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8 // \u7a20\u5bc6\u56fe \u70b9\u5c11\u7ebf\u591a 1.\u5faa\u73af n \u6b21 2.\u627e\u5230\u4e00\u4e2a t \u7528\u6765\u4ee3\u8868\u5f53\u524d\u6240\u6709\u70b9\u5230\u76ee\u524d\u70b9\u7684\u6700\u77ed\u8ddd\u79bb 3.\u7528 t \u6765\u66f4\u65b0\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 550; int g[N][N]; int dist[N]; bool st[N]; int n,m; void dijkstra() { memset(dist,0x3f,sizeof dist); dist[1] = 0; for(int i = 0 ; i < n; i ++) { int t = -1; for(int j = 1; j <= n ; j ++) if(!st[j] && (t == -1 || dist[t] > dist[j])) t = j ; for(int j = 1 ;j <= n ; j ++) dist[j] = min(dist[j],dist[t] + g[t][j]); st[t] = true; } } int main(void) { memset(g,0x3f,sizeof g); cin >> n >> m ; while(m --) { int a,b,c; cin >> a >> b >> c; g[a][b] = min(g[a][b],c); } dijkstra(); if(dist[n] == 0x3f3f3f3f) cout << -1 << endl; else cout << dist[n] << endl; return 0; } \u4f18\u5316\u7248\u7684dijkstr \u7b97\u6cd5 \u7a00\u758f\u56fe \u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8 \u7528\u5806\u8fdb\u884c\u4f18\u5316 \u6bcf\u6b21\u53d6\u6700\u77ed\u503c\u7684\u65f6\u5019 \u53d6\u5806\u9876\u5143\u7d20 \u76f8\u5f53\u4e8e\u662f\u7701\u7565\u4e86\u6734\u7d20\u7248dijkstra \u7684\u627e\u5230\u8ddd\u79bb\u5f53\u524d\u70b9\u6700\u77ed\u8ddd\u79bb\u8fd9\u4e00\u6b65\uff1b\uff1b \u4ee3\u66ff\u4e0a\u8fb9\u7684\u7b2c\u4e00\u4e8c\u6b65 \u7136\u540e\u66f4\u65b0\u6240\u6709\u5806\u7684\u8ddd\u79bb \u7528\u4e00\u4e2a pair \u6570\u7ec4\u6765\u5b58\u50a8\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u548c\u5f53\u524d\u70b9\u7684\u7f16\u53f7 \u7528\u90bb\u63a5\u8868\u904d\u5386\u6240\u6709\u5230\u8fbe\u7684\u70b9 \u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad \u5982\u679c\u5c0f\u4e8e \u5e76\u4e14\u8be5\u503c\u5e76\u672a\u88ab\u4f7f\u7528\u8fc7 \u5373 st \u4e3a false \u53ef\u4ee5\u8fdb\u884c\u66f4\u65b0 \u5c31\u628a\u8be5\u503c\u548c\u8ddd\u79bb\u63a8\u8fdb heap \u6570\u7ec4\u4e2d \u8fd9\u91cc \u4e0e spfa \u7b97\u6cd5\u8fdb\u884c\u4e2a\u533a\u5206 dijsktra \u7b97\u6cd5\u4e00\u822c\u5728\u53d6\u5f97\u7f16\u53f7\u540e\u5c31\u8fdb\u884c\u5224\u65ad \u662f\u5426\u8fdb\u884c continue \u73af\u8282 spfa \u7b97\u6cd5 \u5219\u5728 for \u5faa\u73af\u548c if \u5faa\u73af \u4e4b\u540e\u5224\u65ad\u8be5\u503c\u662f\u5426\u4f7f\u7528\u8fc7 dijkstra\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u800cspfa\u5219\u4e00\u4e2a\u70b9\u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528 \u200b SPFA\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u4f46\u662f\u4e0d\u80fd\u5904\u7406\u6709\u8d1f\u6743\u56de\u8def\u7684\u56fe\uff1b\u800cDijkstra\u4e0d\u80fd\u5904\u7406\u5e26\u6709\u8d1f\u6743\u8fb9\u548c\u8d1f\u6743\u56de\u8def\u7684\u56fe\uff0c\u56e0\u4e3aDijkstra\u7b97\u6cd5\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u8d1f\u8fb9\u7684\u51fa\u73b0\u800c\u66f4\u65b0\u5df2\u7ecf\u8ba1\u7b97\u8fc7(\u6536\u5f55\u8fc7)\u7684\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff1b \u200b \u603b\u7ed3\u4e00\u4e0b\uff1aBellman-ford\u53ef\u4ee5\u5904\u7406\u4efb\u610f\u5e26\u8d1f\u6743\u8fb9\u548c\u8d1f\u6743\u73af\u7684\u56fe\uff0cSPFA\u53ef\u4ee5\u5904\u7406\u5e26\u8d1f\u6743\u8fb9\u7684\u56fe\uff0cDijkstra\u53ea\u80fd\u5904\u7406\u5e26\u6b63\u6743\u8fb9\u7684\u56fe\uff1b\u5f53\u7136\uff0c\u4ece\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6548\u7387\u6765\u8bb2\uff0c\u662f\u53cd\u8fc7\u6765\u7684\uff0chh #include <iostream> #include <algorithm> #include <queue> #include <cstring> using namespace std; typedef pair<int,int> PII; const int N = 1e6 + 10; int h[N],e[N],ne[N],w[N],idx; int dist[N]; bool st[N]; int n,m; void add(int a,int b,int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx ++; } void dijkstra() { memset(dist,0x3f,sizeof dist); priority_queue <PII,vector<PII>,greater<PII> >heap; dist[1] = 0; heap.push({0,1}); while(heap.size()) { auto t = heap.top(); heap.pop(); int ver = t.second; int s = t.first; if(st[ver]) continue; st[ver] = true; for(int i = h[ver]; i != -1 ; i = ne[i]) { int j = e[i]; if(dist[j] > dist[ver] + w[i]) { dist[j] = dist[ver] + w[i]; heap.push({dist[j],j}); } } } } int main(void) { cin >> n >> m ; memset(h,-1,sizeof h); while(m--) { int a,b,c; cin >> a >> b >> c ; add(a,b,c); } dijkstra(); if(dist[n] == 0x3f3f3f3f) cout << -1 << endl; else cout << dist[n] << endl; return 0; } Bellman_ford \u7b97\u6cd5 \u7528\u4e8e\u5904\u7406\u5b58\u5728\u8d1f\u6743\u8fb9\u7684\u73af\u8282 \u5e76\u4e14\u5b58\u5728 \u5224\u65ad\u81f3\u5c11\u5728\u51e0\u6761\u8fb9\u5b9e\u73b0 \u5229\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u50a8 \u7b2c\u4e00\u5c42 for \u5faa\u73af\u4ee3\u8868\u6700\u77ed\u51e0\u6761\u8fb9 \u63a5\u4e0b\u6765\u5bf9\u6240\u6709\u7684\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u7528 struct \u6765\u5bf9\u6bcf\u6761\u8fb9\u53d6\u6700\u77ed\u7684\u8def\u5f84 \u4e3a\u4e86\u907f\u514d\u51fa \u884c\u6bd4\u5bf9 #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 550,M = 10010; struct Edge { int a,b,c; }edges[M]; int n,m,k; int dist[N]; int last[N]; void bellman_ford() { memset(dist,0x3f,sizeof dist); dist[1] = 0; for(int i = 0 ; i < k ;i ++) { memcpy(last,dist,sizeof dist); for(int j = 0 ; j< m ; j ++) { auto e = edges[j]; dist[e.b] = min(dist[e.b], last[e.a] + e.c); } } } int main(void) { cin >> n >> m >> k; for(int i = 0;i<m;i++) { int x,y,z; cin >> x >> y >> z; edges[i] = {x,y,z}; } bellman_ford(); if (dist[n] > 0x3f3f3f3f / 2) puts(\"impossible\"); else printf(\"%d\\n\", dist[n]); return 0; } Spfa \u7b97\u6cd5 \u9898\u89e3 \u662f\u57fa\u4e8ebellman_ford \u7b97\u6cd5\u7684\u4e00\u79cd\u4f18\u5316 \u56e0\u4e3abellman \u7b97\u6cd5\u662f\u5bf9\u6240\u6709\u7684\u8fb9\u90fd\u8fdb\u884c\u4e86\u53d6\u6700\u77ed\u8ddd\u79bb \u800c Spfa \u7b97\u6cd5\u5219\u662f\u5229\u7528 \u961f\u5217 \u6765\u5b58\u50a8\u6bcf\u6b21\u53d6\u5f97\u5230\u7684 \u6700\u77ed\u8ddd\u79bb \u5e76\u7528\u8fd9\u4e2a \u8ddd\u79bb \u6765\u66f4\u65b0\u522b\u7684\u8ddd\u79bb bellman \u7b97\u6cd5 \u4fdd\u7559\u4e86\u6240\u6709\u5230\u8fd9\u4e2a\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4f46\u8fd9\u6837\u7684\u8bdd \u65e0\u7591\u4f1a\u6709\u4e00\u4e9b\u8fb9\u662f\u672a\u66fe\u7528\u8fc7\u7684 \u800c spfa \u7b97\u6cd5\u5c31\u662f\u53ea\u8bb0\u5f55\u4e86\u4f1a\u88ab\u66f4\u65b0\u7684\u8282\u70b9 \u5e76 \u7528\u8fd9\u4e2a\u70b9\u6765\u66f4\u65b0\u522b\u7684\u70b9 \u7528 for \u5faa\u73af \u6765\u904d\u5386\u6240\u6709\u4e0e\u5f53\u524d\u70b9\u6709\u63a5\u89e6\u7684\u6240\u6709\u70b9 \u7136\u540e\u7528\u961f\u5217\u5c06\u8be5\u70b9\u5b58\u4e0b\u6765 \u5728\u6bcf\u6b21\u904d\u5386\u961f\u5217\u4e2d\u7684\u70b9 \u4ee5\u6b64\u4e3a\u5ef6\u7eed\u4e0d\u65ad\u8fde\u63a5\u6240\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u70b9 \u5373\u8be5\u70b9\u7528\u5230\u4e86 \u5c31\u4f1a \u7ee7\u7eed\u66f4\u65b0\u5b83\u540e\u9762\u7684\u70b9 Bellman_ford\u7b97\u6cd5\u4f1a\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u4f46\u662f\u6709\u5f88\u591a\u7684\u8fb9\u904d\u5386\u4e86\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u6211\u4eec\u53ea\u7528\u904d\u5386\u90a3\u4e9b\u5230\u6e90\u70b9\u8ddd\u79bb\u53d8\u5c0f\u7684\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u5373\u53ef\uff0c\u53ea\u6709\u5f53\u4e00\u4e2a\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u66f4\u65b0\u4e86\uff0c\u8be5\u8282\u70b9\u624d\u4f1a\u5f97\u5230\u66f4\u65b0\uff1b\u56e0\u6b64\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u961f\u5217\u6bcf\u4e00\u6b21\u52a0\u5165\u8ddd\u79bb\u88ab\u66f4\u65b0\u7684\u7ed3\u70b9\u3002 \u5173\u4e8e\u4e3a\u4ec0\u4e48 \u6bcf\u6b21\u53ea\u4f1a\u8bb2\u4fee\u6539\u8fc7\u7684\u8fb9\u52a0\u5165\u8fdb\u53bb #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; const int N = 1e5 +10; int h[N],w[N],e[N],ne[N],idx; int dist[N]; bool st[N]; void add(int a,int b,int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++; } void spfa() { memset(dist,0x3f,sizeof dist); dist[1] = 0; queue<int>q; q.push(1); st[1] = true; while(q.size()) { int t = q.front(); q.pop(); st[t] = false; for(int i = h[t] ; i != -1 ; i = ne[i]) { int j = e[i]; if(dist[j] > dist[t] + w[i]) { dist[j] = dist[t] + w[i]; if(!st[j]) // \u8fd9\u91cc\u53ea\u4f1a\u5b58\u653e\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u7684\u8fb9 \uff0c\uff0c \u5982\u679c\u88ab\u66f4\u65b0\u4e86 \u4e14\u4e0d\u518d\u961f\u5217\u4e2d\u624d\u4f1a\u88ab\u7ee7\u7eed\u6dfb\u52a0 { q.push(j); st[j] = true; } } } } } int main(void) { int n,m; cin >> n >> m; memset(h,-1,sizeof h); while(m --) { int a,b,c; cin >> a>> b >> c; add(a,b,c); } spfa(); if(dist[n] == 0x3f3f3f3f) cout << \"impossible\" << endl; else cout << dist[n] << endl; return 0; } Foyld \u7b97\u6cd5 \u7528 \u90bb\u63a5\u8868\u6765\u5b58\u50a8 \u4f46\u662f \u4e3a\u4ec0\u4e48\u8fd9\u6837 \u521d\u59cb\u5316 \u56e0\u4e3a g \u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u70b9\u5230\u70b9\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u5f53 i == j \u7684\u65f6\u5019 \u8ddd\u79bb\u4e3a 0 \uff0c\u6240\u4ee5\u521d\u59cb\u5316\u4e3a 0\uff1b k i j g[i][j] = min(g[i][j] , g[i][k] + g[k][j]); #include <iostream> #include <algorithm> using namespace std; const int N = 210,INF = 1e9; int g[N][N]; int n,m,q; void Floyd() { for(int k = 1 ;k <= n ;k ++) for(int i = 1 ;i <= n ; i ++) for(int j = 1; j <= n ;j ++) g[i][j] = min(g[i][j] , g[i][k] + g[k][j]); } int main(void) { cin >> n >> m >> q; for(int i = 1; i <= n ; i ++) for(int j = 1; j <= n ; j ++) if(i == j) g[i][j] = 0; else g[i][j] = INF; while(m --) { int a,b,c; cin >> a >> b >> c; g[a][b] = min(g[a][b] , c); } Floyd(); while(q -- ) { int x,y; cin >> x >> y; if(g[x][y] > INF / 2) cout <<\"impossible\" << endl; else cout << g[x][y] << endl; } return 0; } \u6700\u5c0f\u751f\u6210\u6811 Prim \u7b97\u6cd5 \u5904\u7406\u7a20\u5bc6\u56fe \u4e3b\u8981\u662f\u5229\u7528 \u6269\u5927\u96c6\u5408 \u7684\u601d\u60f3\u6765\u505a\u7684 \uff0c\u4e0d\u65ad\u627e\u5230\u8ddd\u79bb\u5f53\u524d\u96c6\u5408\u6700\u8fd1\u7684\u70b9\uff0c\u5e76\u628a\u4ed6\u52a0\u5165 \u4e0e dijkstra \u7b97\u6cd5\u7c7b\u4f3c \u679a\u4e3e n \u6b21 \u627e\u5230\u8ddd\u79bb\u96c6\u5408\u6700\u8fd1\u7684\u70b9 t \u7528 t \u6765\u66f4\u65b0\u5176\u4ed6\u70b9\u5230\u96c6\u5408\u7684\u8ddd\u79bb \u5229\u7528 res \u8bb0\u5f55\u6240\u6709\u4e0d\u662f\u7b2c\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u7684\u6743\u91cd\u548c \u5f53\u51fa\u73b0\u4e0d\u662f\u7b2c\u4e00\u6761\u8fb9\u5e76\u4e14\u6700\u8fd1\u8ddd\u79bb\u4e5f\u662f\u8d8b\u8fd1\u4e8e\u6b63\u65e0\u7a77\u65f6\uff0c\u76f4\u63a5\u7ed3\u675f \u8fd4\u56de false \u6700\u540e\u4f7f\u7528 g[t] [j] \u65f6\uff0c\u5173\u4e8e\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b83\u7684\u539f\u56e0\u662f\uff0c\u9700\u8981\u627e\u5230\u5f53\u524d\u70b9\u8ddd\u79bb\u96c6\u5408\u6700\u8fd1\u7684\u70b9\uff0c\u53c8\u56e0\u4e3a dist \u672c\u8eab\u4fdd\u5b58\u7684\u5c31\u662f\u5f53\u524d\u70b9\u5230\u7b2c\u4e00\u4e2a\u70b9\u5373\u96c6\u5408\u7684\u8ddd\u79bb\uff0c\u518d\u52a0\u4e0a\u524d\u9762\u6bcf\u6b21\u5faa\u73af\u627e\u5230\u7684\u90fd\u662f\u8ddd\u79bb\u4e0a\u4e00\u4e2a\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u6240\u4ee5\u8bf4 \u5f53 dist \u4e0d\u662f\u6700\u8fd1\u7684\u8ddd\u79bb\u65f6 \u6700\u8fd1\u7684\u8ddd\u79bb\u5c31\u662f g \uff0c\uff0c\u56e0\u4e3a\u4e0a\u9762\u6bcf\u6b21\u7684\u90fd\u662f\u53d6\u5230\u4e86\u8ddd\u79bb\u7684\u6700\u5c0f\u503c #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 550,INF = 0x3f3f3f3f; const int M = 1e5+10; int g[N][N]; bool st[N]; int dist[N]; int res; int n,m; int Prim() { memset(dist,0x3f,sizeof dist); int res = 0 ; for(int i = 0 ; i < n ; i ++) { int t = -1; for(int j = 1; j <= n ; j++) { if(!st[j] && (t == -1 || dist[t] > dist[j])) t = j; } if(i && dist[t] == INF) return INF; if(i) res += dist[t]; for (int j = 1; j <= n; j ++ ) dist[j] = min(dist[j], g[t][j]); // \u8bb0\u5f55\u5230\u96c6\u5408\u7684\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u8ddf\u6700\u77ed\u8def\u4e00\u6837\u5230\u8d77\u70b9\u7684\u8ddd\u79bb st[t] = true; } return res; } int main(void) { cin >> n >> m; memset(g,0x3f,sizeof g); while(m--) { int a,b,c; cin >> a>> b >> c; g[a][b] = g[b][a] = min(g[a][b],c); } int res = Prim(); if(res == 0x3f3f3f3f) cout << \"impossible\" << endl; else cout << res << endl; return 0; } Kruskal \u7b97\u6cd5 \u5904\u7406\u7a00\u758f\u56fe \u901a\u8fc7\u7ed3\u6784\u4f53**\u6309\u7167\u6743\u91cd\u6765\u8fdb\u884c\u6392\u5e8f ** \u6392\u5e8f\u4fdd\u8bc1\u662f\u6700\u5c0f\u751f\u6210\u6811 \u5229\u7528\u5e76\u67e5\u96c6\u548c\u7ed3\u6784\u4f53\u6765\u5b58\u50a8\u8fb9\u548c\u6743\u91cd \u6bcf\u6b21\u5982\u679c\u4e24\u70b9\u4e4b\u95f4\u6ca1\u6709\u8054\u7cfb\u5219\u5229\u7528\u5e76\u67e5\u96c6 \u8fdb\u884c \u4e24\u4e24 \u76f8\u52a0 \u8bb0\u5f55\u6743\u91cd\u548c count \u5982\u679c cnt < n-1 \u5219\u4e0d\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5426\u5219\u8f93\u51fa\u6743\u503c #include < iostream> #include <algorithm> using namespace std; const int N = 1e5 +10 , M = 200010; const int INF = 0x3f3f3f3f; int p[N]; int n,m; struct Edges { int a,b,w; bool operator < (const Edges & W)const { return w < W.w; } }edges[M]; int find(int x) { if(x != p[x]) p[x] = find(p[x]); else return p[x]; } int kruskal() { int cnt = 0 , res = 0; sort(edges,edges + m); for(int i = 1; i <= n ; i ++) p[i] = i; for(int i = 0 ; i < m ; i ++) { int a = edges[i].a , b = edges[i].b , w = edges[i].w; a = find(a),b = find(b); if(a != b) { p[a] = b; res += w; cnt ++; } } if(cnt < n-1) return INF; return res; } int main(void) { cin >> n >> m; for(int i = 0 ;i < m ; i ++) { int a,b,c; cin >> a >> b >> c; edges[i] = {a,b,c}; } int t = kruskal(); if(t == INF) cout <<\"impossible\" << endl; else cout << t <<endl; return 0; } \u4e8c\u5206\u56fe **\u5308\u7259\u5229\u7b97\u6cd5 ** \u5224\u65ad\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d \u6839\u672c\u539f\u7406 \u662f\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9 \u7136\u540e \u53bb\u627e\u5230\u8be5\u70b9\u6307\u5411\u7684\u70b9\uff0c\u518d\u8ddf\u7740\u5224\u65ad \u8be5\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u522b\u7684\u70b9\u6240\u5339\u914d\u6216\u662f \u88ab\u522b\u7684\u70b9\u5339\u914d\u7684\u90a3\u4e2a\u70b9 \u662f\u5426\u53ef\u4ee5\u5339\u914d\u522b\u7684\u70b9 \u5982\u679c \u53ef\u4ee5 \u5c31\u4f1a\u66ff\u4ee3\u4e0a\u4e00\u4e2a\u5339\u914d\u7684\u70b9 \u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b \u4e3b\u8981\u5c31\u662f match \u6570\u7ec4 \u548c st \u6570\u7ec4 for \u5faa\u73af\u91cc\u9762\u6bcf\u6b21\u90fd\u4f1a\u521d\u59cb\u5316\u6240\u6709\u7684\u4e3a false \u539f\u56e0\u662f \u8ba9\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8fdb\u884c\u5b8c\u7f8e\u7684\u9012\u5f52 \u4fdd\u8bc1\u4e86 \u6700\u4f73\u7b54\u6848\u7684\u51fa\u73b0\uff08\u628a\u6240\u6709\u59b9\u5b50\u6e05\u7a7a\uff09\u5373\u521d\u59cb\u5316 #include <iostream> #include <cstring> using namespace std; const int N = 550,M = 100010; int n1,n2,m; bool st[N]; int h[N],e[M],ne[M]; int idx; int match[N]; void add(int a,int b) { e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } bool find(int x) { for(int i = h[x]; i != -1 ; i = ne[i]) { int j = e[i]; if(!st[j]) { st[j] = true; if(match[j] == 0 || find(match[j])) { match[j] = x; return true; } } } return false; } int main(void) { cin >> n1 >> n2 >> m; memset(h,-1,sizeof h); while(m--) { int a,b; cin >> a >> b; add(a,b); } int res = 0; for(int i = 1;i<=n1;i++) { memset(st,false,sizeof st); if(find(i)) res ++; } cout << res << endl; return 0; } \u67d3\u8272\u6cd5\u5224\u65ad \u662f\u5426\u4e3a\u4e8c\u5206\u56fe \u5229\u7528\u67d3\u8272 1\uff0c2 \u6765\u7ed9\u70b9\u505a\u4e0a\u6807\u8bb0\uff0c\u5e76\u5229\u7528 dfs \u7684\u8fc7\u7a0b\u6765\u8fdb\u884c\u6df1\u5ea6\u7684\u5224\u65ad \u5982\u679c bool \u7c7b\u578b\u7684 dfs \u8fd4\u56de false \u7684\u8bdd\uff0c\u4ee3\u8868\u67d3\u8272\u5931\u8d25\uff0c\u5373\u5b58\u5728\u51b2\u7a81\uff0c\u4e0d\u6ee1\u8db3\u4e8c\u5206\u56fe\u7684\u6027\u8d28 \u5982\u679c\u5f53\u524d\u70b9\u6ca1\u6709\u67d3\u8272\uff0c\u5c31\u5229\u7528 dfs \u628a\u4ed6\u67d3\u6210 3 - x \u8272\uff0c\u5982\u679c\u6709\u989c\u8272 \u5e76\u4e14\u76f8\u7b49\u7684\u8bdd \u76f4\u63a5\u8fd4\u56de false #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10,M = 200010; int h[N],e[M],ne[M],idx; int color[N]; int n,m; void add(int a,int b) { e[idx] = b; ne[idx] = h[a]; h[a] = idx ++; } bool dfs(int u,int x) { color[u] = x; for(int i = h[u] ; i != -1 ; i = ne[i]) { int j = e[i]; if(!color[j]) { if(!dfs(j,3-x)) return false; } else if(color[j] == x) return false; } return true; } int main(void) { cin >> n >> m ; memset(h, -1, sizeof h); while(m --) { int a,b; cin >> a >> b; add(a,b),add(b,a); } bool flag = true; for(int i = 1 ;i <= n ; i ++) { if(!color[i]) { if(!dfs(i,1)) { flag = false; break; } } } if(flag) cout << \"Yes\" << endl; else cout << \"No\" << endl; return 0; } Topsort Dfs Bfs topsort \u62d3\u6251\u6392\u5e8f \u5229\u7528\u5165\u5ea6\u6765\u8fdb\u884c\u5224\u65ad \u627e\u5230\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u70b9\u628a\u5176\u52a0\u5165\u961f\u5217\u4e2d \u6700\u597d\u5229\u7528\u624b\u52a8\u6a21\u62df\u961f\u5217 \u8fd9\u6837\u4f1a\u5bf9\u7ed3\u679c\u7684\u8f93\u51fa\u8d77\u5230\u7b80\u5316\u4f5c\u7528 \u5728\u5faa\u73af\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5165\u5ea6\u4e3a 1 \u7684\u60c5\u51b5\u51fa\u73b0\u65f6\uff0c\u4e5f\u4f1a\u628a\u8be5\u503c\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u56e0\u4e3a\u4ed6\u540c\u6837\u53ef\u4ee5\u6ee1\u8db3\u62d3\u6251\u7684\u6761\u4ef6 Dfs \u6df1\u5ea6\u4f18\u5148\u904d\u5386 dfs \u4e3b\u8981\u662f\u4e00\u4e2a\u5229\u7528\u9012\u5f52\u7684\u8fc7\u7a0b \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u53ef\u4ee5\u5904\u7406\u6392\u5217\u6570\u5b57\u7b49\u95ee\u9898 Bfs \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 bfs \u4e3b\u8981\u5229\u7528\u961f\u5217\u6765\u8fdb\u884c\u5b58\u50a8\uff0c\u5f53\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u6bcf\u6b21\u63a8\u5165\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u6700\u540e\u627e\u5230\u6700\u77ed\u7684\u8def\u5f84\u6216\u8005\u662f\u8ff7\u5bab\u7684\u51fa\u8def","title":"\u56fe\u8bba"},{"location":"algorithm/graph/#_1","text":"","title":"\u56fe\u8bba\u7b97\u6cd5"},{"location":"algorithm/graph/#_2","text":"\u80fd\u7528dijkstra\u7684\u5c31\u522b\u7528spfa","title":"\u6700\u77ed\u8def"},{"location":"algorithm/graph/#dijkstra","text":"\u9898\u89e3 \u6734\u7d20\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8 // \u7a20\u5bc6\u56fe \u70b9\u5c11\u7ebf\u591a 1.\u5faa\u73af n \u6b21 2.\u627e\u5230\u4e00\u4e2a t \u7528\u6765\u4ee3\u8868\u5f53\u524d\u6240\u6709\u70b9\u5230\u76ee\u524d\u70b9\u7684\u6700\u77ed\u8ddd\u79bb 3.\u7528 t \u6765\u66f4\u65b0\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 550; int g[N][N]; int dist[N]; bool st[N]; int n,m; void dijkstra() { memset(dist,0x3f,sizeof dist); dist[1] = 0; for(int i = 0 ; i < n; i ++) { int t = -1; for(int j = 1; j <= n ; j ++) if(!st[j] && (t == -1 || dist[t] > dist[j])) t = j ; for(int j = 1 ;j <= n ; j ++) dist[j] = min(dist[j],dist[t] + g[t][j]); st[t] = true; } } int main(void) { memset(g,0x3f,sizeof g); cin >> n >> m ; while(m --) { int a,b,c; cin >> a >> b >> c; g[a][b] = min(g[a][b],c); } dijkstra(); if(dist[n] == 0x3f3f3f3f) cout << -1 << endl; else cout << dist[n] << endl; return 0; }","title":"Dijkstra \u7b97\u6cd5"},{"location":"algorithm/graph/#dijkstr","text":"\u7a00\u758f\u56fe \u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8 \u7528\u5806\u8fdb\u884c\u4f18\u5316 \u6bcf\u6b21\u53d6\u6700\u77ed\u503c\u7684\u65f6\u5019 \u53d6\u5806\u9876\u5143\u7d20 \u76f8\u5f53\u4e8e\u662f\u7701\u7565\u4e86\u6734\u7d20\u7248dijkstra \u7684\u627e\u5230\u8ddd\u79bb\u5f53\u524d\u70b9\u6700\u77ed\u8ddd\u79bb\u8fd9\u4e00\u6b65\uff1b\uff1b \u4ee3\u66ff\u4e0a\u8fb9\u7684\u7b2c\u4e00\u4e8c\u6b65 \u7136\u540e\u66f4\u65b0\u6240\u6709\u5806\u7684\u8ddd\u79bb \u7528\u4e00\u4e2a pair \u6570\u7ec4\u6765\u5b58\u50a8\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u548c\u5f53\u524d\u70b9\u7684\u7f16\u53f7 \u7528\u90bb\u63a5\u8868\u904d\u5386\u6240\u6709\u5230\u8fbe\u7684\u70b9 \u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad \u5982\u679c\u5c0f\u4e8e \u5e76\u4e14\u8be5\u503c\u5e76\u672a\u88ab\u4f7f\u7528\u8fc7 \u5373 st \u4e3a false \u53ef\u4ee5\u8fdb\u884c\u66f4\u65b0 \u5c31\u628a\u8be5\u503c\u548c\u8ddd\u79bb\u63a8\u8fdb heap \u6570\u7ec4\u4e2d \u8fd9\u91cc \u4e0e spfa \u7b97\u6cd5\u8fdb\u884c\u4e2a\u533a\u5206 dijsktra \u7b97\u6cd5\u4e00\u822c\u5728\u53d6\u5f97\u7f16\u53f7\u540e\u5c31\u8fdb\u884c\u5224\u65ad \u662f\u5426\u8fdb\u884c continue \u73af\u8282 spfa \u7b97\u6cd5 \u5219\u5728 for \u5faa\u73af\u548c if \u5faa\u73af \u4e4b\u540e\u5224\u65ad\u8be5\u503c\u662f\u5426\u4f7f\u7528\u8fc7 dijkstra\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u800cspfa\u5219\u4e00\u4e2a\u70b9\u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528 \u200b SPFA\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u4f46\u662f\u4e0d\u80fd\u5904\u7406\u6709\u8d1f\u6743\u56de\u8def\u7684\u56fe\uff1b\u800cDijkstra\u4e0d\u80fd\u5904\u7406\u5e26\u6709\u8d1f\u6743\u8fb9\u548c\u8d1f\u6743\u56de\u8def\u7684\u56fe\uff0c\u56e0\u4e3aDijkstra\u7b97\u6cd5\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u8d1f\u8fb9\u7684\u51fa\u73b0\u800c\u66f4\u65b0\u5df2\u7ecf\u8ba1\u7b97\u8fc7(\u6536\u5f55\u8fc7)\u7684\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff1b \u200b \u603b\u7ed3\u4e00\u4e0b\uff1aBellman-ford\u53ef\u4ee5\u5904\u7406\u4efb\u610f\u5e26\u8d1f\u6743\u8fb9\u548c\u8d1f\u6743\u73af\u7684\u56fe\uff0cSPFA\u53ef\u4ee5\u5904\u7406\u5e26\u8d1f\u6743\u8fb9\u7684\u56fe\uff0cDijkstra\u53ea\u80fd\u5904\u7406\u5e26\u6b63\u6743\u8fb9\u7684\u56fe\uff1b\u5f53\u7136\uff0c\u4ece\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u6548\u7387\u6765\u8bb2\uff0c\u662f\u53cd\u8fc7\u6765\u7684\uff0chh #include <iostream> #include <algorithm> #include <queue> #include <cstring> using namespace std; typedef pair<int,int> PII; const int N = 1e6 + 10; int h[N],e[N],ne[N],w[N],idx; int dist[N]; bool st[N]; int n,m; void add(int a,int b,int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx ++; } void dijkstra() { memset(dist,0x3f,sizeof dist); priority_queue <PII,vector<PII>,greater<PII> >heap; dist[1] = 0; heap.push({0,1}); while(heap.size()) { auto t = heap.top(); heap.pop(); int ver = t.second; int s = t.first; if(st[ver]) continue; st[ver] = true; for(int i = h[ver]; i != -1 ; i = ne[i]) { int j = e[i]; if(dist[j] > dist[ver] + w[i]) { dist[j] = dist[ver] + w[i]; heap.push({dist[j],j}); } } } } int main(void) { cin >> n >> m ; memset(h,-1,sizeof h); while(m--) { int a,b,c; cin >> a >> b >> c ; add(a,b,c); } dijkstra(); if(dist[n] == 0x3f3f3f3f) cout << -1 << endl; else cout << dist[n] << endl; return 0; }","title":"\u4f18\u5316\u7248\u7684dijkstr \u7b97\u6cd5"},{"location":"algorithm/graph/#bellman_ford","text":"\u7528\u4e8e\u5904\u7406\u5b58\u5728\u8d1f\u6743\u8fb9\u7684\u73af\u8282 \u5e76\u4e14\u5b58\u5728 \u5224\u65ad\u81f3\u5c11\u5728\u51e0\u6761\u8fb9\u5b9e\u73b0 \u5229\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u50a8 \u7b2c\u4e00\u5c42 for \u5faa\u73af\u4ee3\u8868\u6700\u77ed\u51e0\u6761\u8fb9 \u63a5\u4e0b\u6765\u5bf9\u6240\u6709\u7684\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u7528 struct \u6765\u5bf9\u6bcf\u6761\u8fb9\u53d6\u6700\u77ed\u7684\u8def\u5f84 \u4e3a\u4e86\u907f\u514d\u51fa \u884c\u6bd4\u5bf9 #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 550,M = 10010; struct Edge { int a,b,c; }edges[M]; int n,m,k; int dist[N]; int last[N]; void bellman_ford() { memset(dist,0x3f,sizeof dist); dist[1] = 0; for(int i = 0 ; i < k ;i ++) { memcpy(last,dist,sizeof dist); for(int j = 0 ; j< m ; j ++) { auto e = edges[j]; dist[e.b] = min(dist[e.b], last[e.a] + e.c); } } } int main(void) { cin >> n >> m >> k; for(int i = 0;i<m;i++) { int x,y,z; cin >> x >> y >> z; edges[i] = {x,y,z}; } bellman_ford(); if (dist[n] > 0x3f3f3f3f / 2) puts(\"impossible\"); else printf(\"%d\\n\", dist[n]); return 0; }","title":"Bellman_ford \u7b97\u6cd5"},{"location":"algorithm/graph/#spfa","text":"\u9898\u89e3 \u662f\u57fa\u4e8ebellman_ford \u7b97\u6cd5\u7684\u4e00\u79cd\u4f18\u5316 \u56e0\u4e3abellman \u7b97\u6cd5\u662f\u5bf9\u6240\u6709\u7684\u8fb9\u90fd\u8fdb\u884c\u4e86\u53d6\u6700\u77ed\u8ddd\u79bb \u800c Spfa \u7b97\u6cd5\u5219\u662f\u5229\u7528 \u961f\u5217 \u6765\u5b58\u50a8\u6bcf\u6b21\u53d6\u5f97\u5230\u7684 \u6700\u77ed\u8ddd\u79bb \u5e76\u7528\u8fd9\u4e2a \u8ddd\u79bb \u6765\u66f4\u65b0\u522b\u7684\u8ddd\u79bb bellman \u7b97\u6cd5 \u4fdd\u7559\u4e86\u6240\u6709\u5230\u8fd9\u4e2a\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4f46\u8fd9\u6837\u7684\u8bdd \u65e0\u7591\u4f1a\u6709\u4e00\u4e9b\u8fb9\u662f\u672a\u66fe\u7528\u8fc7\u7684 \u800c spfa \u7b97\u6cd5\u5c31\u662f\u53ea\u8bb0\u5f55\u4e86\u4f1a\u88ab\u66f4\u65b0\u7684\u8282\u70b9 \u5e76 \u7528\u8fd9\u4e2a\u70b9\u6765\u66f4\u65b0\u522b\u7684\u70b9 \u7528 for \u5faa\u73af \u6765\u904d\u5386\u6240\u6709\u4e0e\u5f53\u524d\u70b9\u6709\u63a5\u89e6\u7684\u6240\u6709\u70b9 \u7136\u540e\u7528\u961f\u5217\u5c06\u8be5\u70b9\u5b58\u4e0b\u6765 \u5728\u6bcf\u6b21\u904d\u5386\u961f\u5217\u4e2d\u7684\u70b9 \u4ee5\u6b64\u4e3a\u5ef6\u7eed\u4e0d\u65ad\u8fde\u63a5\u6240\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u70b9 \u5373\u8be5\u70b9\u7528\u5230\u4e86 \u5c31\u4f1a \u7ee7\u7eed\u66f4\u65b0\u5b83\u540e\u9762\u7684\u70b9 Bellman_ford\u7b97\u6cd5\u4f1a\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u4f46\u662f\u6709\u5f88\u591a\u7684\u8fb9\u904d\u5386\u4e86\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u6211\u4eec\u53ea\u7528\u904d\u5386\u90a3\u4e9b\u5230\u6e90\u70b9\u8ddd\u79bb\u53d8\u5c0f\u7684\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u5373\u53ef\uff0c\u53ea\u6709\u5f53\u4e00\u4e2a\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u66f4\u65b0\u4e86\uff0c\u8be5\u8282\u70b9\u624d\u4f1a\u5f97\u5230\u66f4\u65b0\uff1b\u56e0\u6b64\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u961f\u5217\u6bcf\u4e00\u6b21\u52a0\u5165\u8ddd\u79bb\u88ab\u66f4\u65b0\u7684\u7ed3\u70b9\u3002 \u5173\u4e8e\u4e3a\u4ec0\u4e48 \u6bcf\u6b21\u53ea\u4f1a\u8bb2\u4fee\u6539\u8fc7\u7684\u8fb9\u52a0\u5165\u8fdb\u53bb #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; const int N = 1e5 +10; int h[N],w[N],e[N],ne[N],idx; int dist[N]; bool st[N]; void add(int a,int b,int c) { e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++; } void spfa() { memset(dist,0x3f,sizeof dist); dist[1] = 0; queue<int>q; q.push(1); st[1] = true; while(q.size()) { int t = q.front(); q.pop(); st[t] = false; for(int i = h[t] ; i != -1 ; i = ne[i]) { int j = e[i]; if(dist[j] > dist[t] + w[i]) { dist[j] = dist[t] + w[i]; if(!st[j]) // \u8fd9\u91cc\u53ea\u4f1a\u5b58\u653e\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u7684\u8fb9 \uff0c\uff0c \u5982\u679c\u88ab\u66f4\u65b0\u4e86 \u4e14\u4e0d\u518d\u961f\u5217\u4e2d\u624d\u4f1a\u88ab\u7ee7\u7eed\u6dfb\u52a0 { q.push(j); st[j] = true; } } } } } int main(void) { int n,m; cin >> n >> m; memset(h,-1,sizeof h); while(m --) { int a,b,c; cin >> a>> b >> c; add(a,b,c); } spfa(); if(dist[n] == 0x3f3f3f3f) cout << \"impossible\" << endl; else cout << dist[n] << endl; return 0; }","title":"Spfa \u7b97\u6cd5"},{"location":"algorithm/graph/#foyld","text":"\u7528 \u90bb\u63a5\u8868\u6765\u5b58\u50a8 \u4f46\u662f \u4e3a\u4ec0\u4e48\u8fd9\u6837 \u521d\u59cb\u5316 \u56e0\u4e3a g \u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u70b9\u5230\u70b9\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u5f53 i == j \u7684\u65f6\u5019 \u8ddd\u79bb\u4e3a 0 \uff0c\u6240\u4ee5\u521d\u59cb\u5316\u4e3a 0\uff1b k i j g[i][j] = min(g[i][j] , g[i][k] + g[k][j]); #include <iostream> #include <algorithm> using namespace std; const int N = 210,INF = 1e9; int g[N][N]; int n,m,q; void Floyd() { for(int k = 1 ;k <= n ;k ++) for(int i = 1 ;i <= n ; i ++) for(int j = 1; j <= n ;j ++) g[i][j] = min(g[i][j] , g[i][k] + g[k][j]); } int main(void) { cin >> n >> m >> q; for(int i = 1; i <= n ; i ++) for(int j = 1; j <= n ; j ++) if(i == j) g[i][j] = 0; else g[i][j] = INF; while(m --) { int a,b,c; cin >> a >> b >> c; g[a][b] = min(g[a][b] , c); } Floyd(); while(q -- ) { int x,y; cin >> x >> y; if(g[x][y] > INF / 2) cout <<\"impossible\" << endl; else cout << g[x][y] << endl; } return 0; }","title":"Foyld \u7b97\u6cd5"},{"location":"algorithm/graph/#_3","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"algorithm/graph/#prim","text":"\u5904\u7406\u7a20\u5bc6\u56fe \u4e3b\u8981\u662f\u5229\u7528 \u6269\u5927\u96c6\u5408 \u7684\u601d\u60f3\u6765\u505a\u7684 \uff0c\u4e0d\u65ad\u627e\u5230\u8ddd\u79bb\u5f53\u524d\u96c6\u5408\u6700\u8fd1\u7684\u70b9\uff0c\u5e76\u628a\u4ed6\u52a0\u5165 \u4e0e dijkstra \u7b97\u6cd5\u7c7b\u4f3c \u679a\u4e3e n \u6b21 \u627e\u5230\u8ddd\u79bb\u96c6\u5408\u6700\u8fd1\u7684\u70b9 t \u7528 t \u6765\u66f4\u65b0\u5176\u4ed6\u70b9\u5230\u96c6\u5408\u7684\u8ddd\u79bb \u5229\u7528 res \u8bb0\u5f55\u6240\u6709\u4e0d\u662f\u7b2c\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u7684\u6743\u91cd\u548c \u5f53\u51fa\u73b0\u4e0d\u662f\u7b2c\u4e00\u6761\u8fb9\u5e76\u4e14\u6700\u8fd1\u8ddd\u79bb\u4e5f\u662f\u8d8b\u8fd1\u4e8e\u6b63\u65e0\u7a77\u65f6\uff0c\u76f4\u63a5\u7ed3\u675f \u8fd4\u56de false \u6700\u540e\u4f7f\u7528 g[t] [j] \u65f6\uff0c\u5173\u4e8e\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b83\u7684\u539f\u56e0\u662f\uff0c\u9700\u8981\u627e\u5230\u5f53\u524d\u70b9\u8ddd\u79bb\u96c6\u5408\u6700\u8fd1\u7684\u70b9\uff0c\u53c8\u56e0\u4e3a dist \u672c\u8eab\u4fdd\u5b58\u7684\u5c31\u662f\u5f53\u524d\u70b9\u5230\u7b2c\u4e00\u4e2a\u70b9\u5373\u96c6\u5408\u7684\u8ddd\u79bb\uff0c\u518d\u52a0\u4e0a\u524d\u9762\u6bcf\u6b21\u5faa\u73af\u627e\u5230\u7684\u90fd\u662f\u8ddd\u79bb\u4e0a\u4e00\u4e2a\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u6240\u4ee5\u8bf4 \u5f53 dist \u4e0d\u662f\u6700\u8fd1\u7684\u8ddd\u79bb\u65f6 \u6700\u8fd1\u7684\u8ddd\u79bb\u5c31\u662f g \uff0c\uff0c\u56e0\u4e3a\u4e0a\u9762\u6bcf\u6b21\u7684\u90fd\u662f\u53d6\u5230\u4e86\u8ddd\u79bb\u7684\u6700\u5c0f\u503c #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 550,INF = 0x3f3f3f3f; const int M = 1e5+10; int g[N][N]; bool st[N]; int dist[N]; int res; int n,m; int Prim() { memset(dist,0x3f,sizeof dist); int res = 0 ; for(int i = 0 ; i < n ; i ++) { int t = -1; for(int j = 1; j <= n ; j++) { if(!st[j] && (t == -1 || dist[t] > dist[j])) t = j; } if(i && dist[t] == INF) return INF; if(i) res += dist[t]; for (int j = 1; j <= n; j ++ ) dist[j] = min(dist[j], g[t][j]); // \u8bb0\u5f55\u5230\u96c6\u5408\u7684\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u8ddf\u6700\u77ed\u8def\u4e00\u6837\u5230\u8d77\u70b9\u7684\u8ddd\u79bb st[t] = true; } return res; } int main(void) { cin >> n >> m; memset(g,0x3f,sizeof g); while(m--) { int a,b,c; cin >> a>> b >> c; g[a][b] = g[b][a] = min(g[a][b],c); } int res = Prim(); if(res == 0x3f3f3f3f) cout << \"impossible\" << endl; else cout << res << endl; return 0; }","title":"Prim \u7b97\u6cd5"},{"location":"algorithm/graph/#kruskal","text":"\u5904\u7406\u7a00\u758f\u56fe \u901a\u8fc7\u7ed3\u6784\u4f53**\u6309\u7167\u6743\u91cd\u6765\u8fdb\u884c\u6392\u5e8f ** \u6392\u5e8f\u4fdd\u8bc1\u662f\u6700\u5c0f\u751f\u6210\u6811 \u5229\u7528\u5e76\u67e5\u96c6\u548c\u7ed3\u6784\u4f53\u6765\u5b58\u50a8\u8fb9\u548c\u6743\u91cd \u6bcf\u6b21\u5982\u679c\u4e24\u70b9\u4e4b\u95f4\u6ca1\u6709\u8054\u7cfb\u5219\u5229\u7528\u5e76\u67e5\u96c6 \u8fdb\u884c \u4e24\u4e24 \u76f8\u52a0 \u8bb0\u5f55\u6743\u91cd\u548c count \u5982\u679c cnt < n-1 \u5219\u4e0d\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5426\u5219\u8f93\u51fa\u6743\u503c #include < iostream> #include <algorithm> using namespace std; const int N = 1e5 +10 , M = 200010; const int INF = 0x3f3f3f3f; int p[N]; int n,m; struct Edges { int a,b,w; bool operator < (const Edges & W)const { return w < W.w; } }edges[M]; int find(int x) { if(x != p[x]) p[x] = find(p[x]); else return p[x]; } int kruskal() { int cnt = 0 , res = 0; sort(edges,edges + m); for(int i = 1; i <= n ; i ++) p[i] = i; for(int i = 0 ; i < m ; i ++) { int a = edges[i].a , b = edges[i].b , w = edges[i].w; a = find(a),b = find(b); if(a != b) { p[a] = b; res += w; cnt ++; } } if(cnt < n-1) return INF; return res; } int main(void) { cin >> n >> m; for(int i = 0 ;i < m ; i ++) { int a,b,c; cin >> a >> b >> c; edges[i] = {a,b,c}; } int t = kruskal(); if(t == INF) cout <<\"impossible\" << endl; else cout << t <<endl; return 0; }","title":"Kruskal \u7b97\u6cd5"},{"location":"algorithm/graph/#_4","text":"","title":"\u4e8c\u5206\u56fe"},{"location":"algorithm/graph/#_5","text":"\u5224\u65ad\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d \u6839\u672c\u539f\u7406 \u662f\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9 \u7136\u540e \u53bb\u627e\u5230\u8be5\u70b9\u6307\u5411\u7684\u70b9\uff0c\u518d\u8ddf\u7740\u5224\u65ad \u8be5\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u522b\u7684\u70b9\u6240\u5339\u914d\u6216\u662f \u88ab\u522b\u7684\u70b9\u5339\u914d\u7684\u90a3\u4e2a\u70b9 \u662f\u5426\u53ef\u4ee5\u5339\u914d\u522b\u7684\u70b9 \u5982\u679c \u53ef\u4ee5 \u5c31\u4f1a\u66ff\u4ee3\u4e0a\u4e00\u4e2a\u5339\u914d\u7684\u70b9 \u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b \u4e3b\u8981\u5c31\u662f match \u6570\u7ec4 \u548c st \u6570\u7ec4 for \u5faa\u73af\u91cc\u9762\u6bcf\u6b21\u90fd\u4f1a\u521d\u59cb\u5316\u6240\u6709\u7684\u4e3a false \u539f\u56e0\u662f \u8ba9\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8fdb\u884c\u5b8c\u7f8e\u7684\u9012\u5f52 \u4fdd\u8bc1\u4e86 \u6700\u4f73\u7b54\u6848\u7684\u51fa\u73b0\uff08\u628a\u6240\u6709\u59b9\u5b50\u6e05\u7a7a\uff09\u5373\u521d\u59cb\u5316 #include <iostream> #include <cstring> using namespace std; const int N = 550,M = 100010; int n1,n2,m; bool st[N]; int h[N],e[M],ne[M]; int idx; int match[N]; void add(int a,int b) { e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } bool find(int x) { for(int i = h[x]; i != -1 ; i = ne[i]) { int j = e[i]; if(!st[j]) { st[j] = true; if(match[j] == 0 || find(match[j])) { match[j] = x; return true; } } } return false; } int main(void) { cin >> n1 >> n2 >> m; memset(h,-1,sizeof h); while(m--) { int a,b; cin >> a >> b; add(a,b); } int res = 0; for(int i = 1;i<=n1;i++) { memset(st,false,sizeof st); if(find(i)) res ++; } cout << res << endl; return 0; }","title":"**\u5308\u7259\u5229\u7b97\u6cd5 **"},{"location":"algorithm/graph/#_6","text":"\u662f\u5426\u4e3a\u4e8c\u5206\u56fe \u5229\u7528\u67d3\u8272 1\uff0c2 \u6765\u7ed9\u70b9\u505a\u4e0a\u6807\u8bb0\uff0c\u5e76\u5229\u7528 dfs \u7684\u8fc7\u7a0b\u6765\u8fdb\u884c\u6df1\u5ea6\u7684\u5224\u65ad \u5982\u679c bool \u7c7b\u578b\u7684 dfs \u8fd4\u56de false \u7684\u8bdd\uff0c\u4ee3\u8868\u67d3\u8272\u5931\u8d25\uff0c\u5373\u5b58\u5728\u51b2\u7a81\uff0c\u4e0d\u6ee1\u8db3\u4e8c\u5206\u56fe\u7684\u6027\u8d28 \u5982\u679c\u5f53\u524d\u70b9\u6ca1\u6709\u67d3\u8272\uff0c\u5c31\u5229\u7528 dfs \u628a\u4ed6\u67d3\u6210 3 - x \u8272\uff0c\u5982\u679c\u6709\u989c\u8272 \u5e76\u4e14\u76f8\u7b49\u7684\u8bdd \u76f4\u63a5\u8fd4\u56de false #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10,M = 200010; int h[N],e[M],ne[M],idx; int color[N]; int n,m; void add(int a,int b) { e[idx] = b; ne[idx] = h[a]; h[a] = idx ++; } bool dfs(int u,int x) { color[u] = x; for(int i = h[u] ; i != -1 ; i = ne[i]) { int j = e[i]; if(!color[j]) { if(!dfs(j,3-x)) return false; } else if(color[j] == x) return false; } return true; } int main(void) { cin >> n >> m ; memset(h, -1, sizeof h); while(m --) { int a,b; cin >> a >> b; add(a,b),add(b,a); } bool flag = true; for(int i = 1 ;i <= n ; i ++) { if(!color[i]) { if(!dfs(i,1)) { flag = false; break; } } } if(flag) cout << \"Yes\" << endl; else cout << \"No\" << endl; return 0; }","title":"\u67d3\u8272\u6cd5\u5224\u65ad"},{"location":"algorithm/graph/#topsort-dfs-bfs","text":"","title":"Topsort Dfs Bfs"},{"location":"algorithm/graph/#topsort","text":"\u5229\u7528\u5165\u5ea6\u6765\u8fdb\u884c\u5224\u65ad \u627e\u5230\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u70b9\u628a\u5176\u52a0\u5165\u961f\u5217\u4e2d \u6700\u597d\u5229\u7528\u624b\u52a8\u6a21\u62df\u961f\u5217 \u8fd9\u6837\u4f1a\u5bf9\u7ed3\u679c\u7684\u8f93\u51fa\u8d77\u5230\u7b80\u5316\u4f5c\u7528 \u5728\u5faa\u73af\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5165\u5ea6\u4e3a 1 \u7684\u60c5\u51b5\u51fa\u73b0\u65f6\uff0c\u4e5f\u4f1a\u628a\u8be5\u503c\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u56e0\u4e3a\u4ed6\u540c\u6837\u53ef\u4ee5\u6ee1\u8db3\u62d3\u6251\u7684\u6761\u4ef6","title":"topsort \u62d3\u6251\u6392\u5e8f"},{"location":"algorithm/graph/#dfs","text":"dfs \u4e3b\u8981\u662f\u4e00\u4e2a\u5229\u7528\u9012\u5f52\u7684\u8fc7\u7a0b \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u53ef\u4ee5\u5904\u7406\u6392\u5217\u6570\u5b57\u7b49\u95ee\u9898","title":"Dfs \u6df1\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"algorithm/graph/#bfs","text":"\u5bbd\u5ea6\u4f18\u5148\u904d\u5386 bfs \u4e3b\u8981\u5229\u7528\u961f\u5217\u6765\u8fdb\u884c\u5b58\u50a8\uff0c\u5f53\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u6bcf\u6b21\u63a8\u5165\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u6700\u540e\u627e\u5230\u6700\u77ed\u7684\u8def\u5f84\u6216\u8005\u662f\u8ff7\u5bab\u7684\u51fa\u8def","title":"Bfs \u5bbd\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"algorithm/math/","text":"\u6570\u8bba \u8d28\u6570 \u7ea6\u6570 \u6b27\u62c9\u51fd\u6570 \u6b27\u51e0\u91cc\u5f97 \u9ad8\u65af\u6d88\u5143 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u5bb9\u65a5\u539f\u7406 \u535a\u5f08\u8bba \u7ec4\u5408\u6570\u6c42\u6cd5 \u9884\u5904\u7406\u4e4b\u540e\u8fdb\u884c\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O\uff081\uff09\uff1b 1\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u8f83\u591a\uff0c\u5e76\u4e14\u7ed9\u5b9a ab \u4e0d\u5927\u7684\u503c\uff0c \u53ef\u4ee5\u5229\u7528\u9012\u63a8\u8fdb\u884c \u9884\u5904\u7406 \uff0c\u5904\u7406\u51fa \u4ece C11 \u5230 Cab \u7684\u503c n2 \u5229\u7528\u4e86\u516c\u5f0f $$ C[a][b] = c[a-1][b] + c[a-1][b-1] $$ 1\u2264n\u2264100001\u2264n\u226410000, 1\u2264b\u2264a\u22642000 #include <iostream> #include <algorithm> using namespace std; const int mod = 1e9 + 7; const int N = 2010; int c[N][N]; void init() { c[1][1] = 1; for(int i = 0;i< N ; i ++) for(int j = 0; j <= i ; j++) if(!j) c[i][j] = 1; else c[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod; } int main(void) { init(); int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << c[a][b] << endl; } return 0; } 2\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u4e0d\u7b97\u7279\u522b\u591a\uff0c\u5e76\u4e14\u7ed9\u5b9a ab \u7684\u503c\u8f83\u5927\u7684\u503c \uff0c\u53ef\u4ee5\u5229\u7528\u7ec4\u5408\u6570\u7684\u9006\u63a8\uff08\u4e0a\u4e0b\u9636\u4e58\uff09 \u65b9\u5f0f\uff0c \u9884\u5904\u7406 \u51fa\u6765 \u5206\u5b50\u7684\u9636\u4e58\u548c\u5206\u6bcd\u7684\u9636\u4e58\u7684\u9006\u5143\uff0c\u7136\u540e\u76f4\u63a5\u5229\u7528\u516c\u5f0f\u8f93\u51fa res \u5373\u53ef nlogn $$ C[a][b] = a! / (b! * (a - b)!) $$ 1\u2264n\u2264100001\u2264n\u226410000, 1\u2264b\u2264a\u2264105 #include <iostream> #include <algorithm> using namespace std; typedef long long LL; const int mod = 1e9 + 7; const int N = 1e5 + 10; int fact[N],infact[N]; int qmi(int a,int k,int p) { int res = 1 % p; while(k) { if(k & 1) res =(LL) res * a % p; a = (LL) a * a % p; k = k >> 1; } return res; } int main(void) { fact[0] = infact[0] = 1; for(int i = 1; i< N ; i ++) { fact[i] = (LL)i * fact[i-1] % mod; infact[i] = (LL)infact[i - 1] * qmi(i,mod-2,mod) % mod; } int n; cin >> n; while(n --) { int a,b; cin >> a >> b; cout << (LL)fact[a] * infact[b] % mod * infact[a-b] % mod<< endl; } return 0; } 3\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u4e0d\u591a\uff0c\u7ed9\u51fa ab \u7684\u503c\u7279\u522b\u5927\u7684\u503c \uff0c\u53ef\u4ee5\u5229\u7528 lucase \u5b9a\u5f8b\u6765\u6c42\uff0c Cab = Ca%pb%p * Ca/pb/p \uff1b\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u70b9\u4e3b\u8981\u662f \u8fd4\u56de lucase \u5b9a\u5f8b\u7684\u503c\u5fc5\u987b\u65f6 lucasa/p,b/p \u56e0\u4e3a \u53ef\u80fd\u518d ab \u9664\u4ee5 p \u4e4b\u540e\u7684\u5230\u7684\u503c\u4ecd\u7136\u5927\u4e8e\u5927\u4e8ep\uff0c\u8fd9\u6837\u7684\u8bdd\u6c42 Cab \u53ef\u80fd\u4f1a\u51fa\u73b0\u9519\u8bef\uff1b \u6c42 Cab \u65f6\u5229\u7528\u7684\u516c\u5f0f\u662f\u5206\u6bcd\u5230\u5206\u5b50\u7684\u9636\u4e58\u6bd4\u4e0a\u5206\u5b50\u4ece\u4e00\u5230\u5b83\u672c\u8eab\u7684\u9636\u4e58\u5229\u7528\u9006\u5143\u6765\u6c42 $$ Cba=a!/b!(a\u2212b)!=(a\u2212b+1)\u00d7(a\u2212b+2)\u00d7\u2026\u00d7a/b! $$ #include <iostream> #include <algorithm> using namespace std; typedef long long LL; int qmi(int a, int k, int p) { int res = 1; while (k) { if (k & 1) res = (LL)res * a % p; a = (LL)a * a % p; k >>= 1; } return res; } int C(int a, int b, int p) { if (b > a) return 0; int res = 1; for (int i = 1, j = a; i <= b; i ++, j -- ) { res = (LL)res * j % p; res = (LL)res * qmi(i, p - 2, p) % p; } return res; } int lucas(LL a, LL b, int p) { if (a < p && b < p) return C(a, b, p); return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p; } int main() { int n; cin >> n; while (n -- ) { LL a, b; int p; cin >> a >> b >> p; cout << lucas(a, b, p) << endl; } return 0; } 4\uff0c \u5bf9\u4e8e\u6240\u6c42\u7684\u503c\u4e0d\u8fdb\u884c \u53d6\u6a21\u7684\u8fd0\u7b97 \u5206\u4e3a\u4e09\u6b65\u8d70\uff0c\u7b2c\u4e00\u6b65\u7528\u8d28\u6570\u7b5b\u6cd5\uff0c\u7b5b\u51fa\u524dn\u4e2a\u6570\u4e2d\u7684\u8d28\u6570\uff0c\u7b2c\u4e8c\u6b65\uff0c\u5229\u7528\u9664\u6cd5\u6c42\u51fa\u6bcf\u4e2a\u6570\u8d28\u56e0\u6570\u7684\u500d\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5229\u7528\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u6c42\u51fa\u6700\u7ec8p\u7684\u7ed3\u679c \u4e0a\u9762\u7684\u6570\u7684\u9636\u4e58\u548c\u4e0b\u9762\u4e24\u4e2a\u6570\u7684\u9636\u4e58\u90fd\u53ef\u4ee5\u7528\u6570\u5b66\u57fa\u672c\u5b9a\u7406\u6765\u5206\u89e3 \u7136\u540e\u518d\u4e0a\u4e0b\u518d\u53bb\u6389\u76f8\u540c\u7684\u6307\u6570\u518d\u76f8\u4e58\u5c31\u884c #include <iostream> #include <algorithm> #include <vector> using namespace std; const int N = 5010; int primes[N]; bool st[N]; int cnt; int sum[N]; void get_primes(int n) { for(int i = 2;i<=n;i++) { if(!st[i]) primes[cnt++] = i; for(int j = 0;primes[j] <=n/i;j++) { st[primes[j] * i] = true; if(i % primes[j] == 0) break; } } } int get(int x,int p) { int res = 0; while(x) { res += x/p; x /= p; // \u4e00\u76f4\u628a p \u7684 k \u6b21\u65b9\u4e5f\u53bb\u6389 } return res; } vector<int> mul(vector<int> a,int b) { vector<int> c; int t = 0; for(int i = 0;i<a.size();i++) { t = t + a[i] *b; c.push_back(t%10); t = t/10; } while(t) { c.push_back(t%10); t = t /10; } return c; } int main(void) { int a,b; cin >> a>> b; get_primes(a); // \u7b5b\u9009\u51fa\u4e86\u8d28\u6570 for(int i = 0;i < cnt;i++) { int p = primes[i]; sum[i] = get(a,p) - get(a-b,p) - get(b,p);// \u8fd9\u91cc\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u5b58\u5728\u7684\u8d28\u6570 \u5e76\u9664\u53bb \u5f97\u5230\u9664\u4e4b\u540e\u7684\u8d28\u6570\u7684\u6570\u91cf\uff1b\uff1b } vector<int> res; res.push_back(1); for(int i = 0;i<cnt;i++) for(int j = 0;j<sum[i];j++) res = mul(res,primes[i]); // \u8fd9\u91cc\u8fdb\u884c\u76f8\u4e58\uff1b\uff1b for(int i = res.size() -1; i>=0;i--) cout << res[i]; cout << endl; return 0; } \u8d28\u6570 \u8bd5\u9664\u6cd5\u6c42\u8d28\u6570 \u53ef\u4ee5\u5229\u7528 n/i \u6765\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u7ea6\u6570\u90fd\u662f \u4e00\u5bf9\u4e00\u5bf9 \u7684\u51fa\u73b0\u7684\uff0cd \u80fd\u6574\u9664 n \uff0cn/d \u4e5f\u80fd\u6574\u9664 n \uff0c\u6240\u4ee5\u8bf4\u5c31\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u628a n \u6362\u6210 n/i \u6765\u7f29\u5c0f\u8303\u56f4 \uff1a \u5982\u679c n/i \u4e4b\u540e\u5b58\u5728\u6811\u4f7f x \u4e0d\u4e3a\u8d28\u6570\uff0c\u90a3\u4e48\uff0c\u5728 n/i \u4e4b\u524d\u4e00\u5b9a\u4e5f\u5b58\u5728\u8fd9\u6837\u7684\u6570 #include <iostream> #include <algorithm> using namespace std; bool check(int x) { if(x == 2 ) return true; if(x == 1 || x == 0) return false; for(int i = 2; i <= x / i ; i ++) { if(x % i == 0) return false; } return true; } int main(void) { int n; cin >> n; while(n --) { int x; cin >> x; if(check(x)) cout << \"Yes\" << endl; else cout <<\"No\" << endl; } return 0; } \u5206\u89e3\u8d28\u56e0\u6570 \u7531\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u53ef\u4ee5\u77e5\u9053\uff0c\u4efb\u4f55\u4e00\u4e2a\u6570\u90fd\u53ef\u4ee5\u5206\u89e3\u4e3a\u8d28\u6570\u7684\u6307\u6570\u5f62\u5f0f\u7684\u4e58\u79ef\u548c #include <iostream> #include <cstring> #include <algorithm> using namespace std; void get_primes(int x) { for(int i =2 ; i <= x / i ; i ++) { if(x%i == 0) { int s = 0; while( x % i == 0) { s++; x = x / i; } cout << i << \" \" << s << endl; } } if(x > 1) cout << x <<\" \" << 1 << endl; cout << endl; } int main() { int n; cin >> n; while(n--) { int x; cin >> x; get_primes(x); } return 0; } \u7b5b\u8d28\u6570 \u6734\u7d20\u505a\u6cd5\u662f\u7b5b\u6389\u6240\u6709 \u6570 \u540e\u9762\u7684\u6570 \u57c3\u5f0f\u7b5b\u6cd5\u662f\u7b5b\u6389\u6240\u6709 \u8d28\u6570 \u540e\u9762\u7684\u6570 \u7ebf\u6027\u7b5b\u6cd5\u662f\u901a\u8fc7 \u8d28\u56e0\u5b50\u6765\u7b5b\u6389\u6240\u6709\u8d28\u6570 \u540e\u9762\u7684\u6570 1e7 \u4f1a\u6bd4\u4e0a\u4e00\u4e2a\u5feb\u4e00\u500d \u7ebf\u6027\u7b5b\u6cd5 \u5224\u65ad\u6761\u4ef6 if \u6210\u7acb\u65f6\u4fdd\u8bc1\u4e86 i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u662f pj \uff0c\u540c\u65f6 i*pj \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e5f\u662f pj \u5f53 if \u6761\u4ef6\u4e0d\u6210\u7acb\u65f6\uff0c\u4fdd\u8bc1\u4e86 i*pj \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u662f pj\uff1b\u4e14 pj \u4e00\u5b9a\u5c0f\u4e8e i \u7684\u6240\u6709\u8d28\u56e0\u5b50 \u6bcf\u4e2a\u5408\u6570\u90fd\u4f1a\u6709\u4e00\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u5f53 i \u679a\u4e3e\u5230 x/i \u7684\u65f6\u5019\uff0cx \u4e00\u5b9a\u4f1a\u88ab\u7b5b\u6389 #include <iostream> #include <algorithm> using namespace std; const int N = 1e6 +10; bool st[N]; int primes[N],cnt; void get_primes(int n) { for(int i = 2; i <= n ; i++) { if(!st[i]) primes[cnt ++] = i; for(int j = 0 ; primes[j] <= n/i ; j ++) { st[i * primes[j]] = true; if(i % primes[j] == 0) break; } } } int main(void) { int n; cin >> n; get_primes(n); cout << cnt << endl; return 0; } \u7ea6\u6570 \u8bd5\u9664\u6cd5\u6c42\u7ea6\u6570 \u53ef\u4ee5\u5229\u7528 i != n/i \u6765\u8fdb\u884c\u4f18\u5316 \uff0c\u56e0\u4e3a\u8d28\u6570\u662f\u4e00\u5bf9\u4e00\u5bf9\u7684\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fd9\u4e2a\u5f0f\u5b50\u8fdb\u884c\u63d0\u524d\u7684\u5224\u65ad\uff0c\u5f97\u5230\u5927\u4e8e n/i \u7684\u7ea6\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u9632\u6b62\u51fa\u73b0\u5e73\u65b9\u6570\u76f8\u540c\u7684\u60c5\u51b5 #include <iostream> #include <algorithm> using namespace std; void get_divisors(int x) { vector<int> res ; for(int i = 1 ; i <= x/ i; i ++) { if(x % i ==0) { res.push_back(i); if(i != x/i) res.push_back(x/i); } } sort(res.begin(),res.end()); for(auto x : res) cout << x << \" \" ; cout << endl; } int main(void) { int n; cin >> n; while(n --) { int x; cin >> x; get_divisors(x); } return 0; } \u7ea6\u6570\u4e2a\u6570 \u4e00\u4e2a\u6570\u53ef\u4ee5\u6839\u636e\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u5212\u5206\u4e4b\u540e\uff0c\u7ea6\u6570\u7684\u4e2a\u6570\u5c31\u662f \u6240\u6709\u6307\u6570\u9879+1 \u7684\u4e58\u79ef\u548c\uff1b \u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u6bcf\u4e00\u4e2a\u6570\u4e5f\u90fd\u53ef\u4ee5\u5229\u7528\u7b97\u672f\u57fa\u672c\u5b9a\u91cc\u8fdb\u884c\u5212\u5206\uff0c\u5f97\u5230\u4e0d\u540c\u7684\u8d28\u6570\u7684\u6307\u6570\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c +1 #include <iostream> #include <algorithm> #include <unordered_map> using namespace std; const int mod = 1e9 + 7; int n; unordered_map<int,int>primes; void get(int x) { for(int i = 2; i <= x/ i; i++) { if(x % i == 0) { while(x % i == 0) primes[i]++,x/=i; } } if(x > 1) primes[x] ++; } int main(void) { cin >> n; while(n --) { int x; cin >> x; get(x); } long long res = 1; for(auto prime : primes) res = (long long ) res * (prime.second + 1) % mod; cout << res << endl; return 0; } \u7ea6\u6570\u4e4b\u548c \u4e00\u4e2a\u6570\u53ef\u4ee5\u6839\u636e\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u5212\u5206\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8d28\u6570\u7684\u4ece\u96f6\u6b21\u65b9\u5230\u8fd9\u4e2a\u8d28\u6570\u6307\u6570\u7684\u4e58\u79ef\u548c\u518d\u76f8\u4e58\u4e4b\u540e\u7684\u5230\u7ea6\u6570\u7684\u4e4b\u548c \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u53ef\u4ee5\u5229\u7528\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u4e0a\u9762\u7684\u4e58\u79ef\u5f0f\uff0c\u4e58\u5f00\u4e4b\u540e\u4ece\u96f6\u6b21\u65b9\u5230\u4ed6\u6307\u6570\u6b21\u65b9\u7684\u6240\u6709\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\uff0c\u53c8\u56e0\u4e3a\u662f\u4e58\u79ef\u5f0f\u6240\u4ee5\u4f1a\u8fdb\u884c\u7d2f\u52a0\u4ece\u800c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c \u4ece0\u6b21\u65b9\u5230b\u6b21\u65b9\u7684\u4e58\u79ef t = (t * a + 1)\u5faa\u73af b \u6b21\uff0ct \u4ece 1 \u5f00\u59cb #include <iostream> #include <unordered_map> #include <algorithm> using namespace std; typedef long long LL; const int mod = 1e9 +7; unordered_map<int,int> primes; void get(int x) { for(int i = 2;i <= x/i;i++) { while(x%i == 0) { x = x / i; primes[i]++; } } if(x > 1) primes[x] ++; } int main(void) { int n; cin >> n; while(n--) { int x; cin >> x; get(x); } LL res = 1; for(auto prime : primes) { LL a = prime.first; LL b = prime.second; LL t = 1; while(b -- ) t = (t * a + 1) % mod; // Important;; res = res * t %mod; } cout << res << endl; return 0; } \u6700\u5927\u516c\u7ea6\u6570 d \u80fd\u6574\u9664 a\uff0cd \u80fd\u6574\u9664 b\uff0cd \u5c31\u80fd\u6574\u9664 a+b\uff0cd \u5c31\u80fd\u6574\u9664 ax+by \u56e0\u6b64 a \u548c b \u7684\u6700\u5927\u516c\u7ea6\u6570\u5c31\u7b49\u4e0e b \u548c a%b \u7684\u6700\u5927\u516c\u7ea6\u6570 \u56e0\u4e3a a %b \u53ef\u4ee5\u770b\u6210 a - c*b \u518d\u7531\u4e0a\u9762\u7684\u5f0f\u5b50\u5f97\u51fa\u7ed3\u679c\u5373\u53ef #include <iostream> #include <algorithm> using namespace std; int gcd(int a,int b) { return b ? gcd(b,a%b) : a; } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << gcd(a,b) <<endl; } return 0; } \u6700\u5c0f\u516c\u500d\u6570 \u5c31\u662f a*b / gcd(a,b); #include <iostream> #include <algorithm> using namespace std; int gcd(int a,int b) { return b ? gcd(b,a%b) : a; } int lcm(int a,int b) { return a * b / gcd(a,b); } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << lcm(a,b) <<endl; } return 0; } **\u6b27\u62c9\u51fd\u6570 ** #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL oula(int x) { LL res = x; for(int i = 2;i <= x/i;i++) { if(x% i == 0) { while(x % i == 0) { x = x/i; } res = (LL) res / i * (i-1); } } if(x > 1) res = (LL) res / x *(x-1); return res; } int main(void) { int n; cin>> n; while(n--) { int x; cin >> x; cout << oula(x) <<endl; } return 0; } \u5bb9\u65a5\u539f\u7406 \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570 \u5f53\u8be5\u6570\u4e3a\u8d28\u6570\u7684\u65f6\u5019\uff0c\u8be5\u6570\u7684\u6b27\u62c9\u51fd\u6570\u4e3a n-1\uff1b \u7ebf\u6027\u7b5b\u65f6\uff0c\u82e5 pj \u662f pj*i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u65f6\uff0c\u7531\u6b27\u62c9\u5b9a\u7406\u53ef\u4ee5\u77e5\u9053\u8be5\u6700\u5c0f\u8d28\u56e0\u5b50\u4e00\u5b9a\u4e58\u8fc7\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06 e[i] * pj \u5373\u53ef\uff1b \u82e5 pj \u4e0d\u662f pj*i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u65f6 \u9700\u8981\u52a0\u4e0a pj * (pj - 1) / pj \u6240\u4ee5\u5f97\u5230 e[i] * (pj - 1); \u5feb\u901f\u5e42 \u628a a \u7684 k \u6b21\u65b9\u4e0a\u9762\u7684 k \u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u7684\u6570 \uff0c\u7136\u540e\u5229\u7528\u4e8c\u8fdb\u5236\u7684\u6570\u6765\u8fdb\u884c\u76f8\u4e58\u6c42\u89e3\u6700\u7ec8\u7684 ans \u5229\u7528\u5faa\u73af\u6bcf\u6b21\u4f7f a \u76f8\u4e58\u53d8\u6210\u6307\u6570\u5e73\u65b9\u5f0f\uff0c\u540c\u65f6\u6307\u6570 k \u4ece\u7b2c\u96f6\u4f4d\u5f00\u59cb\u8fdb\u884c\u5411\u524d\u8d70\uff0c\u5982\u679c\u672b\u5c3e\u7b49\u4e8e 1 \u7684\u8bdd\uff0c\u5c31\u628a res * a \u76f8\u5f53\u4e8e\u4e86 a \u7684\u591a\u5c11\u6b21\u65b9\u76f8\u4e58\u8fdb\u884c #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL qmi(int a,int k,int p) { LL res = 1; while(k) { if(k & 1) res = (LL)res * a %p; a = (LL)a*a % p; k = k >> 1; } return res; } int main(void) { int n; cin >> n; while(n--) { int a,k,p; cin >> a >> k >> p; cout << qmi(a,k,p) << endl; } return 0; } \u5feb\u901f\u5e42\u6c42\u9006\u5143 \u5feb\u901f\u5e42\u6c42\u9006\u5143\uff0c\u5f53 b \u548c p \u4e92\u8d28\u7684\u65f6\u5019\uff0c\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230 b \u7684 -2 \u6b21\u65b9\u5c31\u662f b \u7684\u9006\u5143 #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL qmi(int a,int k,int p) { LL res = 1; while(k) { if(k & 1) res = (LL)res * a %p; a = (LL)a*a % p; k = k >> 1; } return res; } int main(void) { int n; cin >> n; while(n--) { int a,p; cin >> a >> p; LL res = qmi(a,p-2,p); if(a % p == 0) cout << \"impossible\" << endl; else cout << res << endl; } return 0; } \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \u6c42\u51fa x \u5c31\u53ef\u4ee5\u5f97\u5230 \u9006\u5143\u4e86 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u5229\u7528\u6700\u5927\u516c\u7ea6\u6570\u6765\u8f97\u8f6c\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c \u5f53 b \u4e0d\u4e3a 0 \u7684\u65f6\u5019\u5c31\u53ef\u7ee7\u7eed\u8fdb\u884c a%b \uff1b \u7ed9\u5b9a nn \u5bf9\u6b63\u6574\u6570 ai,biai,bi\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u6570\uff0c\u6c42\u51fa\u4e00\u7ec4 xi,yixi,yi\uff0c\u4f7f\u5176\u6ee1\u8db3 ai\u00d7xi+bi\u00d7yi=gcd(ai,bi)ai\u00d7xi+bi\u00d7yi=gcd(ai,bi)\u3002 \u7ed9\u51fa a,b \u6c42\u51fa x,y #include <iostream> #include <algorithm> using namespace std; int exgcd(int a,int b,int &x,int &y) { if(b == 0) { x = 1 , y = 0; return a; } int d = exgcd(b,a%b,y,x); y -= a/b * x; return d; } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; int x,y; int d = exgcd(a,b,x,y); cout << x<<\" \" << y << endl; } return 0; } \u8f93\u5165\u89c4\u6a21\u572810\u76845\u6b21\u65b9\u4ee5\u5185\uff0c\u53ef\u4ee5\u7528 cin \u548c scanf \u5dee\u522b\u4e0d\u5927 \u5927\u4e8e 10 \u7684 5 \u6b21\u65b9\u4e4b\u540e\uff0c\u7528 scanf \u53ef\u4ee5\u6bd4 cin \u5feb\u4e00\u500d\u5de6\u53f3","title":"\u6570\u8bba"},{"location":"algorithm/math/#_1","text":"\u8d28\u6570 \u7ea6\u6570 \u6b27\u62c9\u51fd\u6570 \u6b27\u51e0\u91cc\u5f97 \u9ad8\u65af\u6d88\u5143 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u5bb9\u65a5\u539f\u7406 \u535a\u5f08\u8bba \u7ec4\u5408\u6570\u6c42\u6cd5 \u9884\u5904\u7406\u4e4b\u540e\u8fdb\u884c\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O\uff081\uff09\uff1b 1\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u8f83\u591a\uff0c\u5e76\u4e14\u7ed9\u5b9a ab \u4e0d\u5927\u7684\u503c\uff0c \u53ef\u4ee5\u5229\u7528\u9012\u63a8\u8fdb\u884c \u9884\u5904\u7406 \uff0c\u5904\u7406\u51fa \u4ece C11 \u5230 Cab \u7684\u503c n2 \u5229\u7528\u4e86\u516c\u5f0f $$ C[a][b] = c[a-1][b] + c[a-1][b-1] $$ 1\u2264n\u2264100001\u2264n\u226410000, 1\u2264b\u2264a\u22642000 #include <iostream> #include <algorithm> using namespace std; const int mod = 1e9 + 7; const int N = 2010; int c[N][N]; void init() { c[1][1] = 1; for(int i = 0;i< N ; i ++) for(int j = 0; j <= i ; j++) if(!j) c[i][j] = 1; else c[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod; } int main(void) { init(); int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << c[a][b] << endl; } return 0; } 2\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u4e0d\u7b97\u7279\u522b\u591a\uff0c\u5e76\u4e14\u7ed9\u5b9a ab \u7684\u503c\u8f83\u5927\u7684\u503c \uff0c\u53ef\u4ee5\u5229\u7528\u7ec4\u5408\u6570\u7684\u9006\u63a8\uff08\u4e0a\u4e0b\u9636\u4e58\uff09 \u65b9\u5f0f\uff0c \u9884\u5904\u7406 \u51fa\u6765 \u5206\u5b50\u7684\u9636\u4e58\u548c\u5206\u6bcd\u7684\u9636\u4e58\u7684\u9006\u5143\uff0c\u7136\u540e\u76f4\u63a5\u5229\u7528\u516c\u5f0f\u8f93\u51fa res \u5373\u53ef nlogn $$ C[a][b] = a! / (b! * (a - b)!) $$ 1\u2264n\u2264100001\u2264n\u226410000, 1\u2264b\u2264a\u2264105 #include <iostream> #include <algorithm> using namespace std; typedef long long LL; const int mod = 1e9 + 7; const int N = 1e5 + 10; int fact[N],infact[N]; int qmi(int a,int k,int p) { int res = 1 % p; while(k) { if(k & 1) res =(LL) res * a % p; a = (LL) a * a % p; k = k >> 1; } return res; } int main(void) { fact[0] = infact[0] = 1; for(int i = 1; i< N ; i ++) { fact[i] = (LL)i * fact[i-1] % mod; infact[i] = (LL)infact[i - 1] * qmi(i,mod-2,mod) % mod; } int n; cin >> n; while(n --) { int a,b; cin >> a >> b; cout << (LL)fact[a] * infact[b] % mod * infact[a-b] % mod<< endl; } return 0; } 3\uff0c \u5bf9\u4e8e\u8be2\u95ee\u6b21\u6570\u4e0d\u591a\uff0c\u7ed9\u51fa ab \u7684\u503c\u7279\u522b\u5927\u7684\u503c \uff0c\u53ef\u4ee5\u5229\u7528 lucase \u5b9a\u5f8b\u6765\u6c42\uff0c Cab = Ca%pb%p * Ca/pb/p \uff1b\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u70b9\u4e3b\u8981\u662f \u8fd4\u56de lucase \u5b9a\u5f8b\u7684\u503c\u5fc5\u987b\u65f6 lucasa/p,b/p \u56e0\u4e3a \u53ef\u80fd\u518d ab \u9664\u4ee5 p \u4e4b\u540e\u7684\u5230\u7684\u503c\u4ecd\u7136\u5927\u4e8e\u5927\u4e8ep\uff0c\u8fd9\u6837\u7684\u8bdd\u6c42 Cab \u53ef\u80fd\u4f1a\u51fa\u73b0\u9519\u8bef\uff1b \u6c42 Cab \u65f6\u5229\u7528\u7684\u516c\u5f0f\u662f\u5206\u6bcd\u5230\u5206\u5b50\u7684\u9636\u4e58\u6bd4\u4e0a\u5206\u5b50\u4ece\u4e00\u5230\u5b83\u672c\u8eab\u7684\u9636\u4e58\u5229\u7528\u9006\u5143\u6765\u6c42 $$ Cba=a!/b!(a\u2212b)!=(a\u2212b+1)\u00d7(a\u2212b+2)\u00d7\u2026\u00d7a/b! $$ #include <iostream> #include <algorithm> using namespace std; typedef long long LL; int qmi(int a, int k, int p) { int res = 1; while (k) { if (k & 1) res = (LL)res * a % p; a = (LL)a * a % p; k >>= 1; } return res; } int C(int a, int b, int p) { if (b > a) return 0; int res = 1; for (int i = 1, j = a; i <= b; i ++, j -- ) { res = (LL)res * j % p; res = (LL)res * qmi(i, p - 2, p) % p; } return res; } int lucas(LL a, LL b, int p) { if (a < p && b < p) return C(a, b, p); return (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p; } int main() { int n; cin >> n; while (n -- ) { LL a, b; int p; cin >> a >> b >> p; cout << lucas(a, b, p) << endl; } return 0; } 4\uff0c \u5bf9\u4e8e\u6240\u6c42\u7684\u503c\u4e0d\u8fdb\u884c \u53d6\u6a21\u7684\u8fd0\u7b97 \u5206\u4e3a\u4e09\u6b65\u8d70\uff0c\u7b2c\u4e00\u6b65\u7528\u8d28\u6570\u7b5b\u6cd5\uff0c\u7b5b\u51fa\u524dn\u4e2a\u6570\u4e2d\u7684\u8d28\u6570\uff0c\u7b2c\u4e8c\u6b65\uff0c\u5229\u7528\u9664\u6cd5\u6c42\u51fa\u6bcf\u4e2a\u6570\u8d28\u56e0\u6570\u7684\u500d\u6570\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5229\u7528\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u6c42\u51fa\u6700\u7ec8p\u7684\u7ed3\u679c \u4e0a\u9762\u7684\u6570\u7684\u9636\u4e58\u548c\u4e0b\u9762\u4e24\u4e2a\u6570\u7684\u9636\u4e58\u90fd\u53ef\u4ee5\u7528\u6570\u5b66\u57fa\u672c\u5b9a\u7406\u6765\u5206\u89e3 \u7136\u540e\u518d\u4e0a\u4e0b\u518d\u53bb\u6389\u76f8\u540c\u7684\u6307\u6570\u518d\u76f8\u4e58\u5c31\u884c #include <iostream> #include <algorithm> #include <vector> using namespace std; const int N = 5010; int primes[N]; bool st[N]; int cnt; int sum[N]; void get_primes(int n) { for(int i = 2;i<=n;i++) { if(!st[i]) primes[cnt++] = i; for(int j = 0;primes[j] <=n/i;j++) { st[primes[j] * i] = true; if(i % primes[j] == 0) break; } } } int get(int x,int p) { int res = 0; while(x) { res += x/p; x /= p; // \u4e00\u76f4\u628a p \u7684 k \u6b21\u65b9\u4e5f\u53bb\u6389 } return res; } vector<int> mul(vector<int> a,int b) { vector<int> c; int t = 0; for(int i = 0;i<a.size();i++) { t = t + a[i] *b; c.push_back(t%10); t = t/10; } while(t) { c.push_back(t%10); t = t /10; } return c; } int main(void) { int a,b; cin >> a>> b; get_primes(a); // \u7b5b\u9009\u51fa\u4e86\u8d28\u6570 for(int i = 0;i < cnt;i++) { int p = primes[i]; sum[i] = get(a,p) - get(a-b,p) - get(b,p);// \u8fd9\u91cc\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u5b58\u5728\u7684\u8d28\u6570 \u5e76\u9664\u53bb \u5f97\u5230\u9664\u4e4b\u540e\u7684\u8d28\u6570\u7684\u6570\u91cf\uff1b\uff1b } vector<int> res; res.push_back(1); for(int i = 0;i<cnt;i++) for(int j = 0;j<sum[i];j++) res = mul(res,primes[i]); // \u8fd9\u91cc\u8fdb\u884c\u76f8\u4e58\uff1b\uff1b for(int i = res.size() -1; i>=0;i--) cout << res[i]; cout << endl; return 0; } \u8d28\u6570 \u8bd5\u9664\u6cd5\u6c42\u8d28\u6570 \u53ef\u4ee5\u5229\u7528 n/i \u6765\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u7ea6\u6570\u90fd\u662f \u4e00\u5bf9\u4e00\u5bf9 \u7684\u51fa\u73b0\u7684\uff0cd \u80fd\u6574\u9664 n \uff0cn/d \u4e5f\u80fd\u6574\u9664 n \uff0c\u6240\u4ee5\u8bf4\u5c31\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u628a n \u6362\u6210 n/i \u6765\u7f29\u5c0f\u8303\u56f4 \uff1a \u5982\u679c n/i \u4e4b\u540e\u5b58\u5728\u6811\u4f7f x \u4e0d\u4e3a\u8d28\u6570\uff0c\u90a3\u4e48\uff0c\u5728 n/i \u4e4b\u524d\u4e00\u5b9a\u4e5f\u5b58\u5728\u8fd9\u6837\u7684\u6570 #include <iostream> #include <algorithm> using namespace std; bool check(int x) { if(x == 2 ) return true; if(x == 1 || x == 0) return false; for(int i = 2; i <= x / i ; i ++) { if(x % i == 0) return false; } return true; } int main(void) { int n; cin >> n; while(n --) { int x; cin >> x; if(check(x)) cout << \"Yes\" << endl; else cout <<\"No\" << endl; } return 0; } \u5206\u89e3\u8d28\u56e0\u6570 \u7531\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u53ef\u4ee5\u77e5\u9053\uff0c\u4efb\u4f55\u4e00\u4e2a\u6570\u90fd\u53ef\u4ee5\u5206\u89e3\u4e3a\u8d28\u6570\u7684\u6307\u6570\u5f62\u5f0f\u7684\u4e58\u79ef\u548c #include <iostream> #include <cstring> #include <algorithm> using namespace std; void get_primes(int x) { for(int i =2 ; i <= x / i ; i ++) { if(x%i == 0) { int s = 0; while( x % i == 0) { s++; x = x / i; } cout << i << \" \" << s << endl; } } if(x > 1) cout << x <<\" \" << 1 << endl; cout << endl; } int main() { int n; cin >> n; while(n--) { int x; cin >> x; get_primes(x); } return 0; } \u7b5b\u8d28\u6570 \u6734\u7d20\u505a\u6cd5\u662f\u7b5b\u6389\u6240\u6709 \u6570 \u540e\u9762\u7684\u6570 \u57c3\u5f0f\u7b5b\u6cd5\u662f\u7b5b\u6389\u6240\u6709 \u8d28\u6570 \u540e\u9762\u7684\u6570 \u7ebf\u6027\u7b5b\u6cd5\u662f\u901a\u8fc7 \u8d28\u56e0\u5b50\u6765\u7b5b\u6389\u6240\u6709\u8d28\u6570 \u540e\u9762\u7684\u6570 1e7 \u4f1a\u6bd4\u4e0a\u4e00\u4e2a\u5feb\u4e00\u500d \u7ebf\u6027\u7b5b\u6cd5 \u5224\u65ad\u6761\u4ef6 if \u6210\u7acb\u65f6\u4fdd\u8bc1\u4e86 i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u662f pj \uff0c\u540c\u65f6 i*pj \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e5f\u662f pj \u5f53 if \u6761\u4ef6\u4e0d\u6210\u7acb\u65f6\uff0c\u4fdd\u8bc1\u4e86 i*pj \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u662f pj\uff1b\u4e14 pj \u4e00\u5b9a\u5c0f\u4e8e i \u7684\u6240\u6709\u8d28\u56e0\u5b50 \u6bcf\u4e2a\u5408\u6570\u90fd\u4f1a\u6709\u4e00\u4e2a\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u5f53 i \u679a\u4e3e\u5230 x/i \u7684\u65f6\u5019\uff0cx \u4e00\u5b9a\u4f1a\u88ab\u7b5b\u6389 #include <iostream> #include <algorithm> using namespace std; const int N = 1e6 +10; bool st[N]; int primes[N],cnt; void get_primes(int n) { for(int i = 2; i <= n ; i++) { if(!st[i]) primes[cnt ++] = i; for(int j = 0 ; primes[j] <= n/i ; j ++) { st[i * primes[j]] = true; if(i % primes[j] == 0) break; } } } int main(void) { int n; cin >> n; get_primes(n); cout << cnt << endl; return 0; } \u7ea6\u6570 \u8bd5\u9664\u6cd5\u6c42\u7ea6\u6570 \u53ef\u4ee5\u5229\u7528 i != n/i \u6765\u8fdb\u884c\u4f18\u5316 \uff0c\u56e0\u4e3a\u8d28\u6570\u662f\u4e00\u5bf9\u4e00\u5bf9\u7684\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fd9\u4e2a\u5f0f\u5b50\u8fdb\u884c\u63d0\u524d\u7684\u5224\u65ad\uff0c\u5f97\u5230\u5927\u4e8e n/i \u7684\u7ea6\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u9632\u6b62\u51fa\u73b0\u5e73\u65b9\u6570\u76f8\u540c\u7684\u60c5\u51b5 #include <iostream> #include <algorithm> using namespace std; void get_divisors(int x) { vector<int> res ; for(int i = 1 ; i <= x/ i; i ++) { if(x % i ==0) { res.push_back(i); if(i != x/i) res.push_back(x/i); } } sort(res.begin(),res.end()); for(auto x : res) cout << x << \" \" ; cout << endl; } int main(void) { int n; cin >> n; while(n --) { int x; cin >> x; get_divisors(x); } return 0; } \u7ea6\u6570\u4e2a\u6570 \u4e00\u4e2a\u6570\u53ef\u4ee5\u6839\u636e\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u5212\u5206\u4e4b\u540e\uff0c\u7ea6\u6570\u7684\u4e2a\u6570\u5c31\u662f \u6240\u6709\u6307\u6570\u9879+1 \u7684\u4e58\u79ef\u548c\uff1b \u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u6bcf\u4e00\u4e2a\u6570\u4e5f\u90fd\u53ef\u4ee5\u5229\u7528\u7b97\u672f\u57fa\u672c\u5b9a\u91cc\u8fdb\u884c\u5212\u5206\uff0c\u5f97\u5230\u4e0d\u540c\u7684\u8d28\u6570\u7684\u6307\u6570\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c +1 #include <iostream> #include <algorithm> #include <unordered_map> using namespace std; const int mod = 1e9 + 7; int n; unordered_map<int,int>primes; void get(int x) { for(int i = 2; i <= x/ i; i++) { if(x % i == 0) { while(x % i == 0) primes[i]++,x/=i; } } if(x > 1) primes[x] ++; } int main(void) { cin >> n; while(n --) { int x; cin >> x; get(x); } long long res = 1; for(auto prime : primes) res = (long long ) res * (prime.second + 1) % mod; cout << res << endl; return 0; } \u7ea6\u6570\u4e4b\u548c \u4e00\u4e2a\u6570\u53ef\u4ee5\u6839\u636e\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u5212\u5206\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8d28\u6570\u7684\u4ece\u96f6\u6b21\u65b9\u5230\u8fd9\u4e2a\u8d28\u6570\u6307\u6570\u7684\u4e58\u79ef\u548c\u518d\u76f8\u4e58\u4e4b\u540e\u7684\u5230\u7ea6\u6570\u7684\u4e4b\u548c \u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u53ef\u4ee5\u5229\u7528\u7b97\u672f\u57fa\u672c\u5b9a\u7406\u8fdb\u884c\u5212\u5206\uff0c\u4e0a\u9762\u7684\u4e58\u79ef\u5f0f\uff0c\u4e58\u5f00\u4e4b\u540e\u4ece\u96f6\u6b21\u65b9\u5230\u4ed6\u6307\u6570\u6b21\u65b9\u7684\u6240\u6709\u7ed3\u679c\u90fd\u4f1a\u51fa\u73b0\uff0c\u53c8\u56e0\u4e3a\u662f\u4e58\u79ef\u5f0f\u6240\u4ee5\u4f1a\u8fdb\u884c\u7d2f\u52a0\u4ece\u800c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c \u4ece0\u6b21\u65b9\u5230b\u6b21\u65b9\u7684\u4e58\u79ef t = (t * a + 1)\u5faa\u73af b \u6b21\uff0ct \u4ece 1 \u5f00\u59cb #include <iostream> #include <unordered_map> #include <algorithm> using namespace std; typedef long long LL; const int mod = 1e9 +7; unordered_map<int,int> primes; void get(int x) { for(int i = 2;i <= x/i;i++) { while(x%i == 0) { x = x / i; primes[i]++; } } if(x > 1) primes[x] ++; } int main(void) { int n; cin >> n; while(n--) { int x; cin >> x; get(x); } LL res = 1; for(auto prime : primes) { LL a = prime.first; LL b = prime.second; LL t = 1; while(b -- ) t = (t * a + 1) % mod; // Important;; res = res * t %mod; } cout << res << endl; return 0; } \u6700\u5927\u516c\u7ea6\u6570 d \u80fd\u6574\u9664 a\uff0cd \u80fd\u6574\u9664 b\uff0cd \u5c31\u80fd\u6574\u9664 a+b\uff0cd \u5c31\u80fd\u6574\u9664 ax+by \u56e0\u6b64 a \u548c b \u7684\u6700\u5927\u516c\u7ea6\u6570\u5c31\u7b49\u4e0e b \u548c a%b \u7684\u6700\u5927\u516c\u7ea6\u6570 \u56e0\u4e3a a %b \u53ef\u4ee5\u770b\u6210 a - c*b \u518d\u7531\u4e0a\u9762\u7684\u5f0f\u5b50\u5f97\u51fa\u7ed3\u679c\u5373\u53ef #include <iostream> #include <algorithm> using namespace std; int gcd(int a,int b) { return b ? gcd(b,a%b) : a; } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << gcd(a,b) <<endl; } return 0; } \u6700\u5c0f\u516c\u500d\u6570 \u5c31\u662f a*b / gcd(a,b); #include <iostream> #include <algorithm> using namespace std; int gcd(int a,int b) { return b ? gcd(b,a%b) : a; } int lcm(int a,int b) { return a * b / gcd(a,b); } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; cout << lcm(a,b) <<endl; } return 0; } **\u6b27\u62c9\u51fd\u6570 ** #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL oula(int x) { LL res = x; for(int i = 2;i <= x/i;i++) { if(x% i == 0) { while(x % i == 0) { x = x/i; } res = (LL) res / i * (i-1); } } if(x > 1) res = (LL) res / x *(x-1); return res; } int main(void) { int n; cin>> n; while(n--) { int x; cin >> x; cout << oula(x) <<endl; } return 0; } \u5bb9\u65a5\u539f\u7406 \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570 \u5f53\u8be5\u6570\u4e3a\u8d28\u6570\u7684\u65f6\u5019\uff0c\u8be5\u6570\u7684\u6b27\u62c9\u51fd\u6570\u4e3a n-1\uff1b \u7ebf\u6027\u7b5b\u65f6\uff0c\u82e5 pj \u662f pj*i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u65f6\uff0c\u7531\u6b27\u62c9\u5b9a\u7406\u53ef\u4ee5\u77e5\u9053\u8be5\u6700\u5c0f\u8d28\u56e0\u5b50\u4e00\u5b9a\u4e58\u8fc7\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06 e[i] * pj \u5373\u53ef\uff1b \u82e5 pj \u4e0d\u662f pj*i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u65f6 \u9700\u8981\u52a0\u4e0a pj * (pj - 1) / pj \u6240\u4ee5\u5f97\u5230 e[i] * (pj - 1); \u5feb\u901f\u5e42 \u628a a \u7684 k \u6b21\u65b9\u4e0a\u9762\u7684 k \u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u7684\u6570 \uff0c\u7136\u540e\u5229\u7528\u4e8c\u8fdb\u5236\u7684\u6570\u6765\u8fdb\u884c\u76f8\u4e58\u6c42\u89e3\u6700\u7ec8\u7684 ans \u5229\u7528\u5faa\u73af\u6bcf\u6b21\u4f7f a \u76f8\u4e58\u53d8\u6210\u6307\u6570\u5e73\u65b9\u5f0f\uff0c\u540c\u65f6\u6307\u6570 k \u4ece\u7b2c\u96f6\u4f4d\u5f00\u59cb\u8fdb\u884c\u5411\u524d\u8d70\uff0c\u5982\u679c\u672b\u5c3e\u7b49\u4e8e 1 \u7684\u8bdd\uff0c\u5c31\u628a res * a \u76f8\u5f53\u4e8e\u4e86 a \u7684\u591a\u5c11\u6b21\u65b9\u76f8\u4e58\u8fdb\u884c #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL qmi(int a,int k,int p) { LL res = 1; while(k) { if(k & 1) res = (LL)res * a %p; a = (LL)a*a % p; k = k >> 1; } return res; } int main(void) { int n; cin >> n; while(n--) { int a,k,p; cin >> a >> k >> p; cout << qmi(a,k,p) << endl; } return 0; } \u5feb\u901f\u5e42\u6c42\u9006\u5143 \u5feb\u901f\u5e42\u6c42\u9006\u5143\uff0c\u5f53 b \u548c p \u4e92\u8d28\u7684\u65f6\u5019\uff0c\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230 b \u7684 -2 \u6b21\u65b9\u5c31\u662f b \u7684\u9006\u5143 #include <iostream> #include <algorithm> using namespace std; typedef long long LL; LL qmi(int a,int k,int p) { LL res = 1; while(k) { if(k & 1) res = (LL)res * a %p; a = (LL)a*a % p; k = k >> 1; } return res; } int main(void) { int n; cin >> n; while(n--) { int a,p; cin >> a >> p; LL res = qmi(a,p-2,p); if(a % p == 0) cout << \"impossible\" << endl; else cout << res << endl; } return 0; } \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \u6c42\u51fa x \u5c31\u53ef\u4ee5\u5f97\u5230 \u9006\u5143\u4e86 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u5229\u7528\u6700\u5927\u516c\u7ea6\u6570\u6765\u8f97\u8f6c\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c \u5f53 b \u4e0d\u4e3a 0 \u7684\u65f6\u5019\u5c31\u53ef\u7ee7\u7eed\u8fdb\u884c a%b \uff1b \u7ed9\u5b9a nn \u5bf9\u6b63\u6574\u6570 ai,biai,bi\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u6570\uff0c\u6c42\u51fa\u4e00\u7ec4 xi,yixi,yi\uff0c\u4f7f\u5176\u6ee1\u8db3 ai\u00d7xi+bi\u00d7yi=gcd(ai,bi)ai\u00d7xi+bi\u00d7yi=gcd(ai,bi)\u3002 \u7ed9\u51fa a,b \u6c42\u51fa x,y #include <iostream> #include <algorithm> using namespace std; int exgcd(int a,int b,int &x,int &y) { if(b == 0) { x = 1 , y = 0; return a; } int d = exgcd(b,a%b,y,x); y -= a/b * x; return d; } int main(void) { int n; cin >> n; while(n--) { int a,b; cin >> a >> b; int x,y; int d = exgcd(a,b,x,y); cout << x<<\" \" << y << endl; } return 0; } \u8f93\u5165\u89c4\u6a21\u572810\u76845\u6b21\u65b9\u4ee5\u5185\uff0c\u53ef\u4ee5\u7528 cin \u548c scanf \u5dee\u522b\u4e0d\u5927 \u5927\u4e8e 10 \u7684 5 \u6b21\u65b9\u4e4b\u540e\uff0c\u7528 scanf \u53ef\u4ee5\u6bd4 cin \u5feb\u4e00\u500d\u5de6\u53f3","title":"\u6570\u8bba"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/","text":"\u57fa\u672c\u7b97\u6cd5 \u5feb\u901f\u6392\u5e8f \u5206\u6cbb\u601d\u60f3 \u53cc\u6307\u9488\u8fd0\u7b97 \u4e00\uff0c\u9009\u53d6\u57fa\u51c6\uff08\u4e00\u822c\u662f\u4ee5\u4e2d\u95f4\u4e3a\u57fa\u51c6\uff09 \u4e8c\uff0c\u9009\u53d6\u505a\u8fb9\u754c i \u548c\u6709\u8fb9\u754c j \uff0c\u4e0d\u65ad\u4e0e\u6240\u9009\u7684\u57fa\u51c6\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f4\u5230\u627e\u5230\u6bd4\u57fa\u51c6\u503c\u5927\u6216\u5c0f\u7684\u503c\uff0c\u8fdb\u884c\u4e8c\u8005\u7684\u4ea4\u6362 \u4e09\uff0c\u9012\u5f52\u540c\u4e0a\u5904\u7406\u57fa\u51c6\u503c\u7684\u5de6\u53f3\u533a\u95f4 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int q[N]; int n; void quick_sort(int q[],int l,int r) { if(l >= r ) return ; int i = l - 1 ,j = r + 1 , mid = q[l+r >> 1]; while(i < j) { do i ++; while(q[i] < mid ); do j --; while(q[j] > mid ); if(i < j) swap(q[i],q[j]); } quick_sort(q,l,j); quick_sort(q,j+1,r); } int main(void) { cin >> n; for(int i = 0 ; i < n ; i++) cin >> q[i]; quick_sort(q,0,n-1); for (int i = 0; i < n; i ++ ) printf(\"%d \", q[i]); return 0; } \u5f52\u5e76\u6392\u5e8f \u5206\u6cbb\u601d\u60f3 \u533a\u95f4\u5212\u5206 \u4e00\uff0c\u4e0d\u65ad\u8fdb\u884c\u533a\u95f4\u7684\u5212\u5206\u7f29\u5c0f\uff0c\u76f4\u5230\u5212\u5206\u6210\u6700\u5c0f\u533a\u95f4\uff08\u957f\u5ea6\u4e3a\u4e00\uff09 \u4e8c\uff0c\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u5b9a\u4e49\u51fa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u7528\u6765\u5b58\u653e\u533a\u95f4\u5de6\u53f3\u4e24\u4fa7\u7684\u6bd4\u8f83\u5927\u5c0f\u540e\u7684\u7ed3\u679c \u4e09\uff0c\u628a\u4e34\u65f6\u6570\u7ec4\u7684\u503c\u8d4b\u4e88\u5230\u539f\u6570\u7ec4\u4e2d\uff0c\u5373\u628a\u539f\u4e24\u4e2a\u6570\u7ec4\u5408\u4e8c\u4e3a\u4e00 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int n; int q[N],tmp[N]; void merge_sort(int q[],int l,int r) { if(l >= r) return ; int mid = l + r >> 1; merge_sort(q,l,mid),merge_sort(q,mid + 1,r); int k = 0; int i = l,j = mid + 1; while(i <= mid && j <= r) { if(q[i] >= q[j]) tmp[k++] = q[j ++]; else tmp[k++] = q[i++]; } while(i <= mid) tmp[k++] = q[i++] ; while(j <= r) tmp[k++] = q[j++] ; for(int i = l,j = 0 ; i <= r; i ++ , j ++) { q[i] = tmp[j]; } return ; } int main(void) { cin >> n; for(int i = 0 ; i < n ; i++) cin >> q[i]; merge_sort(q,0,n-1); for (int i = 0; i < n; i ++ ) printf(\"%d \", q[i]); return 0; } \u4e8c\u5206 \u53cc\u6307\u9488\u8fd0\u7b97 \u4e00\uff0c\u5148\u53d6\u5230\u4e24\u4e2a\u53ef\u4ee5\u5305\u542b\u6240\u6c42\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\u7684\u53d8\u91cf \u4e8c\uff0c\u5b9a\u4e49\u51fa\u4e24\u4e2a\u53d8\u91cf\u7684\u4e2d\u503c \u4e09\uff0c\u8fdb\u884c\u4e2d\u503c\u7684\u53ef\u884c\u6027\u68c0\u67e5\uff0c\u4ee5\u6b64\u6765\u8fdb\u884c\u7f29\u5c0f\u533a\u95f4 tips\uff1a\u533a\u95f4\u5212\u5206\u65f6\uff0cif \u540e\u8ddf l \u65f6 \uff0c\u9700\u8981\u8fdb\u884c mid + 1 \uff1b #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int q[N]; int n,qq; int main(void) { cin >> n >> qq; for(int i = 0 ; i < n ; i ++) scanf(\"%d\",&q[i]); int k; while(qq --) { cin >> k; // \u5de6\u8fb9\u7684\u7b2c\u4e00\u4e2a int l = 0 , r = n - 1; while(l < r) { int mid = l + r >> 1; if(q[mid] >= k) r = mid; else l = mid + 1 ; } if(q[l] != k)cout << \"-1 -1\" << endl; else{ cout << l << \" \"; l = 0, r = n - 1; while(l < r) { int mid = l + r + 1 >> 1; if(q[mid] <= k )l = mid; else r = mid - 1; } cout << r << endl; } } return 0; } \u9ad8\u7cbe\u5ea6 \u4e3a\u4e86\u9632\u6b62\u51fa\u9519\u8bef\uff0c\u4e00\u822c\u90fd\u4f1a\u52a0\u4e0a\u53bb\u9664\u524d\u5bfc 0 \u64cd\u4f5c \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 \u4e00\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u8f93\u5165\u8fd1\u4e24\u4e2a\u957f\u6570\u5b57\u4e32\uff0c\u5e76\u5229\u7528 vector \u6765\u8fdb\u884c\u5b58\u50a8 \u8f6c\u6362\u540e\u7684\u5b57\u7b26\u4e32\uff08\u5012\u5e8f\u5b58\u50a8\uff09 \u4e8c\uff0c\u8fdb\u884c\u4e24\u4e2a vector \u5927\u5c0f\u7684\u5224\u65ad\uff0c\u4ece\u800c\u4fdd\u8bc1\u9009\u53d6\u6700\u5927\u7684\u6570\u636e\u8303\u56f4 \u4e09\uff0c\u5728 add \u51fd\u6570\u4e2d\u5b9a\u4e49\u51fa\u4e00\u4e2a\u53d8\u91cf t \u7528\u4e8e\u4e0a\u4e00\u6b21\u52a0\u6cd5\u4e4b\u540e\u591a\u4f59\u7684\u5341\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> using namespace std; vector<int>add(vector<int> a,vector<int> b) { vector<int> c; if(a.size() < b.size()) return add(b,a); int t = 0; for(int i = 0 ; i < a.size(); i ++) { t += a[i]; if(i < b.size()) t += b[i]; c.push_back(t%10); t /=10; } if (t) c.push_back(t); return c; } int main(void) { string a,b; cin >> a >> b; vector <int>A,B; for (int i = a.size() - 1; i >= 0; i -- ) A.push_back(a[i] - '0'); for (int i = b.size() - 1; i >= 0; i -- ) B.push_back(b[i] - '0'); auto C = add(A, B); for (int i = C.size() - 1; i >= 0; i -- ) cout << C[i]; cout << endl; return 0; } \u9ad8\u7cbe\u5ea6\u51cf\u6cd5 \u4e00\uff0c\u7531\u4e8e\u957f\u5ea6\u548c\u5927\u5c0f\u4e0d\u540c\uff0c\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u8d1f\u53f7\u7684\u60c5\u51b5\uff0c\u9700\u8981\u7528 cmp \u51fd\u6570\u6bd4\u8f83\u4e00\u4e0b \u4e8c\uff0c\u7528 t \u6765\u8868\u793a\u4e0a\u4e00\u6b21\u8ba1\u7b97\u7684\u501f\u4f4d \u4e09\uff0c\u6bcf\u6b21\u4f1a\u8fdb\u884c (t+10) % 10 \u64cd\u4f5c \u9632\u6b62\u63a8\u5165\u8d1f\u6570 #include <iostream> #include <vector> #include <algorithm> using namespace std; bool cmp(vector<int> a,vector <int> b) { if(a.size() != b.size()) return a.size() > b.size(); for(int i = a.size() - 1 ;i >= 0 ; i --) { if(a[i] != b[i]) return a[i] > b[i]; } return true; } vector<int> sub(vector<int> a,vector <int> b) { vector <int> c; int t = 0; for(int i = 0 ; i < a.size() ; i ++) { t = a[i] - t; if(i < b.size()) t -= b[i]; c.push_back((t+10) % 10); if(t < 0) t = 1; else t = 0; } while(c.size() > 1 && c.back() == 0) c.pop_back(); return c; } int main(void) { string a,b; cin >> a>> b; vector<int> A,B,C; for(int i = a.size() - 1 ; i >= 0 ; i --) A.push_back(a[i] - '0'); for(int i = b.size() - 1 ; i >= 0 ; i --) B.push_back(b[i] - '0'); if(cmp(A,B)) C = sub(A,B); else{ C = sub(B,A); cout << \"-\"; } for(int i = C.size() - 1 ; i >= 0 ; i --) cout << C[i] ; cout << endl; return 0; } \u9ad8\u7cbe\u5ea6\u4e58\u6cd5 \u4e00\uff0c\u5f53 t \u4e0d\u4e3a 0 \u7684\u65f6\u5019\uff0c\u9700\u8981\u7ee7\u7eed\u8fdb\u884c\u64cd\u4f5c \u4e8c\uff0c\u53bb\u9664\u524d\u5bfc 0 \u4e09\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u518d a \u7684 size \u5185 #include <iostream> #include <vector> #include <algorithm> using namespace std; vector<int> mul(vector<int> a,int b) { vector <int> c; int t = 0; for(int i = 0 ; i < a.size() || t; i ++) { if(i < a.size())t = t + a[i] * b; c.push_back(t % 10); t = t / 10; } while(c.size() > 1&& c.back() == 0) c.pop_back(); return c; } int main(void) { string a; int b; cin >> a; cin >> b; vector<int> A,C; for(int i = a.size() - 1 ; i >= 0 ; i --) A.push_back(a[i] - '0'); // for(int i = b.size() - 1 ; i >= 0 ; i --) B.push_back(b[i] - '0'); C = mul(A,b); for(int i = C.size() - 1 ; i >= 0 ; i--) cout << C[i]; return 0; } #include <iostream> #include <vector> using namespace std; vector<int> mul(vector<int> &A, vector<int> &B) { vector<int> C(A.size() + B.size(), 0); // \u521d\u59cb\u5316\u4e3a 0\uff0c\u4e14999*99\u6700\u591a 5 \u4f4d for (int i = 0; i < A.size(); i++) for (int j = 0; j < B.size(); j++) C[i + j] += A[i] * B[j]; int t = 0; for (int i = 0; i < C.size(); i++) { // i = C.size() - 1\u65f6 t \u4e00\u5b9a\u5c0f\u4e8e 10 t += C[i]; C[i] = t % 10; t /= 10; } while (C.size() > 1 && C.back() == 0) C.pop_back(); // \u5fc5\u987b\u8981\u53bb\u524d\u5bfc 0\uff0c\u56e0\u4e3a\u6700\u9ad8\u4f4d\u5f88\u53ef\u80fd\u662f 0 return C; } int main() { string a, b; cin >> a >> b; // a = \"1222323\", b = \"2323423423\" vector<int> A, B; for (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0'); for (int i = b.size() - 1; i >= 0; i--) B.push_back(b[i] - '0'); auto C = mul(A, B); for (int i = C.size() - 1; i >= 0; i--) cout << C[i]; return 0; } \u9ad8\u7cbe\u5ea6\u9664\u6cd5 \u4e00\uff0c\u9700\u8981\u4ece\u9ad8\u4f4d\u6570\u5f00\u59cb\u8fdb\u884c\u8fd0\u7b97 \u4e8c\uff0c\u6bcf\u6b21\u90fd\u662f\u53d6\u4f59\u64cd\u4f5c \u4e09\uff0c\u7ed3\u675f\u540e\u9700\u8981 reverse \u4e00\u4e0b\uff0c\u53ef\u4ee5\u66f4\u597d\u5339\u914d\u524d\u9762\u7684\u503c #include <iostream> #include <algorithm> #include <vector> using namespace std; vector<int> divv(vector<int> a,int b,int & r) { vector<int> c; for(int i = a.size() - 1 ; i >= 0 ; i --) { r = r * 10 + a[i]; c.push_back(r / b); r = r % b; } reverse(c.begin(),c.end()); while(c.size() > 1 && c.back() == 0) c.pop_back(); return c; } int main(void) { string a; int b; cin >> a >> b; vector<int> A,c; for(int i = a.size() - 1 ; i >= 0 ; i -- ) A.push_back(a[i] - '0'); int r = 0; c = divv(A,b,r); for(int i = c.size() - 1 ; i >= 0 ; i --) cout << c[i]; cout << endl; cout << r << endl; return 0; } \u79bb\u6563\u5316 \u524d\u7f00\u548c\u548c\u5dee\u5206 \u524d\u7f00\u548c\u548c\u5dee\u5206\u64cd\u4f5c\u90fd\u9700\u8981\u6570\u7ec4\u4e0b\u6807\u4ece 1 \u5f00\u59cb \u4e00\u7ef4\u524d\u7f00\u548c \u53ef\u4ee5\u5229\u7528\u539f\u6570\u7ec4\u81ea\u52a0\u6765\u53d6\u5230\u524d\u7f00\u548c\u6570\u7ec4 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 +10; int a[N]; int s[N]; int n,m; int main(void) { cin >> n >> m; for(int i = 1 ; i <= n ; i ++) cin >> a[i]; for(int i = 1 ; i <= n ; i++) a[i] += a[i-1]; while(m --) { int l,r; cin >> l >> r; cout << a[r] - a[l-1] << endl; } return 0; } \u4e8c\u7ef4\u524d\u7f00\u548c #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int a[N][N]; int s[N][N]; int n,m,q; int main(void) { cin >> n >> m >> q; for(int i = 1; i <= n ;i ++) for(int j = 1 ; j <= m ;j ++) cin >> a[i][j]; for(int i = 1 ; i <= n ; i ++) for(int j = 1 ; j <= m ; j++) s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j]; while(q--) { int x1,x2,y1,y2; cin >> x1 >> y1 >> x2 >> y2; cout << s[x2][y2] - s[x2][y1-1] - s[x1 - 1][y2] + s[x1-1][y1-1] << endl; } return 0; } \u4e00\u7ef4\u5dee\u5206 \u5dee\u5206\u6570\u7ec4\u5c31\u662f\u524d\u7f00\u548c\u6570\u7ec4\u7684\u9006\u6570\u7ec4\uff0c\u4ed6\u7684\u524d n \u9879\u548c\u5c31\u662f\u524d\u7f00\u548c\u6570\u7ec4 \u53ef\u4ee5\u76f4\u63a5\u7528\u63d2\u5165\u7684\u65b9\u5f0f\u6765\u6c42\u51fa\u5dee\u5206\u6570\u7ec4\uff0c\u4e00\u822c\u7528\u4e8e\u533a\u95f4\u7684\u52a0\u51cf #include <iostream> using namespace std; const int N = 1e5 + 10; int a[N],b[N]; void insert(int l,int r,int c) { b[l] = b[l] + c; b[r+1] = b[r+1] - c; } int main(void) { int n,m; cin>> n >> m; for(int i = 1;i<=n;i++) cin>>a[i]; for(int i = 1;i<=n;i++) insert(i,i,a[i]); while(m--) { int l, r, c; cin >> l >> r >> c; insert(l,r,c); } for(int i = 1;i<=n;i++) b[i] += b[i-1]; for(int i = 1;i<=n;i++) cout<<b[i]<<\" \"; } \u4e8c\u7ef4\u5dee\u5206 #include <iostream> using namespace std; const int N = 1010; int a[N][N],b[N][N]; void insert(int x1,int y1,int x2,int y2,int c) { b[x1][y1] += c; b[x2 +1][y1] -= c; b[x1][y2+1] -=c; b[x2+1][y2+1] +=c; } int main(void) { int n,m,q; cin>>n>>m>>q; for(int i = 1;i<=n;i++) for(int j =1;j<=m;j++) cin>>a[i][j]; for(int i = 1;i<=n;i++) for(int j =1;j<=m;j++) insert(i,j,i,j,a[i][j]); while(q--) { int x1,x2,y1,y2,c; cin>>x1>>y1>>x2>>y2>>c; insert(x1,y1,x2,y2,c); } for(int i =1;i<=n;i++) for(int j =1 ;j<=m;j++) b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1]; for (int i = 1; i <= n; i ++ ) { for (int j = 1; j <= m; j ++ ) printf(\"%d \", b[i][j]); puts(\"\"); } } \u53cc\u6307\u9488 \u4e00\uff0c\u53cc\u6307\u9488\u4e00\u822c\u7528\u4e8e\u5904\u7406\u7ebf\u6027\u5373\u5177\u6709\u5355\u8c03\u6027\u7684\u64cd\u4f5c \u4e8c\uff0c\u4e00\u822c\u6a21\u677f\u5982\u4e0b #include <iostream> using namespace std; const int N = 1e5 +10; int q[N]; int flag[N]; int main(void) { int n; cin>>n; int ans = 0; for(int i = 0;i<n;i++) cin>>q[i]; for(int i = 0,j = 0;i<n;i++) { flag[q[i]]++; while(j<=i && flag[q[i]]>1) { flag[q[j]]--; j++; } ans = max(ans,i-j+1); } cout<<ans<<endl; return 0; } \u4f4d\u8fd0\u7b97 (lowbit) O(nlogn)O(nlogn) \u4f7f\u7528lowbit\u64cd\u4f5c\uff0c\u8fdb\u884c\uff0c\u6bcf\u6b21lowbit\u64cd\u4f5c\u622a\u53d6\u4e00\u4e2a\u6570\u5b57\u6700\u540e\u4e00\u4e2a1\u540e\u9762\u7684\u6240\u6709\u4f4d\uff0c\u6bcf\u6b21\u51cf\u53bblowbit\u5f97\u5230\u7684\u6570\u5b57\uff0c\u76f4\u5230\u6570\u5b57\u51cf\u52300\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u7ec81\u7684\u4e2a\u6570\uff0c lowbit\u539f\u7406 \u6839\u636e\u8ba1\u7b97\u673a\u8d1f\u6570\u8868\u793a\u7684\u7279\u70b9\uff0c\u5982\u4e00\u4e2a\u6570\u5b57\u539f\u7801\u662f10001000\uff0c\u4ed6\u7684\u8d1f\u6570\u8868\u793a\u5f62\u52bf\u662f\u8865\u7801\uff0c\u5c31\u662f\u53cd\u7801+1\uff0c\u53cd\u7801\u662f01110111\uff0c\u52a0\u4e00\u5219\u662f01111000\uff0c\u4e8c\u8005\u6309\u4f4d\u4e0e\u5f97\u5230\u4e861000\uff0c\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684lowbit\u64cd\u4f5c #include <iostream> using namespace std; const int N = 1e6 +10; int q[N]; int n; int main(void) { cin >> n; while(n--) { int x; cin >> x; int res = 0; while(x > 0) x = x - (x&-x),res ++; cout << res <<\" \"; } return 0; } \u533a\u95f4\u5408`=","title":"\u5165\u95e8\u57fa\u672c\u7b97\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u57fa\u672c\u7b97\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_2","text":"","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_3","text":"\u4e00\uff0c\u9009\u53d6\u57fa\u51c6\uff08\u4e00\u822c\u662f\u4ee5\u4e2d\u95f4\u4e3a\u57fa\u51c6\uff09 \u4e8c\uff0c\u9009\u53d6\u505a\u8fb9\u754c i \u548c\u6709\u8fb9\u754c j \uff0c\u4e0d\u65ad\u4e0e\u6240\u9009\u7684\u57fa\u51c6\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u76f4\u5230\u627e\u5230\u6bd4\u57fa\u51c6\u503c\u5927\u6216\u5c0f\u7684\u503c\uff0c\u8fdb\u884c\u4e8c\u8005\u7684\u4ea4\u6362 \u4e09\uff0c\u9012\u5f52\u540c\u4e0a\u5904\u7406\u57fa\u51c6\u503c\u7684\u5de6\u53f3\u533a\u95f4 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int q[N]; int n; void quick_sort(int q[],int l,int r) { if(l >= r ) return ; int i = l - 1 ,j = r + 1 , mid = q[l+r >> 1]; while(i < j) { do i ++; while(q[i] < mid ); do j --; while(q[j] > mid ); if(i < j) swap(q[i],q[j]); } quick_sort(q,l,j); quick_sort(q,j+1,r); } int main(void) { cin >> n; for(int i = 0 ; i < n ; i++) cin >> q[i]; quick_sort(q,0,n-1); for (int i = 0; i < n; i ++ ) printf(\"%d \", q[i]); return 0; }","title":"\u5206\u6cbb\u601d\u60f3 \u53cc\u6307\u9488\u8fd0\u7b97"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_4","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_5","text":"\u4e00\uff0c\u4e0d\u65ad\u8fdb\u884c\u533a\u95f4\u7684\u5212\u5206\u7f29\u5c0f\uff0c\u76f4\u5230\u5212\u5206\u6210\u6700\u5c0f\u533a\u95f4\uff08\u957f\u5ea6\u4e3a\u4e00\uff09 \u4e8c\uff0c\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u5b9a\u4e49\u51fa\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u7528\u6765\u5b58\u653e\u533a\u95f4\u5de6\u53f3\u4e24\u4fa7\u7684\u6bd4\u8f83\u5927\u5c0f\u540e\u7684\u7ed3\u679c \u4e09\uff0c\u628a\u4e34\u65f6\u6570\u7ec4\u7684\u503c\u8d4b\u4e88\u5230\u539f\u6570\u7ec4\u4e2d\uff0c\u5373\u628a\u539f\u4e24\u4e2a\u6570\u7ec4\u5408\u4e8c\u4e3a\u4e00 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int n; int q[N],tmp[N]; void merge_sort(int q[],int l,int r) { if(l >= r) return ; int mid = l + r >> 1; merge_sort(q,l,mid),merge_sort(q,mid + 1,r); int k = 0; int i = l,j = mid + 1; while(i <= mid && j <= r) { if(q[i] >= q[j]) tmp[k++] = q[j ++]; else tmp[k++] = q[i++]; } while(i <= mid) tmp[k++] = q[i++] ; while(j <= r) tmp[k++] = q[j++] ; for(int i = l,j = 0 ; i <= r; i ++ , j ++) { q[i] = tmp[j]; } return ; } int main(void) { cin >> n; for(int i = 0 ; i < n ; i++) cin >> q[i]; merge_sort(q,0,n-1); for (int i = 0; i < n; i ++ ) printf(\"%d \", q[i]); return 0; }","title":"\u5206\u6cbb\u601d\u60f3 \u533a\u95f4\u5212\u5206"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u4e8c\u5206"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_7","text":"\u4e00\uff0c\u5148\u53d6\u5230\u4e24\u4e2a\u53ef\u4ee5\u5305\u542b\u6240\u6c42\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\u7684\u53d8\u91cf \u4e8c\uff0c\u5b9a\u4e49\u51fa\u4e24\u4e2a\u53d8\u91cf\u7684\u4e2d\u503c \u4e09\uff0c\u8fdb\u884c\u4e2d\u503c\u7684\u53ef\u884c\u6027\u68c0\u67e5\uff0c\u4ee5\u6b64\u6765\u8fdb\u884c\u7f29\u5c0f\u533a\u95f4 tips\uff1a\u533a\u95f4\u5212\u5206\u65f6\uff0cif \u540e\u8ddf l \u65f6 \uff0c\u9700\u8981\u8fdb\u884c mid + 1 \uff1b #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 + 10; int q[N]; int n,qq; int main(void) { cin >> n >> qq; for(int i = 0 ; i < n ; i ++) scanf(\"%d\",&q[i]); int k; while(qq --) { cin >> k; // \u5de6\u8fb9\u7684\u7b2c\u4e00\u4e2a int l = 0 , r = n - 1; while(l < r) { int mid = l + r >> 1; if(q[mid] >= k) r = mid; else l = mid + 1 ; } if(q[l] != k)cout << \"-1 -1\" << endl; else{ cout << l << \" \"; l = 0, r = n - 1; while(l < r) { int mid = l + r + 1 >> 1; if(q[mid] <= k )l = mid; else r = mid - 1; } cout << r << endl; } } return 0; }","title":"\u53cc\u6307\u9488\u8fd0\u7b97"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_8","text":"\u4e3a\u4e86\u9632\u6b62\u51fa\u9519\u8bef\uff0c\u4e00\u822c\u90fd\u4f1a\u52a0\u4e0a\u53bb\u9664\u524d\u5bfc 0 \u64cd\u4f5c","title":"\u9ad8\u7cbe\u5ea6"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_9","text":"\u4e00\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u8f93\u5165\u8fd1\u4e24\u4e2a\u957f\u6570\u5b57\u4e32\uff0c\u5e76\u5229\u7528 vector \u6765\u8fdb\u884c\u5b58\u50a8 \u8f6c\u6362\u540e\u7684\u5b57\u7b26\u4e32\uff08\u5012\u5e8f\u5b58\u50a8\uff09 \u4e8c\uff0c\u8fdb\u884c\u4e24\u4e2a vector \u5927\u5c0f\u7684\u5224\u65ad\uff0c\u4ece\u800c\u4fdd\u8bc1\u9009\u53d6\u6700\u5927\u7684\u6570\u636e\u8303\u56f4 \u4e09\uff0c\u5728 add \u51fd\u6570\u4e2d\u5b9a\u4e49\u51fa\u4e00\u4e2a\u53d8\u91cf t \u7528\u4e8e\u4e0a\u4e00\u6b21\u52a0\u6cd5\u4e4b\u540e\u591a\u4f59\u7684\u5341\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> using namespace std; vector<int>add(vector<int> a,vector<int> b) { vector<int> c; if(a.size() < b.size()) return add(b,a); int t = 0; for(int i = 0 ; i < a.size(); i ++) { t += a[i]; if(i < b.size()) t += b[i]; c.push_back(t%10); t /=10; } if (t) c.push_back(t); return c; } int main(void) { string a,b; cin >> a >> b; vector <int>A,B; for (int i = a.size() - 1; i >= 0; i -- ) A.push_back(a[i] - '0'); for (int i = b.size() - 1; i >= 0; i -- ) B.push_back(b[i] - '0'); auto C = add(A, B); for (int i = C.size() - 1; i >= 0; i -- ) cout << C[i]; cout << endl; return 0; }","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_10","text":"\u4e00\uff0c\u7531\u4e8e\u957f\u5ea6\u548c\u5927\u5c0f\u4e0d\u540c\uff0c\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u8d1f\u53f7\u7684\u60c5\u51b5\uff0c\u9700\u8981\u7528 cmp \u51fd\u6570\u6bd4\u8f83\u4e00\u4e0b \u4e8c\uff0c\u7528 t \u6765\u8868\u793a\u4e0a\u4e00\u6b21\u8ba1\u7b97\u7684\u501f\u4f4d \u4e09\uff0c\u6bcf\u6b21\u4f1a\u8fdb\u884c (t+10) % 10 \u64cd\u4f5c \u9632\u6b62\u63a8\u5165\u8d1f\u6570 #include <iostream> #include <vector> #include <algorithm> using namespace std; bool cmp(vector<int> a,vector <int> b) { if(a.size() != b.size()) return a.size() > b.size(); for(int i = a.size() - 1 ;i >= 0 ; i --) { if(a[i] != b[i]) return a[i] > b[i]; } return true; } vector<int> sub(vector<int> a,vector <int> b) { vector <int> c; int t = 0; for(int i = 0 ; i < a.size() ; i ++) { t = a[i] - t; if(i < b.size()) t -= b[i]; c.push_back((t+10) % 10); if(t < 0) t = 1; else t = 0; } while(c.size() > 1 && c.back() == 0) c.pop_back(); return c; } int main(void) { string a,b; cin >> a>> b; vector<int> A,B,C; for(int i = a.size() - 1 ; i >= 0 ; i --) A.push_back(a[i] - '0'); for(int i = b.size() - 1 ; i >= 0 ; i --) B.push_back(b[i] - '0'); if(cmp(A,B)) C = sub(A,B); else{ C = sub(B,A); cout << \"-\"; } for(int i = C.size() - 1 ; i >= 0 ; i --) cout << C[i] ; cout << endl; return 0; }","title":"\u9ad8\u7cbe\u5ea6\u51cf\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_11","text":"\u4e00\uff0c\u5f53 t \u4e0d\u4e3a 0 \u7684\u65f6\u5019\uff0c\u9700\u8981\u7ee7\u7eed\u8fdb\u884c\u64cd\u4f5c \u4e8c\uff0c\u53bb\u9664\u524d\u5bfc 0 \u4e09\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u518d a \u7684 size \u5185 #include <iostream> #include <vector> #include <algorithm> using namespace std; vector<int> mul(vector<int> a,int b) { vector <int> c; int t = 0; for(int i = 0 ; i < a.size() || t; i ++) { if(i < a.size())t = t + a[i] * b; c.push_back(t % 10); t = t / 10; } while(c.size() > 1&& c.back() == 0) c.pop_back(); return c; } int main(void) { string a; int b; cin >> a; cin >> b; vector<int> A,C; for(int i = a.size() - 1 ; i >= 0 ; i --) A.push_back(a[i] - '0'); // for(int i = b.size() - 1 ; i >= 0 ; i --) B.push_back(b[i] - '0'); C = mul(A,b); for(int i = C.size() - 1 ; i >= 0 ; i--) cout << C[i]; return 0; } #include <iostream> #include <vector> using namespace std; vector<int> mul(vector<int> &A, vector<int> &B) { vector<int> C(A.size() + B.size(), 0); // \u521d\u59cb\u5316\u4e3a 0\uff0c\u4e14999*99\u6700\u591a 5 \u4f4d for (int i = 0; i < A.size(); i++) for (int j = 0; j < B.size(); j++) C[i + j] += A[i] * B[j]; int t = 0; for (int i = 0; i < C.size(); i++) { // i = C.size() - 1\u65f6 t \u4e00\u5b9a\u5c0f\u4e8e 10 t += C[i]; C[i] = t % 10; t /= 10; } while (C.size() > 1 && C.back() == 0) C.pop_back(); // \u5fc5\u987b\u8981\u53bb\u524d\u5bfc 0\uff0c\u56e0\u4e3a\u6700\u9ad8\u4f4d\u5f88\u53ef\u80fd\u662f 0 return C; } int main() { string a, b; cin >> a >> b; // a = \"1222323\", b = \"2323423423\" vector<int> A, B; for (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0'); for (int i = b.size() - 1; i >= 0; i--) B.push_back(b[i] - '0'); auto C = mul(A, B); for (int i = C.size() - 1; i >= 0; i--) cout << C[i]; return 0; }","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_12","text":"\u4e00\uff0c\u9700\u8981\u4ece\u9ad8\u4f4d\u6570\u5f00\u59cb\u8fdb\u884c\u8fd0\u7b97 \u4e8c\uff0c\u6bcf\u6b21\u90fd\u662f\u53d6\u4f59\u64cd\u4f5c \u4e09\uff0c\u7ed3\u675f\u540e\u9700\u8981 reverse \u4e00\u4e0b\uff0c\u53ef\u4ee5\u66f4\u597d\u5339\u914d\u524d\u9762\u7684\u503c #include <iostream> #include <algorithm> #include <vector> using namespace std; vector<int> divv(vector<int> a,int b,int & r) { vector<int> c; for(int i = a.size() - 1 ; i >= 0 ; i --) { r = r * 10 + a[i]; c.push_back(r / b); r = r % b; } reverse(c.begin(),c.end()); while(c.size() > 1 && c.back() == 0) c.pop_back(); return c; } int main(void) { string a; int b; cin >> a >> b; vector<int> A,c; for(int i = a.size() - 1 ; i >= 0 ; i -- ) A.push_back(a[i] - '0'); int r = 0; c = divv(A,b,r); for(int i = c.size() - 1 ; i >= 0 ; i --) cout << c[i]; cout << endl; cout << r << endl; return 0; }","title":"\u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_13","text":"","title":"\u79bb\u6563\u5316"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_14","text":"\u524d\u7f00\u548c\u548c\u5dee\u5206\u64cd\u4f5c\u90fd\u9700\u8981\u6570\u7ec4\u4e0b\u6807\u4ece 1 \u5f00\u59cb","title":"\u524d\u7f00\u548c\u548c\u5dee\u5206"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_15","text":"\u53ef\u4ee5\u5229\u7528\u539f\u6570\u7ec4\u81ea\u52a0\u6765\u53d6\u5230\u524d\u7f00\u548c\u6570\u7ec4 #include <iostream> #include <algorithm> using namespace std; const int N = 1e5 +10; int a[N]; int s[N]; int n,m; int main(void) { cin >> n >> m; for(int i = 1 ; i <= n ; i ++) cin >> a[i]; for(int i = 1 ; i <= n ; i++) a[i] += a[i-1]; while(m --) { int l,r; cin >> l >> r; cout << a[r] - a[l-1] << endl; } return 0; }","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_16","text":"#include <iostream> #include <algorithm> using namespace std; const int N = 1010; int a[N][N]; int s[N][N]; int n,m,q; int main(void) { cin >> n >> m >> q; for(int i = 1; i <= n ;i ++) for(int j = 1 ; j <= m ;j ++) cin >> a[i][j]; for(int i = 1 ; i <= n ; i ++) for(int j = 1 ; j <= m ; j++) s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j]; while(q--) { int x1,x2,y1,y2; cin >> x1 >> y1 >> x2 >> y2; cout << s[x2][y2] - s[x2][y1-1] - s[x1 - 1][y2] + s[x1-1][y1-1] << endl; } return 0; }","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_17","text":"\u5dee\u5206\u6570\u7ec4\u5c31\u662f\u524d\u7f00\u548c\u6570\u7ec4\u7684\u9006\u6570\u7ec4\uff0c\u4ed6\u7684\u524d n \u9879\u548c\u5c31\u662f\u524d\u7f00\u548c\u6570\u7ec4 \u53ef\u4ee5\u76f4\u63a5\u7528\u63d2\u5165\u7684\u65b9\u5f0f\u6765\u6c42\u51fa\u5dee\u5206\u6570\u7ec4\uff0c\u4e00\u822c\u7528\u4e8e\u533a\u95f4\u7684\u52a0\u51cf #include <iostream> using namespace std; const int N = 1e5 + 10; int a[N],b[N]; void insert(int l,int r,int c) { b[l] = b[l] + c; b[r+1] = b[r+1] - c; } int main(void) { int n,m; cin>> n >> m; for(int i = 1;i<=n;i++) cin>>a[i]; for(int i = 1;i<=n;i++) insert(i,i,a[i]); while(m--) { int l, r, c; cin >> l >> r >> c; insert(l,r,c); } for(int i = 1;i<=n;i++) b[i] += b[i-1]; for(int i = 1;i<=n;i++) cout<<b[i]<<\" \"; }","title":"\u4e00\u7ef4\u5dee\u5206"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_18","text":"#include <iostream> using namespace std; const int N = 1010; int a[N][N],b[N][N]; void insert(int x1,int y1,int x2,int y2,int c) { b[x1][y1] += c; b[x2 +1][y1] -= c; b[x1][y2+1] -=c; b[x2+1][y2+1] +=c; } int main(void) { int n,m,q; cin>>n>>m>>q; for(int i = 1;i<=n;i++) for(int j =1;j<=m;j++) cin>>a[i][j]; for(int i = 1;i<=n;i++) for(int j =1;j<=m;j++) insert(i,j,i,j,a[i][j]); while(q--) { int x1,x2,y1,y2,c; cin>>x1>>y1>>x2>>y2>>c; insert(x1,y1,x2,y2,c); } for(int i =1;i<=n;i++) for(int j =1 ;j<=m;j++) b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1]; for (int i = 1; i <= n; i ++ ) { for (int j = 1; j <= m; j ++ ) printf(\"%d \", b[i][j]); puts(\"\"); } }","title":"\u4e8c\u7ef4\u5dee\u5206"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_19","text":"\u4e00\uff0c\u53cc\u6307\u9488\u4e00\u822c\u7528\u4e8e\u5904\u7406\u7ebf\u6027\u5373\u5177\u6709\u5355\u8c03\u6027\u7684\u64cd\u4f5c \u4e8c\uff0c\u4e00\u822c\u6a21\u677f\u5982\u4e0b #include <iostream> using namespace std; const int N = 1e5 +10; int q[N]; int flag[N]; int main(void) { int n; cin>>n; int ans = 0; for(int i = 0;i<n;i++) cin>>q[i]; for(int i = 0,j = 0;i<n;i++) { flag[q[i]]++; while(j<=i && flag[q[i]]>1) { flag[q[j]]--; j++; } ans = max(ans,i-j+1); } cout<<ans<<endl; return 0; }","title":"\u53cc\u6307\u9488"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_20","text":"(lowbit) O(nlogn)O(nlogn) \u4f7f\u7528lowbit\u64cd\u4f5c\uff0c\u8fdb\u884c\uff0c\u6bcf\u6b21lowbit\u64cd\u4f5c\u622a\u53d6\u4e00\u4e2a\u6570\u5b57\u6700\u540e\u4e00\u4e2a1\u540e\u9762\u7684\u6240\u6709\u4f4d\uff0c\u6bcf\u6b21\u51cf\u53bblowbit\u5f97\u5230\u7684\u6570\u5b57\uff0c\u76f4\u5230\u6570\u5b57\u51cf\u52300\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u7ec81\u7684\u4e2a\u6570\uff0c lowbit\u539f\u7406 \u6839\u636e\u8ba1\u7b97\u673a\u8d1f\u6570\u8868\u793a\u7684\u7279\u70b9\uff0c\u5982\u4e00\u4e2a\u6570\u5b57\u539f\u7801\u662f10001000\uff0c\u4ed6\u7684\u8d1f\u6570\u8868\u793a\u5f62\u52bf\u662f\u8865\u7801\uff0c\u5c31\u662f\u53cd\u7801+1\uff0c\u53cd\u7801\u662f01110111\uff0c\u52a0\u4e00\u5219\u662f01111000\uff0c\u4e8c\u8005\u6309\u4f4d\u4e0e\u5f97\u5230\u4e861000\uff0c\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684lowbit\u64cd\u4f5c #include <iostream> using namespace std; const int N = 1e6 +10; int q[N]; int n; int main(void) { cin >> n; while(n--) { int x; cin >> x; int res = 0; while(x > 0) x = x - (x&-x),res ++; cout << res <<\" \"; } return 0; }","title":"\u4f4d\u8fd0\u7b97"},{"location":"algorithm/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/#_21","text":"","title":"\u533a\u95f4\u5408`="},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 \u7b97\u6cd5\u7684\u6982\u5ff5 \u7b97\u6cd5\u662f\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u7684\u63cf\u8ff0\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u8868\u73b0\u4e3a\u6307\u4ee4\u7684\u6709\u9650\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u6761\u6307\u4ee4\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c \u7b97\u6cd5\u6709\u4e94\u4e2a\u57fa\u672c\u7279\u5f81\uff1a\u8f93\u5165\uff0c\u8f93\u51fa\uff0c\u6709\u7a77\u6027\uff0c\u786e\u5b9a\u6027\u548c\u53ef\u884c\u6027\uff1b \u6709\u7a77\u6027 \u5728\u7b97\u6cd5\u6267\u884c\u6709\u9650\u7684\u6b65\u9aa4\u540e\uff0c\u81ea\u52a8\u7ed3\u675f\u800c\u4e0d\u4f1a\u51fa\u73b0\u65e0\u9650\u5faa\u73af\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u5728\u53ef\u63a5\u53d7\u7684\u65f6\u95f4\u5b8c\u6210 \u786e\u5b9a\u6027 \u7b97\u6cd5\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u90fd\u5177\u6709\u786e\u5b9a\u7684\u542b\u4e49 \u4e0d\u4f1a\u51fa\u73b0\u4e8c\u4e49\u6027 \u7b97\u6cd5\u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b\uff0c\u53ea\u6709\u4e00\u6761\u6267\u884c\u8def\u5f84\uff0c\u76f8\u540c\u7684\u8f93\u5165\u76f4\u63a5\u80fd\u6709\u76f8\u540c\u7684\u8f93\u51fa\u7ed3\u679c \u7b97\u6cd5\u7684\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u5e94\u8fd8\u88ab\u7cbe\u786e\u5b9a\u4e49\u800c\u65e0\u6b67\u4e49 \u53ef\u884c\u6027 \u7b97\u6cd5\u7684\u6bcf\u4e00\u6b65\u5fc5\u987b\u662f\u53ef\u6267\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u6b65\u90fd\u80fd\u591f\u901a\u8fc7\u6709\u9650\u6b21\u6570\u5b8c\u6210 \u7b97\u6cd5\u8bbe\u8ba1\u7684\u8981\u6c42 \u7b97\u6cd5\u7684\u6b63\u786e\u6027\u662f\u6307\u7b97\u6cd5\u81f3\u5c11\u5e94\u8be5\u5177\u6709\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u52a0\u5de5\u5904\u7406\u65e0\u6b67\u4e49\u578b\uff0c\u80fd\u6b63\u786e\u53cd\u5e94\u95ee\u9898\u7684\u9700\u6c42\uff0c\u80fd\u8fc7\u591f\u5f97\u5230\u95ee\u9898\u7684\u6b63\u786e\u7b54\u6848 \u7b97\u6cd5\u8bbe\u8ba1\u7684\u56db\u4e2a\u5c42\u6b21 \u7b97\u6cd5\u7a0b\u5e8f\u6ca1\u6709\u8bed\u6cd5\u9519\u8bef \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u5408\u6cd5\u8f93\u5165\u80fd\u591f\u4ea7\u751f\u6ee1\u8db3\u8981\u6c42\u7684\u8f93\u51fa \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u975e\u6cd5\u8f93\u5165\u80fd\u591f\u4ea7\u751f\u6ee1\u8db3\u89c4\u683c\u7684\u8bf4\u660e \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u6545\u610f\u5201\u96be\u7684\u6d4b\u8bd5\u8f93\u5165\u90fd\u6709\u7740\u6ee1\u8db3\u8981\u6c42\u7684\u8f93\u51fa\u7ed3\u679c \u65f6\u95f4\u6548\u7387\u9ad8\u548c\u5b58\u50a8\u91cf\u4f4e \u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784 \u903b\u8f91\u7ed3\u6784\u662f\u6307\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb \u7269\u7406\u7ed3\u6784\u662f\u6307\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u50a8\u5f62\u5f0f \u903b\u8f91\u7ed3\u6784\u5206\u7684\u5206\u7c7b \u96c6\u5408\u7ed3\u6784 \uff1a\u96c6\u5408\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u9664\u4e86\u540c\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u5916\uff0c\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u5176\u4ed6\u533a\u4e0d\u4e09\u4e0d\u56db\u7684\u5173\u7cfb \u7ebf\u6027\u7ed3\u6784 \uff1a\u7ebf\u6027\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb \u6811\u5f62\u7ed3\u6784 \uff1a\u6811\u5f62\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u5c42\u6b21\u5173\u7cfb \u56fe\u5f62\u7ed3\u6784 \uff1a\u56fe\u5f62\u7ed3\u6784\u7684\u6570\u636e\u5143\u7d20\u65f6\u591a\u5bf9\u591a\u7684\u5173\u7cfb \u7269\u7406\u7ed3\u6784\u7684\u5b9a\u4e49\u4e0e\u5206\u7c7b \u7269\u7406\u7ed3\u6784\u7814\u7a76\u7684\u662f\u5982\u4f55\u5427\u6570\u636e\u5143\u7d20\u5b58\u50a8\u5230\u8ba1\u7b97\u673a\u7684\u5b58\u50a8\u5668\u4e2d \u6570\u636e\u5143\u7d20\u7684\u5b58\u50a8\u7ed3\u6784\u5f62\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff1a\u987a\u5e8f\u5b58\u50a8\u548c\u94fe\u5f0f\u5b58\u50a8 \u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 \uff1a\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u662f\u628a\u6570\u636e\u5143\u7d20\u5b58\u653e\u5728\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u91cc\uff0c\u5176\u6570\u636e\u95f4\u7684\u903b\u8f91\u5173\u7cfb\u548c\u7269\u7406\u5173\u7cfb\u662f\u4e00\u81f4\u7684 \u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 \uff1a\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u662f\u6307\u5427\u6570\u636e\u5143\u7d20\u5b58\u653e\u5728\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u91cc\uff0c\u8fd9\u7ec4\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684\uff08\u8fd9\u6837\u8bf4\u7684\u8bdd\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u7684\u6570\u636e\u5143\u7d20\u5b58\u50a8\u5173\u7cfb\u4e0d\u80fd\u53cd\u5e94\u5176\u903b\u8f91\u5173\u7cfb\uff0c\u56e0\u6b64\u9700\u8981\u7528\u4e00\u4e2a\u6307\u9488\u5b58\u653e\u6570\u636e\u5143\u7d20\u7684\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u8054\u7684\u6570\u636e\u5143\u7d20\u7684\u4f4d\u7f6e\uff09 \u6570\u636e\u7c7b\u578b \uff1a \u6570\u636e\u7c7b\u578b\u662f\u6307\u4e00\u7ec4\u6027\u8d28\u76f8\u540c\u7684\u503c\u7684\u96c6\u5408\u53ca\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u4e9b\u64cd\u4f5c\u7684\u603b\u79f0","title":"\u6570\u636e\u7ed3\u6784"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u7b97\u6cd5\u662f\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u6c42\u89e3\u6b65\u9aa4\u7684\u63cf\u8ff0\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u8868\u73b0\u4e3a\u6307\u4ee4\u7684\u6709\u9650\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u6761\u6307\u4ee4\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c \u7b97\u6cd5\u6709\u4e94\u4e2a\u57fa\u672c\u7279\u5f81\uff1a\u8f93\u5165\uff0c\u8f93\u51fa\uff0c\u6709\u7a77\u6027\uff0c\u786e\u5b9a\u6027\u548c\u53ef\u884c\u6027\uff1b","title":"\u7b97\u6cd5\u7684\u6982\u5ff5"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"\u5728\u7b97\u6cd5\u6267\u884c\u6709\u9650\u7684\u6b65\u9aa4\u540e\uff0c\u81ea\u52a8\u7ed3\u675f\u800c\u4e0d\u4f1a\u51fa\u73b0\u65e0\u9650\u5faa\u73af\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u5728\u53ef\u63a5\u53d7\u7684\u65f6\u95f4\u5b8c\u6210","title":"\u6709\u7a77\u6027"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"\u7b97\u6cd5\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u90fd\u5177\u6709\u786e\u5b9a\u7684\u542b\u4e49 \u4e0d\u4f1a\u51fa\u73b0\u4e8c\u4e49\u6027 \u7b97\u6cd5\u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b\uff0c\u53ea\u6709\u4e00\u6761\u6267\u884c\u8def\u5f84\uff0c\u76f8\u540c\u7684\u8f93\u5165\u76f4\u63a5\u80fd\u6709\u76f8\u540c\u7684\u8f93\u51fa\u7ed3\u679c \u7b97\u6cd5\u7684\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u5e94\u8fd8\u88ab\u7cbe\u786e\u5b9a\u4e49\u800c\u65e0\u6b67\u4e49","title":"\u786e\u5b9a\u6027"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","text":"\u7b97\u6cd5\u7684\u6bcf\u4e00\u6b65\u5fc5\u987b\u662f\u53ef\u6267\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u6b65\u90fd\u80fd\u591f\u901a\u8fc7\u6709\u9650\u6b21\u6570\u5b8c\u6210","title":"\u53ef\u884c\u6027"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","text":"\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u662f\u6307\u7b97\u6cd5\u81f3\u5c11\u5e94\u8be5\u5177\u6709\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u52a0\u5de5\u5904\u7406\u65e0\u6b67\u4e49\u578b\uff0c\u80fd\u6b63\u786e\u53cd\u5e94\u95ee\u9898\u7684\u9700\u6c42\uff0c\u80fd\u8fc7\u591f\u5f97\u5230\u95ee\u9898\u7684\u6b63\u786e\u7b54\u6848 \u7b97\u6cd5\u8bbe\u8ba1\u7684\u56db\u4e2a\u5c42\u6b21 \u7b97\u6cd5\u7a0b\u5e8f\u6ca1\u6709\u8bed\u6cd5\u9519\u8bef \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u5408\u6cd5\u8f93\u5165\u80fd\u591f\u4ea7\u751f\u6ee1\u8db3\u8981\u6c42\u7684\u8f93\u51fa \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u975e\u6cd5\u8f93\u5165\u80fd\u591f\u4ea7\u751f\u6ee1\u8db3\u89c4\u683c\u7684\u8bf4\u660e \u7b97\u6cd5\u7a0b\u5e8f\u5bf9\u4e8e\u6545\u610f\u5201\u96be\u7684\u6d4b\u8bd5\u8f93\u5165\u90fd\u6709\u7740\u6ee1\u8db3\u8981\u6c42\u7684\u8f93\u51fa\u7ed3\u679c \u65f6\u95f4\u6548\u7387\u9ad8\u548c\u5b58\u50a8\u91cf\u4f4e","title":"\u7b97\u6cd5\u8bbe\u8ba1\u7684\u8981\u6c42"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","text":"\u903b\u8f91\u7ed3\u6784\u662f\u6307\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb \u7269\u7406\u7ed3\u6784\u662f\u6307\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u50a8\u5f62\u5f0f","title":"\u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","text":"\u96c6\u5408\u7ed3\u6784 \uff1a\u96c6\u5408\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u9664\u4e86\u540c\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u5916\uff0c\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u5176\u4ed6\u533a\u4e0d\u4e09\u4e0d\u56db\u7684\u5173\u7cfb \u7ebf\u6027\u7ed3\u6784 \uff1a\u7ebf\u6027\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb \u6811\u5f62\u7ed3\u6784 \uff1a\u6811\u5f62\u7ed3\u6784\u4e2d\u7684\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u5c42\u6b21\u5173\u7cfb \u56fe\u5f62\u7ed3\u6784 \uff1a\u56fe\u5f62\u7ed3\u6784\u7684\u6570\u636e\u5143\u7d20\u65f6\u591a\u5bf9\u591a\u7684\u5173\u7cfb","title":"\u903b\u8f91\u7ed3\u6784\u5206\u7684\u5206\u7c7b"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","text":"\u7269\u7406\u7ed3\u6784\u7814\u7a76\u7684\u662f\u5982\u4f55\u5427\u6570\u636e\u5143\u7d20\u5b58\u50a8\u5230\u8ba1\u7b97\u673a\u7684\u5b58\u50a8\u5668\u4e2d \u6570\u636e\u5143\u7d20\u7684\u5b58\u50a8\u7ed3\u6784\u5f62\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff1a\u987a\u5e8f\u5b58\u50a8\u548c\u94fe\u5f0f\u5b58\u50a8 \u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 \uff1a\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u662f\u628a\u6570\u636e\u5143\u7d20\u5b58\u653e\u5728\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u91cc\uff0c\u5176\u6570\u636e\u95f4\u7684\u903b\u8f91\u5173\u7cfb\u548c\u7269\u7406\u5173\u7cfb\u662f\u4e00\u81f4\u7684 \u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 \uff1a\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u662f\u6307\u5427\u6570\u636e\u5143\u7d20\u5b58\u653e\u5728\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u91cc\uff0c\u8fd9\u7ec4\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684\uff08\u8fd9\u6837\u8bf4\u7684\u8bdd\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u7684\u6570\u636e\u5143\u7d20\u5b58\u50a8\u5173\u7cfb\u4e0d\u80fd\u53cd\u5e94\u5176\u903b\u8f91\u5173\u7cfb\uff0c\u56e0\u6b64\u9700\u8981\u7528\u4e00\u4e2a\u6307\u9488\u5b58\u653e\u6570\u636e\u5143\u7d20\u7684\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u76f8\u5173\u8054\u7684\u6570\u636e\u5143\u7d20\u7684\u4f4d\u7f6e\uff09","title":"\u7269\u7406\u7ed3\u6784\u7684\u5b9a\u4e49\u4e0e\u5206\u7c7b"},{"location":"algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_10","text":"","title":"\u6570\u636e\u7c7b\u578b \uff1a \u6570\u636e\u7c7b\u578b\u662f\u6307\u4e00\u7ec4\u6027\u8d28\u76f8\u540c\u7684\u503c\u7684\u96c6\u5408\u53ca\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u4e9b\u64cd\u4f5c\u7684\u603b\u79f0"},{"location":"nju-pa/Pa1_Summary/","text":"Pa1\u603b\u7ed3 Pa1.1 \u5728\u5f00\u59cb\u6109\u5feb\u7684PA\u4e4b\u65c5\u4e4b\u524d \u200b \u672c\u6b21\u5b9e\u9a8c\u662f\u57fa\u4e8e riscv32 \u6765\u5b8c\u6210\u7684\uff0c\u5982\u679c\u9009\u62e9\u7684\u5176\u4ed6ISA\uff0c\u53ef\u4ee5\u53c2\u8003\u601d\u8def \u5f00\u5929\u8f9f\u5730\u7684\u7bc7\u7ae0 \u200b \u8ba1\u7b97\u673a\u53ef\u4ee5\u6ca1\u6709\u5bc4\u5b58\u5668\u5417\uff1f\uff08\u5efa\u8bae\u4e8c\u5468\u76ee\u601d\u8003\uff09--\u7b49\u5f85\u4e8c\u5468\u76ee\u8865\u5145 \u200b \u5c1d\u8bd5\u7406\u89e3\u8ba1\u7b97\u673a\u5982\u4f55\u8ba1\u7b97\uff1f\u753b\u51fa1+2+...+100\u7684\u72b6\u6001\u673a \u200b (0,x ,x )->(1,0 ,x )->(2,0 ,0 )->(3,0 ,1 )->(4,1 ,1 )->(5,1 ,2 )->(6,3 ,2 )->(7,3 ,3 )->(8,6 ,3 )->(9,6 ,4 )->(10,10 ,4 )...\u4f9d\u6b21\u7c7b\u63a8\uff08\u4e24\u6b21\u4e00\u5faa\u73af\uff0cr2+1,r1+=r2\uff09 RTFSC \u200b \u5728 cmd_c() \u51fd\u6570\u4e2d, \u8c03\u7528 cpu_exec() \u7684\u65f6\u5019\u4f20\u5165\u4e86\u53c2\u6570 -1 , \u4f60\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5417? cmd_c \u51fd\u6570\u5728 monitior/sdb/sdb.c \u4e2d\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u8ffd\u8e2a cpu_exec() \u51fd\u6570\uff0c\u53ef\u4ee5\u5728 CPU \u76f8\u5173\u4ee3\u7801\u4e2d\u627e\u5230\u5982\u4e0b\u51fd\u6570\u5b9a\u4e49 /* Simulate how the CPU works. */ void cpu_exec(uint64_t n) { g_print_step = (n < MAX_INST_TO_PRINT); switch (nemu_state.state) { case NEMU_END: case NEMU_ABORT: printf(\"Program execution has ended. To restart the program, exit NEMU and run again.\\n\"); return; default: nemu_state.state = NEMU_RUNNING; } uint64_t timer_start = get_time(); execute(n); ... } } \u200b \u53ef\u4ee5\u53d1\u73b0\u7ee7\u7eed\u8c03\u7528\u4e86\u51fd\u6570 execute static void execute(uint64_t n) { Decode s; for (;n > 0; n --) { exec_once(&s, cpu.pc); g_nr_guest_inst ++; trace_and_difftest(&s, cpu.pc); if (nemu_state.state != NEMU_RUNNING) break; IFDEF(CONFIG_DEVICE, device_update()); } } \u200b \u56e0\u6b64\u5f53\u4f20\u5165 -1 \u7684\u65f6\u5019\uff0c for \u5faa\u73af\u4e0d\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u76f4\u63a5\u5728 cpu_exec \u51fd\u6570\u4e2d\u6267\u884c\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u4e0d\u4f1a\u8fdb\u884c\u65b0\u7684\u6307\u4ee4\u3002 \u4e3a\u4e86\u6d4b\u8bd5\u5927\u5bb6\u662f\u5426\u5df2\u7ecf\u7406\u89e3\u6846\u67b6\u4ee3\u7801, \u6211\u4eec\u7ed9\u5927\u5bb6\u8bbe\u7f6e\u4e00\u4e2a\u7ec3\u4e60: \u5982\u679c\u5728\u8fd0\u884cNEMU\u4e4b\u540e\u76f4\u63a5\u952e\u5165 q \u9000\u51fa, \u4f60\u4f1a\u53d1\u73b0\u7ec8\u7aef\u8f93\u51fa\u4e86\u4e00\u4e9b\u9519\u8bef\u4fe1\u606f. \u8bf7\u5206\u6790\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u662f\u4ec0\u4e48\u539f\u56e0\u9020\u6210\u7684, \u7136\u540e\u5c1d\u8bd5\u5728NEMU\u4e2d\u4fee\u590d\u5b83. \u200b \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5148\u53bb\u89c2\u5bdf\u8f93\u5165 q \u4e4b\u540e\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f static int cmd_q(char *args) { return -1; } \u200b \u5b83\u4f1a\u76f4\u63a5\u8fd4\u56de -1 \uff0c\u6211\u4eec\u56de\u5230 main_loop \u4e2d int i; for (i = 0; i < NR_CMD; i ++) { if (strcmp(cmd, cmd_table[i].name) == 0) { if (cmd_table[i].handler(args) < 0) { return; } break; } } \u200b \u4ece\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd4\u56de\u503c\u5c0f\u4e8e0\u7684\u65f6\u5019\u4f1a\u76f4\u63a5 return \u6211\u4eec\u7ee7\u7eed\u8ffd\u8e2a\uff0c return \u4e4b\u540e\u56de\u5230\u4e86 nemu-main.c \u4e2d /* Start engine. */ engine_start(); return is_exit_status_bad(); } \u200b \u5176\u4e2d engine_start() \u5c31\u662f\u542f\u52a8 main_loop \u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd4\u56de\u7684\u662f is_exit_status_bad \u6211\u4eec\u53ef\u4ee5\u5728 utils \u4e2d\u627e\u5230\u4ed6 int is_exit_status_bad() { printf(\"nemu_state = %d\\n\",nemu_state.state); int good = (nemu_state.state == NEMU_END && nemu_state.halt_ret == 0) || (nemu_state.state == NEMU_QUIT); return !good; } \u200b \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5728 cmd_q \u51fd\u6570\u4e2d\u5c06 NEMU_STATE \u8bbe\u7f6e\u4e3a NEMU_QUIT \u5373\u53ef,\u4ee3\u7801\u5982\u4e0b static int cmd_q(char *args) { nemu_state.state = NEMU_QUIT; return -1; } \u57fa\u7840\u8bbe\u65bd \u5728\u8fd9\u91cc\u4ee5\u53ca\u63a5\u4e0b\u4e00\u4e2a\u5c0f\u7ae0\u8282\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5982\u4e0b\u51e0\u4e2a\u57fa\u672c\u529f\u80fd\uff1a \u547d\u4ee4 \u683c\u5f0f \u4f7f\u7528\u4e3e\u4f8b \u8bf4\u660e \u5e2e\u52a9(1) help help \u6253\u5370\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f \u7ee7\u7eed\u8fd0\u884c(1) c c \u7ee7\u7eed\u8fd0\u884c\u88ab\u6682\u505c\u7684\u7a0b\u5e8f \u9000\u51fa(1) q q \u9000\u51faNEMU \u5355\u6b65\u6267\u884c si [N] si 10 \u8ba9\u7a0b\u5e8f\u5355\u6b65\u6267\u884c N \u6761\u6307\u4ee4\u540e\u6682\u505c\u6267\u884c, \u5f53 N \u6ca1\u6709\u7ed9\u51fa\u65f6, \u7f3a\u7701\u4e3a 1 \u6253\u5370\u7a0b\u5e8f\u72b6\u6001 info SUBCMD info r info w \u6253\u5370\u5bc4\u5b58\u5668\u72b6\u6001 \u6253\u5370\u76d1\u89c6\u70b9\u4fe1\u606f \u626b\u63cf\u5185\u5b58(2) x N EXPR x 10 $esp \u6c42\u51fa\u8868\u8fbe\u5f0f EXPR \u7684\u503c, \u5c06\u7ed3\u679c\u4f5c\u4e3a\u8d77\u59cb\u5185\u5b58 \u5730\u5740, \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa\u8fde\u7eed\u7684 N \u4e2a4\u5b57\u8282 \u8868\u8fbe\u5f0f\u6c42\u503c p EXPR p $eax + 1 \u6c42\u51fa\u8868\u8fbe\u5f0f EXPR \u7684\u503c, EXPR \u652f\u6301\u7684 \u8fd0\u7b97\u8bf7\u89c1 \u8c03\u8bd5\u4e2d\u7684\u8868\u8fbe\u5f0f\u6c42\u503c \u5c0f\u8282 \u8bbe\u7f6e\u76d1\u89c6\u70b9 w EXPR w *0x2000 \u5f53\u8868\u8fbe\u5f0f EXPR \u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6, \u6682\u505c\u7a0b\u5e8f\u6267\u884c \u5220\u9664\u76d1\u89c6\u70b9 d N d 2 \u5220\u9664\u5e8f\u53f7\u4e3a N \u7684\u76d1\u89c6\u70b9 \u5355\u6b65\u6267\u884c \u200b \u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u76f4\u63a5\u8c03\u7528 cpu_exec \u51fd\u6570\u5373\u53ef static int cmd_si(char *args){ int step = 0; if(args == NULL) step = 1; else sscanf(args,\"%d\",&step);// \u8bfb\u5165 Step cpu_exec(step); return 0; } \u6253\u5370\u5bc4\u5b58\u5668 \u200b \u6211\u4eec\u7ecf\u8fc7 RTFSC \u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728 reg.c \u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u5f53\u524d\u6307\u4ee4\u96c6\u7684\u5bc4\u5b58\u5668\u7ed3\u6784\uff0c\u540c\u65f6\u5728 isa-def \u4e2d\u53ef\u4ee5\u627e\u5230 CPU_state \u7684\u5b9a\u4e49 typedef struct { word_t gpr[32]; // general purpose register; vaddr_t pc; } riscv32_CPU_state; \u200b \u5728\u8fd9\u91cc gpr \u7684\u503c\u5c31\u4ee3\u8868\u4e86\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6253\u5370\u5bc4\u5b58\u5668\u7684\u503c\u7684\u51fd\u6570\u5982\u4e0b: void isa_reg_display() { int length = sizeof(regs) / sizeof(regs[0]); for(int i = 0 ; i < length ; i ++) printf(\"reg$%s ---> %d\\n\",regs[i], cpu.gpr[i]); } \u200b \u540c\u65f6\u9700\u8981\u5728 sdb.c \u4e2d\u5b9a\u4e49 info r static int cmd_info(char *args){ if(args == NULL) printf(\"No args.\\n\"); else if(strcmp(args, \"r\") == 0) isa_reg_display(); else if(strcmp(args, \"w\") == 0) sdb_watchpoint_display(); return 0; } \u626b\u63cf\u5185\u5b58 \u200b \u4e3a\u4e86\u5b9e\u73b0\u626b\u63cf\u5185\u5b58\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 memory \u76f8\u5173\u7684\u4ee3\u7801\u4e2d\u627e\u5230 paddr_read \u8fd9\u4e2a\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u8f93\u5165\u53c2\u6570\u5373\u53ef static int cmd_x(char *args){ char* n = strtok(args,\" \"); char* baseaddr = strtok(NULL,\" \"); int len = 0; paddr_t addr = 0; sscanf(n, \"%d\", &len); sscanf(baseaddr,\"%x\", &addr); for(int i = 0 ; i < len ; i ++) { printf(\"%x\\n\",paddr_read(addr,4));//addr len addr = addr + 4; } return 0; } \u81f3\u6b64pa1\u9636\u6bb51\u7ed3\u675f Pa1.2 \u8868\u8fbe\u5f0f\u6c42\u503c \u8bcd\u6cd5\u5206\u6790 \u200b \u8bcd\u6cd5\u5206\u6790\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u5c31\u662f\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u5206\u89e3\u6210\u6211\u4eec\u5b9a\u4e49\u7684token\u7c7b\u578b\uff0c\u53ca type,val_str \u7684\u7c7b\u578b typedef struct token { int type; char str[32]; } Token; \u200b \u901a\u8fc7\u9605\u8bfb\u624b\u518c\uff0c\u6211\u4eec\u53d1\u73b0\u8bcd\u6cd5\u5206\u6790\u7684\u8fc7\u7a0b\u662f\u6839\u636e\u4e00\u4e2a\u4e2a\u81ea\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\u6765\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u5b9a\u4e49\u89c4\u5219 rules \uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801 enum { TK_NOTYPE = 256, NUM = 1, RESGISTER = 2, HEX = 3, EQ = 4, NOTEQ = 5, OR = 6, AND = 7, ZUO = 8, YOU = 9, LEQ = 10, YINYONG = 11, POINT, NEG }; static struct rule { const char *regex; int token_type; } rules[] = { /* TODO: Add more rules. * Pay attention to the precedence level of different rules. */ {\" +\", TK_NOTYPE}, // spaces {\"\\\\+\", '+'}, // plus {\"\\\\-\", '-'}, // sub {\"\\\\*\", '*'}, // mul {\"\\\\/\", '/'}, // div {\"\\\\(\", ZUO}, {\"\\\\)\", YOU}, /* * Inset the '(' and ')' on the [0-9] bottom case Bug. */ {\"\\\\<\\\\=\", LEQ}, // TODO {\"\\\\=\\\\=\", EQ}, // equal {\"\\\\!\\\\=\", NOTEQ}, {\"\\\\|\\\\|\", OR}, // Opetor {\"\\\\&\\\\&\", AND}, {\"\\\\!\", '!'}, //{\"\\\\$[a-z]*\", RESGISTER}, {\"\\\\$[a-zA-Z]*[0-9]*\", RESGISTER}, {\"0[xX][0-9a-fA-F]+\", HEX}, {\"[0-9]*\", NUM}, }; \u200b \u8fd9\u91cc\u4ee3\u7801\u6ca1\u4ec0\u4e48\u590d\u6742\u7684\u5730\u65b9\uff0c\u4e3b\u8981\u5c31\u662f\u6839\u636e\u4e0d\u540c\u7684\u5b58\u50a8\u7c7b\u578b\u5bf9\u5e94\u4e0a\u4e0d\u540c\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee5\u53ca type \u7c7b\u578b\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u6ce8\u610f \u5148\u540e\u987a\u4e0d\u540c \u4ee5\u53ca \u8f6c\u4e49\u7b26\u53f7\u7684\u4f7f\u7528 \u200b \u5728\u5b9a\u4e49\u597d\u89c4\u5219\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u539f\u672c\u7684 make_tokens \u4ee3\u7801\u4e0a\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b static bool make_token(char *e) { int position = 0; int i; regmatch_t pmatch; nr_token = 0; while (e[position] != '\\0') { /* Try all rules one by one. */ for (i = 0; i < NR_REGEX; i ++) { if (regexec(&re[i], e + position, 1, &pmatch, 0) == 0 && pmatch.rm_so == 0) { // char *substr_start = e + position; int substr_len = pmatch.rm_eo; /* Log(\"match rules[%d] = \\\"%s\\\" at position %d with len %d: %.*s\", i, rules[i].regex, position, substr_len, substr_len, substr_start); */ position += substr_len; /* TODO: Now a new token is recognized with rules[i]. Add codes * to record the token in the array `tokens'. For certain types * of tokens, some extra actions should be performed. */ Token tmp_token; switch (rules[i].token_type) { case '+': tmp_token.type = '+'; tokens[nr_token ++] = tmp_token; break; case '-': tmp_token.type = '-'; tokens[nr_token ++] = tmp_token; break; case '*': tmp_token.type = '*'; tokens[nr_token ++] = tmp_token; break; case '/': tmp_token.type = '/'; tokens[nr_token ++] = tmp_token; break; case 256: break; case '!': tmp_token.type = '!'; tokens[nr_token ++] = tmp_token; break; case 9: tmp_token.type = ')'; tokens[nr_token ++] = tmp_token; break; case 8: tmp_token.type = '('; tokens[nr_token ++] = tmp_token; break; // Special case 1: // num tokens[nr_token].type = 1; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 2: // regex tokens[nr_token].type = 2; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 3: // HEX tokens[nr_token].type = 3; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 4: tokens[nr_token].type = 4; strcpy(tokens[nr_token].str, \"==\"); nr_token++; break; case 5: tokens[nr_token].type = 5; strcpy(tokens[nr_token].str, \"!=\"); nr_token++;case 6: tokens[nr_token].type = 6; strcpy(tokens[nr_token].str, \"||\"); nr_token++; break; case 7: tokens[nr_token].type = 7; strcpy(tokens[nr_token].str, \"&&\"); nr_token++; break; case 10: tokens[nr_token].type = 10; strcpy(tokens[nr_token].str, \"<=\"); nr_token ++; break; default: printf(\"i = %d and No rules is com.\\n\", i); break; } len = nr_token; break; } } if (i == NR_REGEX) { printf(\"no match at position %d\\n%s\\n%*.s^\\n\", position, e, position, \"\"); return false; } } return true; } \u200b \u8fd9\u91cc\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\uff0c\u4ee3\u7801\u7684\u6267\u884c\u903b\u8f91\u662f\u628a\u539f\u59cb\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\uff0c\u9010\u4e2a\u5339\u914d\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 rules \u89c4\u5219\uff0c\u5339\u914d\u6210\u529f\u4e4b\u540e\uff0c\u5c31\u8fdb\u884c\u5904\u7406\u3002\u5728\u6211\u4eec\u7684 tokens \u6570\u7ec4\u4e4b\u4e2d\u52a0\u5165\u6211\u4eec\u5339\u914d\u6210\u529f\u540e\u7684 token \uff0c\u4e3b\u8981\u5305\u62ec\u5b83\u7684\u7c7b\u578b\u4ee5\u53ca\u8bb0\u5f55\u7684\u503c\u3002\u4f46\u662f\u8fd9\u91cc\u7684\u5339\u914d\u4e00\u5b9a\u8981\u5bf9\u5e94\u4e4b\u524d\u5b9a\u4e49\u7684\u89c4\u5219\u3002 \u9012\u5f52\u6c42\u503c \u200b \u901a\u8fc7\u4e0a\u8ff0\u7684\u8868\u8fbe\u5f0f\u5206\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u8868\u8fbe\u5f0f\u6c42\u503c\u4e86\uff0c\u5148\u7ed9\u51fa check_parentheses() \u53c2\u8003\u4ee3\u7801\uff0c\u5c31\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u53cc\u6307\u9488\u7b97\u6cd5 bool check_parentheses(int p, int q) { if(tokens[p].type != '(' || tokens[q].type != ')') return false; int l = p , r = q; while(l < r) { if(tokens[l].type == '('){ if(tokens[r].type == ')') { l ++ , r --; continue; } else r --; } else if(tokens[l].type == ')') return false; else l ++; } return true; } \u200b \u4ece expr.c \u7684\u51fd\u6570\u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u6240\u6709\u7684\u8868\u8fbe\u5f0f\u884c\u4e3a\u90fd\u662f\u4ece expr \u51fd\u6570\u5f00\u59cb\u7684\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0\u6267\u884c\u8ba1\u7b97\u7684\u51fd\u6570\u662f eval ,\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801 uint32_t eval(int p, int q) { if (p > q) { /* Bad expression */ assert(0); return -1; } else if (p == q) { /* Single token. * For now this token should be a number. * Return the value of the number. */ return atoi(tokens[p].str); } else if (check_parentheses(p, q) == true) { /* The expression is surrounded by a matched pair of parentheses. * If that is the case, just throw away the parentheses. */ // printf(\"check p = %d, q = %d\\n\",p + 1 , q - 1); return eval(p + 1, q - 1); } /* else if(check_parentheses(p, q) == false){ printf(\"Unique\\n\"); return -1; } */ else { int op = -1; // op = the position of \u4e3b\u8fd0\u7b97\u7b26 in the token expression; bool flag = false; for(int i = p ; i <= q ; i ++) { if(tokens[i].type == '(') { while(tokens[i].type != ')') i ++; } if(!flag && tokens[i].type == 6){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 7 ){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 5){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 4){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 10){ flag = true; op = max(op, i); } if(!flag && (tokens[i].type == '+' || tokens[i].type == '-')){ flag = true; op = max(op, i); } if(!flag && (tokens[i].type == '*' || tokens[i].type == '/') ){ op = max(op, i); } } // printf(\"op position is %d\\n\", op); // if register return $register int op_type = tokens[op].type; // \u9012\u5f52\u5904\u7406\u5269\u4f59\u7684\u90e8\u5206 uint32_t val1 = eval(p, op - 1); uint32_t val2 = eval(op + 1, q); // printf(\"val1 = %d, val2 = %d \\n\", val1, val2); switch (op_type) { case '+': return val1 + val2; case '-': return val1 - val2; case '*': return val1 * val2; case '/': if(val2 == 0){//printf(\"division can't zero;\\n\"); division_zero = true; return 0; } return val1 / val2; case 4: return val1 == val2; case 5: return val1 != val2; case 6: return val1 || val2; case 7: return val1 && val2; default: printf(\"No Op type.\"); assert(0); } } } \u200b \u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5728\u6761\u4ef6\u5224\u65ad\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u679c p>q \u4ee3\u8868\u4ee3\u7801\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u76f4\u63a5\u62a5\u9519\u5373\u53ef\uff1b\u5f53 p==q \u7684\u65f6\u5019\u4ee3\u8868\u6211\u4eec\u9700\u8981\u53d6\u51fa\u5176\u4e2d\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 atoi \u51fd\u6570\u76f4\u63a5\u5c06\u5b57\u7b26\u6570\u7ec4\u8f6c\u4e3a int \u5373\u53ef\uff1b\u5f53 p,q \u901a\u8fc7\u62ec\u53f7\u6821\u9a8c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u9012\u5f52\u5904\u7406\u62ec\u53f7\u91cc\u9762\u7684\u90e8\u5206\u5373\u53ef\uff1b\u6700\u540e\u5c31\u662f\u8fdb\u5165\u4e86\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6839 \u636e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5f97\u51fa\u4e3b\u8fd0\u7b97\u7b26\u7684\u4f4d\u7f6e \uff0c\u8fd9\u91cc\u7684\u5b9e\u73b0\u601d\u8def\u662f\u901a\u8fc7\u8bb0\u5f55\u4e00\u4e2a\u6807\u8bb0 flag \u7684\u503c\uff0c\u7136\u540e\u518d\u904d\u5386\u7684\u65f6\u5019\uff0c\u6839\u636e\u4f18\u5148\u7ea7\u6765\u8fdb\u884c if \u5224\u65ad\uff0c\u4f18\u5148\u7ea7\u4f4e\u7684\u5148\u8bb0\u5f55\u540c\u65f6\u5c06 flag \u7684\u503c\u8fdb\u884c\u6539\u53d8\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u5f97\u51fa\u4e3b\u8fd0\u7b97\u7b26\u7684\u4f4d\u7f6e\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86 \u4f4e\u4f18\u5148\u7ea7\u4ee5\u53ca\u6700\u540e\u51fa\u73b0\u7684\u8fd0\u7b97\u7b26\u4e3a\u4e3b\u8fd0\u7b97\u7b26 \uff1b\u4e4b\u540e\u5c31\u8fdb\u884c\u8ba1\u7b97\u5904\u7406\u5373\u53ef\u3002 \u200b \u4f46\u662f\u5728\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u503c\uff08\u8d1f\u6570\uff0c\u5341\u516d\u8fdb\u5236\u6570\u7b49\uff09\uff0c\u6211\u4eec\u9700\u8981\u518d make_tokens \u4e4b\u540e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\uff1a /* * Get length */ int tokens_len = 0; for(int i = 0 ; i < 30 ; i ++) { if(tokens[i].type == 0) break; tokens_len ++; } /* * Init the tokens regex * TODO * */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == 2) { bool flag = true; int tmp = isa_reg_str2val(tokens[i].str, &flag); if(flag){ int2char(tmp, tokens[i].str); // transfrom the str --> $egx }else{ printf(\"Transfrom error. \\n\"); assert(0); } } } /* * Init the tokens HEX */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == 3)// Hex num { int value = strtol(tokens[i].str, NULL, 16); int2char(value, tokens[i].str); } } /* * Init the tokens str. 1 ==> -1. * */ for(int i = 0 ; i < tokens_len ; i ++) { if((tokens[i].type == '-' && i > 0 && tokens[i-1].type != NUM && tokens[i+1].type == NUM) || (tokens[i].type == '-' && i == 0) ) { //printf(\"%s\\n\", tokens[i+1].str); tokens[i].type = TK_NOTYPE; //tokens[i].str = tmp; for(int j = 31 ; j >= 0 ; j --){ tokens[i+1].str[j] = tokens[i+1].str[j-1]; } tokens[i+1].str[0] = '-'; // printf(\"%s\\n\", tokens[i+1].str); for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE) { for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } /* * Init the tokens ! * TODO */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == '!') { tokens[i].type = TK_NOTYPE; int tmp = char2int(tokens[i+1].str); if(tmp == 0){ memset(tokens[i+1].str, 0 ,sizeof(tokens[i+1].str)); tokens[i+1].str[0] = '1'; } else{ memset(tokens[i+1].str, 0 , sizeof(tokens[i+1].str)); } for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE) { for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } /* * TODO * Jie yin yong * */ for(int i = 0 ; i < tokens_len ; i ++) { if( (tokens[i].type == '*' && i > 0 && tokens[i-1].type != NUM && tokens[i-1].type != HEX && tokens[i-1].type != RESGISTER && tokens[i+1].type == NUM ) || (tokens[i].type == '*' && i > 0 && tokens[i-1].type != NUM && tokens[i-1].type != HEX && tokens[i-1].type != RESGISTER && tokens[i+1].type == HEX ) || (tokens[i].type == '*' && i == 0) ) { tokens[i].type = TK_NOTYPE; int tmp = char2int(tokens[i+1].str); uintptr_t a = (uintptr_t)tmp; int value = *((int*)a); int2char(value, tokens[i+1].str); // for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE){ for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } \u200b \u4e0a\u9762\u7684\u4ee3\u7801\u4e3b\u8981\u5b9e\u73b0\u4e86\u9884\u5904\u7406\u8fc7\u7a0b\uff0c\u5e0c\u671b\u8bfb\u8005\u4eec\u4ed4\u7ec6\u7ec6\u5fc3\u7406\u89e3\u5e76\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\uff0c\u5728\u4e0a\u9762\u6211\u4eec\u4f7f\u7528\u4e86 char2int \u4ee5\u53ca int2char \u51fd\u6570\uff0c\u4e0b\u9762\u4e5f\u7ed9\u51fa\u4e86\u4ee3\u7801\uff1a int char2int(char s[]){ int s_size = strlen(s); int res = 0 ; for(int i = 0 ; i < s_size ; i ++) { res += s[i] - '0'; res *= 10; } res /= 10; return res; } void int2char(int x, char str[]){ int len = strlen(str); memset(str, 0, len); int tmp_index = 0; int tmp_x = x; int x_size = 0, flag = 1; while(tmp_x){ tmp_x /= 10; x_size ++; flag *= 10; } flag /= 10; while(x) { int a = x / flag; x %= flag; flag /= 10; str[tmp_index ++] = a + '0'; } } \u200b \u5728\u5b8c\u6210\u8bcd\u6cd5\u5206\u6790\u4ee5\u53ca\u9012\u5f52\u6c42\u503c\u529f\u80fd\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 main_loop \u4e2d\u8c03\u7528\u4e86 static int cmd_p(char* args){ if(args == NULL){ printf(\"No args\\n\"); return 0; } // printf(\"args = %s\\n\", args); bool flag = false; expr(args, &flag); return 0; } \u200b \u81f3\u6b64\uff0c\u5c31\u5b8c\u6210\u4e86\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd \u5982\u4f55\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801 \u200b \u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa gen-expr.c \u7684\u53c2\u8003\u4ee3\u7801\uff0c\u4e3b\u8981\u5c31\u662f\u4ee3\u7801\u903b\u8f91\uff0c\u6ca1\u4ec0\u4e48\u590d\u6742\u5ea6 int choose(int n){ int flag = rand() % 3 ; // 0 1 2 printf(\"index = %d, flag = %d. \\n\",index_buf, flag); return flag; } void gen_num(){ int num = rand()% 100; int num_size = 0, num_tmp = num; while(num_tmp){ num_tmp /= 10; num_size ++; } int x = 1; while(num_size) { x *= 10; num_size -- ; } x /= 10; while(num) { char c = num / x + '0'; num %= x; x /= 10; buf[index_buf ++] = c; } } void gen(char c){ buf[index_buf ++] = c; } void gen_rand_op(){ char op[4] = {'+', '-', '*', '/'}; int op_position = rand() % 4; buf[index_buf ++] = op[op_position]; } static void gen_rand_expr() { // buf[0] = '\\0'; if(index_buf > 65530) printf(\"overSize\\n\"); switch (choose(3)) { case 0: gen_num(); break; case 1: gen('('); gen_rand_expr(); gen(')'); break; default: gen_rand_expr(); gen_rand_op(); gen_rand_expr(); break; } } \u81f3\u6b64pa1.2\u5b8c\u6210 PA1.3 \u6269\u5c55\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd \u200b \u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u5b9e\u73b0\u4e86\uff0c\u53ef\u4ee5\u4f1a\u770b\u53c2\u8003 \u5b9e\u73b0\u76d1\u89c6\u70b9 \u200b \u6211\u4eec\u9700\u8981\u5148\u5bf9\u76d1\u89c6\u70b9\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u8865\u5145 typedef struct watchpoint { int NO; struct watchpoint *next; // TODO: Add more members if necessary bool flag; // use / unuse char expr[100]; int new_value; int old_value; } WP; \u200b \u8fd9\u91cc\u4e3b\u8981\u6dfb\u52a0\u4e86\u4e00\u4e2a flag \u6765\u8bb0\u5f55\u662f\u5426\u4f7f\u7528\uff0c new_value \u548c old_value \u6765\u8bb0\u5f55\u8868\u8fbe\u5f0f\u524d\u540e\u7684\u503c \u200b \u4e4b\u540e\u5c31\u6765\u5b9e\u73b0 new_wp() \u548c free_wp(WP *wp) \u51fd\u6570\uff0c\u5206\u522b\u4ee3\u8868\u83b7\u53d6\u4e00\u4e2a\u7a7a\u95f2\u8282\u70b9\u548c\u91ca\u653e\u8282\u70b9\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a WP* new_wp(){ for(WP* p = free_ ; p -> next != NULL ; p = p -> next){ if( p -> flag == false){ p -> flag = true; if(head == NULL){ head = p; } return p; } } printf(\"No unuse point.\\n\"); assert(0); return NULL; } void free_wp(WP *wp){ if(head -> NO == wp -> NO){ head -> flag = false; head = NULL; printf(\"Delete watchpoint success.\\n\"); return ; } for(WP* p = head ; p -> next != NULL ; p = p -> next){ if(p -> next -> NO == wp -> NO) { p -> next = p -> next -> next; p -> next -> flag = false; // \u6ca1\u6709\u88ab\u4f7f\u7528 printf(\"free succes.\\n\"); return ; } } } \u200b \u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u57fa\u672c\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u76d1\u89c6\u5668\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4e3b\u8981\u7684\u589e\u5220\u67e5\u76d1\u89c6\u70b9\u4ee3\u7801\u5982\u4e0b\uff1a void sdb_watchpoint_display(){ bool flag = true; for(int i = 0 ; i < NR_WP ; i ++){ if(wp_pool[i].flag){ printf(\"Watchpoint.No: %d, expr = \\\"%s\\\", old_value = %d, new_value = %d\\n\", wp_pool[i].NO, wp_pool[i].expr,wp_pool[i].old_value, wp_pool[i].new_value); flag = false; } } if(flag) printf(\"No watchpoint now.\\n\"); } void delete_watchpoint(int no){ for(int i = 0 ; i < NR_WP ; i ++) if(wp_pool[i].NO == no){ free_wp(&wp_pool[i]); return ; } } void create_watchpoint(char* args){ WP* p = new_wp(); strcpy(p -> expr, args); bool success = false; int tmp = expr(p -> expr,&success); if(success) p -> old_value = tmp; else printf(\"\u521b\u5efawatchpoint\u7684\u65f6\u5019expr\u6c42\u503c\u51fa\u73b0\u95ee\u9898\\n\"); printf(\"Create watchpoint No.%d success.\\n\", p -> NO); } \u200b \u540c\u65f6\u8c03\u7528\u4ee3\u7801\u5982\u4e0b\uff1a static int cmd_info(char *args){ if(args == NULL) printf(\"No args.\\n\"); else if(strcmp(args, \"r\") == 0) isa_reg_display(); else if(strcmp(args, \"w\") == 0) sdb_watchpoint_display(); return 0; } static int cmd_d (char *args){ if(args == NULL) printf(\"No args.\\n\"); else{ delete_watchpoint(atoi(args)); } return 0; } static int cmd_w(char* args){ create_watchpoint(args); return 0; } \u200b \u4e3a\u4e86\u6bcf\u6b21\u5728 CPU \u8fd0\u884c\u4e00\u6b21\u4e4b\u540e\u90fd\u8fdb\u884c\u4e00\u6b21\u68c0\u67e5\uff0c\u8fd9\u91cc\u6211\u4eec\u5728 cpu \u4e2d\u7684 trace_and_difftest \u51fd\u6570\u4e2d\u8fdb\u884c\u4fee\u6539\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a static void trace_and_difftest(Decode *_this, vaddr_t dnpc) { #ifdef CONFIG_ITRACE_COND if (ITRACE_COND) { log_write(\"%s\\n\", _this->logbuf); } #endif if (g_print_step) { IFDEF(CONFIG_ITRACE, puts(_this->logbuf)); } IFDEF(CONFIG_DIFFTEST, difftest_step(_this->pc, dnpc)); // Scan all watchpoint. for(int i = 0 ; i < NR_WP; i ++){ if(wp_pool[i].flag) { bool success = false; int tmp = expr(wp_pool[i].expr,&success); if(success){ if(tmp != wp_pool[i].old_value) { nemu_state.state = NEMU_STOP; printf(\"NO EQ\\n\"); return ; } } else{ printf(\"expr error.\\n\"); assert(0); } } } } \u5982\u4f55\u9605\u8bfb\u624b\u518c \u200b \u72b6\u6001\u673a\u5728\u6587\u7ae0\u5c31\u5df2\u7ecf\u7ed9\u51fa\u4e86 RTFM \u7406\u89e3\u4e86\u79d1\u5b66\u67e5\u9605\u624b\u518c\u7684\u65b9\u6cd5\u4e4b\u540e, \u8bf7\u4f60\u5c1d\u8bd5\u5728\u4f60\u9009\u62e9\u7684ISA\u624b\u518c\u4e2d\u67e5\u9605\u4ee5\u4e0b\u95ee\u9898\u6240\u5728\u7684\u4f4d\u7f6e, \u628a\u9700\u8981\u9605\u8bfb\u7684\u8303\u56f4\u5199\u5230\u4f60\u7684\u5b9e\u9a8c\u62a5\u544a\u91cc\u9762: riscv32 riscv32\u6709\u54ea\u51e0\u79cd\u6307\u4ee4\u683c\u5f0f? 6\u79cd\uff0cR/I/S/U/B/J LUI\u6307\u4ee4\u7684\u884c\u4e3a\u662f\u4ec0\u4e48? \u7528\u4e8e\u5c06\u4e00\u4e2a\u7acb\u5373\u6570\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4d mstatus\u5bc4\u5b58\u5668\u7684\u7ed3\u6784\u662f\u600e\u4e48\u6837\u7684? \u5b58\u50a8\u5bc4\u5b58\u5668\u72b6\u6001\uff0c\u8be6\u60c5\u89c1 Volume\u2161 \u200b shell \u7edf\u8ba1\u4ee3\u7801\u884c\u6570\uff0c\u5728 scripts/native.mk \u6587\u4ef6\u7684\u6700\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a count: @echo \"Counting functions in .c and .h files...\" @find . \\( -name \"*.c\" -o -name \"*.h\" \\) -exec cat {} + | grep -c '.*' countNoun: @echo \"Counting functions in .c and .h files...No Have Space\" @find . \\( -name \"*.c\" -o -name \"*.h\" \\) -exec cat {} + | grep -cE '^.+$$' \u200b \u6ce8\u610f\u7f29\u8fdb\uff0c\u4e0d\u8981\u4f7f\u7528\u7a7a\u683c\uff0c\u7edf\u4e00\u7528 tab \uff0c\u4fdd\u5b58\u9000\u51fa\u540e\u53ef\u4ee5\u4f7f\u7528 make count \u548c make countNoun \u6765\u7edf\u8ba1\u542b\u4e0e\u4e0d\u542b\u7a7a\u884c\u7684\u4ee3\u7801\u6570\u91cf \u200b \u8bf7\u89e3\u91cagcc\u4e2d\u7684 -Wall \u548c -Werror \u6709\u4ec0\u4e48\u4f5c\u7528? \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 -Wall \u548c -Werror ? \u200b \u8fd9\u91cc\u7684 -Wall \u548c -Werror \u662f\u4e3a\u4e86\u542f\u7528\u6240\u6709\u7684\u8b66\u544a\u4fe1\u606f\uff0c\u4ee5\u53ca\u5c06\u8b66\u544a\u4fe1\u606f\u8f6c\u4e3a\u9519\u8bef\u4fe1\u606f\uff0c\u4f5c\u7528\u662f\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u51cf\u5c11 Bug \u7684\u51fa\u73b0","title":"pa1"},{"location":"nju-pa/Pa1_Summary/#pa1","text":"","title":"Pa1\u603b\u7ed3"},{"location":"nju-pa/Pa1_Summary/#pa11","text":"","title":"Pa1.1"},{"location":"nju-pa/Pa1_Summary/#pa","text":"\u200b \u672c\u6b21\u5b9e\u9a8c\u662f\u57fa\u4e8e riscv32 \u6765\u5b8c\u6210\u7684\uff0c\u5982\u679c\u9009\u62e9\u7684\u5176\u4ed6ISA\uff0c\u53ef\u4ee5\u53c2\u8003\u601d\u8def","title":"\u5728\u5f00\u59cb\u6109\u5feb\u7684PA\u4e4b\u65c5\u4e4b\u524d"},{"location":"nju-pa/Pa1_Summary/#_1","text":"\u200b \u8ba1\u7b97\u673a\u53ef\u4ee5\u6ca1\u6709\u5bc4\u5b58\u5668\u5417\uff1f\uff08\u5efa\u8bae\u4e8c\u5468\u76ee\u601d\u8003\uff09--\u7b49\u5f85\u4e8c\u5468\u76ee\u8865\u5145 \u200b \u5c1d\u8bd5\u7406\u89e3\u8ba1\u7b97\u673a\u5982\u4f55\u8ba1\u7b97\uff1f\u753b\u51fa1+2+...+100\u7684\u72b6\u6001\u673a \u200b (0,x ,x )->(1,0 ,x )->(2,0 ,0 )->(3,0 ,1 )->(4,1 ,1 )->(5,1 ,2 )->(6,3 ,2 )->(7,3 ,3 )->(8,6 ,3 )->(9,6 ,4 )->(10,10 ,4 )...\u4f9d\u6b21\u7c7b\u63a8\uff08\u4e24\u6b21\u4e00\u5faa\u73af\uff0cr2+1,r1+=r2\uff09","title":"\u5f00\u5929\u8f9f\u5730\u7684\u7bc7\u7ae0"},{"location":"nju-pa/Pa1_Summary/#rtfsc","text":"\u200b \u5728 cmd_c() \u51fd\u6570\u4e2d, \u8c03\u7528 cpu_exec() \u7684\u65f6\u5019\u4f20\u5165\u4e86\u53c2\u6570 -1 , \u4f60\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5417? cmd_c \u51fd\u6570\u5728 monitior/sdb/sdb.c \u4e2d\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u8ffd\u8e2a cpu_exec() \u51fd\u6570\uff0c\u53ef\u4ee5\u5728 CPU \u76f8\u5173\u4ee3\u7801\u4e2d\u627e\u5230\u5982\u4e0b\u51fd\u6570\u5b9a\u4e49 /* Simulate how the CPU works. */ void cpu_exec(uint64_t n) { g_print_step = (n < MAX_INST_TO_PRINT); switch (nemu_state.state) { case NEMU_END: case NEMU_ABORT: printf(\"Program execution has ended. To restart the program, exit NEMU and run again.\\n\"); return; default: nemu_state.state = NEMU_RUNNING; } uint64_t timer_start = get_time(); execute(n); ... } } \u200b \u53ef\u4ee5\u53d1\u73b0\u7ee7\u7eed\u8c03\u7528\u4e86\u51fd\u6570 execute static void execute(uint64_t n) { Decode s; for (;n > 0; n --) { exec_once(&s, cpu.pc); g_nr_guest_inst ++; trace_and_difftest(&s, cpu.pc); if (nemu_state.state != NEMU_RUNNING) break; IFDEF(CONFIG_DEVICE, device_update()); } } \u200b \u56e0\u6b64\u5f53\u4f20\u5165 -1 \u7684\u65f6\u5019\uff0c for \u5faa\u73af\u4e0d\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u76f4\u63a5\u5728 cpu_exec \u51fd\u6570\u4e2d\u6267\u884c\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u4e0d\u4f1a\u8fdb\u884c\u65b0\u7684\u6307\u4ee4\u3002 \u4e3a\u4e86\u6d4b\u8bd5\u5927\u5bb6\u662f\u5426\u5df2\u7ecf\u7406\u89e3\u6846\u67b6\u4ee3\u7801, \u6211\u4eec\u7ed9\u5927\u5bb6\u8bbe\u7f6e\u4e00\u4e2a\u7ec3\u4e60: \u5982\u679c\u5728\u8fd0\u884cNEMU\u4e4b\u540e\u76f4\u63a5\u952e\u5165 q \u9000\u51fa, \u4f60\u4f1a\u53d1\u73b0\u7ec8\u7aef\u8f93\u51fa\u4e86\u4e00\u4e9b\u9519\u8bef\u4fe1\u606f. \u8bf7\u5206\u6790\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u662f\u4ec0\u4e48\u539f\u56e0\u9020\u6210\u7684, \u7136\u540e\u5c1d\u8bd5\u5728NEMU\u4e2d\u4fee\u590d\u5b83. \u200b \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5148\u53bb\u89c2\u5bdf\u8f93\u5165 q \u4e4b\u540e\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f static int cmd_q(char *args) { return -1; } \u200b \u5b83\u4f1a\u76f4\u63a5\u8fd4\u56de -1 \uff0c\u6211\u4eec\u56de\u5230 main_loop \u4e2d int i; for (i = 0; i < NR_CMD; i ++) { if (strcmp(cmd, cmd_table[i].name) == 0) { if (cmd_table[i].handler(args) < 0) { return; } break; } } \u200b \u4ece\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd4\u56de\u503c\u5c0f\u4e8e0\u7684\u65f6\u5019\u4f1a\u76f4\u63a5 return \u6211\u4eec\u7ee7\u7eed\u8ffd\u8e2a\uff0c return \u4e4b\u540e\u56de\u5230\u4e86 nemu-main.c \u4e2d /* Start engine. */ engine_start(); return is_exit_status_bad(); } \u200b \u5176\u4e2d engine_start() \u5c31\u662f\u542f\u52a8 main_loop \u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd4\u56de\u7684\u662f is_exit_status_bad \u6211\u4eec\u53ef\u4ee5\u5728 utils \u4e2d\u627e\u5230\u4ed6 int is_exit_status_bad() { printf(\"nemu_state = %d\\n\",nemu_state.state); int good = (nemu_state.state == NEMU_END && nemu_state.halt_ret == 0) || (nemu_state.state == NEMU_QUIT); return !good; } \u200b \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5728 cmd_q \u51fd\u6570\u4e2d\u5c06 NEMU_STATE \u8bbe\u7f6e\u4e3a NEMU_QUIT \u5373\u53ef,\u4ee3\u7801\u5982\u4e0b static int cmd_q(char *args) { nemu_state.state = NEMU_QUIT; return -1; }","title":"RTFSC"},{"location":"nju-pa/Pa1_Summary/#_2","text":"\u5728\u8fd9\u91cc\u4ee5\u53ca\u63a5\u4e0b\u4e00\u4e2a\u5c0f\u7ae0\u8282\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5982\u4e0b\u51e0\u4e2a\u57fa\u672c\u529f\u80fd\uff1a \u547d\u4ee4 \u683c\u5f0f \u4f7f\u7528\u4e3e\u4f8b \u8bf4\u660e \u5e2e\u52a9(1) help help \u6253\u5370\u547d\u4ee4\u7684\u5e2e\u52a9\u4fe1\u606f \u7ee7\u7eed\u8fd0\u884c(1) c c \u7ee7\u7eed\u8fd0\u884c\u88ab\u6682\u505c\u7684\u7a0b\u5e8f \u9000\u51fa(1) q q \u9000\u51faNEMU \u5355\u6b65\u6267\u884c si [N] si 10 \u8ba9\u7a0b\u5e8f\u5355\u6b65\u6267\u884c N \u6761\u6307\u4ee4\u540e\u6682\u505c\u6267\u884c, \u5f53 N \u6ca1\u6709\u7ed9\u51fa\u65f6, \u7f3a\u7701\u4e3a 1 \u6253\u5370\u7a0b\u5e8f\u72b6\u6001 info SUBCMD info r info w \u6253\u5370\u5bc4\u5b58\u5668\u72b6\u6001 \u6253\u5370\u76d1\u89c6\u70b9\u4fe1\u606f \u626b\u63cf\u5185\u5b58(2) x N EXPR x 10 $esp \u6c42\u51fa\u8868\u8fbe\u5f0f EXPR \u7684\u503c, \u5c06\u7ed3\u679c\u4f5c\u4e3a\u8d77\u59cb\u5185\u5b58 \u5730\u5740, \u4ee5\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u8f93\u51fa\u8fde\u7eed\u7684 N \u4e2a4\u5b57\u8282 \u8868\u8fbe\u5f0f\u6c42\u503c p EXPR p $eax + 1 \u6c42\u51fa\u8868\u8fbe\u5f0f EXPR \u7684\u503c, EXPR \u652f\u6301\u7684 \u8fd0\u7b97\u8bf7\u89c1 \u8c03\u8bd5\u4e2d\u7684\u8868\u8fbe\u5f0f\u6c42\u503c \u5c0f\u8282 \u8bbe\u7f6e\u76d1\u89c6\u70b9 w EXPR w *0x2000 \u5f53\u8868\u8fbe\u5f0f EXPR \u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6, \u6682\u505c\u7a0b\u5e8f\u6267\u884c \u5220\u9664\u76d1\u89c6\u70b9 d N d 2 \u5220\u9664\u5e8f\u53f7\u4e3a N \u7684\u76d1\u89c6\u70b9","title":"\u57fa\u7840\u8bbe\u65bd"},{"location":"nju-pa/Pa1_Summary/#_3","text":"\u200b \u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u76f4\u63a5\u8c03\u7528 cpu_exec \u51fd\u6570\u5373\u53ef static int cmd_si(char *args){ int step = 0; if(args == NULL) step = 1; else sscanf(args,\"%d\",&step);// \u8bfb\u5165 Step cpu_exec(step); return 0; }","title":"\u5355\u6b65\u6267\u884c"},{"location":"nju-pa/Pa1_Summary/#_4","text":"\u200b \u6211\u4eec\u7ecf\u8fc7 RTFSC \u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728 reg.c \u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u5f53\u524d\u6307\u4ee4\u96c6\u7684\u5bc4\u5b58\u5668\u7ed3\u6784\uff0c\u540c\u65f6\u5728 isa-def \u4e2d\u53ef\u4ee5\u627e\u5230 CPU_state \u7684\u5b9a\u4e49 typedef struct { word_t gpr[32]; // general purpose register; vaddr_t pc; } riscv32_CPU_state; \u200b \u5728\u8fd9\u91cc gpr \u7684\u503c\u5c31\u4ee3\u8868\u4e86\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6253\u5370\u5bc4\u5b58\u5668\u7684\u503c\u7684\u51fd\u6570\u5982\u4e0b: void isa_reg_display() { int length = sizeof(regs) / sizeof(regs[0]); for(int i = 0 ; i < length ; i ++) printf(\"reg$%s ---> %d\\n\",regs[i], cpu.gpr[i]); } \u200b \u540c\u65f6\u9700\u8981\u5728 sdb.c \u4e2d\u5b9a\u4e49 info r static int cmd_info(char *args){ if(args == NULL) printf(\"No args.\\n\"); else if(strcmp(args, \"r\") == 0) isa_reg_display(); else if(strcmp(args, \"w\") == 0) sdb_watchpoint_display(); return 0; }","title":"\u6253\u5370\u5bc4\u5b58\u5668"},{"location":"nju-pa/Pa1_Summary/#_5","text":"\u200b \u4e3a\u4e86\u5b9e\u73b0\u626b\u63cf\u5185\u5b58\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 memory \u76f8\u5173\u7684\u4ee3\u7801\u4e2d\u627e\u5230 paddr_read \u8fd9\u4e2a\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u8f93\u5165\u53c2\u6570\u5373\u53ef static int cmd_x(char *args){ char* n = strtok(args,\" \"); char* baseaddr = strtok(NULL,\" \"); int len = 0; paddr_t addr = 0; sscanf(n, \"%d\", &len); sscanf(baseaddr,\"%x\", &addr); for(int i = 0 ; i < len ; i ++) { printf(\"%x\\n\",paddr_read(addr,4));//addr len addr = addr + 4; } return 0; } \u81f3\u6b64pa1\u9636\u6bb51\u7ed3\u675f","title":"\u626b\u63cf\u5185\u5b58"},{"location":"nju-pa/Pa1_Summary/#pa12","text":"","title":"Pa1.2"},{"location":"nju-pa/Pa1_Summary/#_6","text":"","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"nju-pa/Pa1_Summary/#_7","text":"\u200b \u8bcd\u6cd5\u5206\u6790\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u5c31\u662f\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u5206\u89e3\u6210\u6211\u4eec\u5b9a\u4e49\u7684token\u7c7b\u578b\uff0c\u53ca type,val_str \u7684\u7c7b\u578b typedef struct token { int type; char str[32]; } Token; \u200b \u901a\u8fc7\u9605\u8bfb\u624b\u518c\uff0c\u6211\u4eec\u53d1\u73b0\u8bcd\u6cd5\u5206\u6790\u7684\u8fc7\u7a0b\u662f\u6839\u636e\u4e00\u4e2a\u4e2a\u81ea\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\u6765\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u5b9a\u4e49\u89c4\u5219 rules \uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801 enum { TK_NOTYPE = 256, NUM = 1, RESGISTER = 2, HEX = 3, EQ = 4, NOTEQ = 5, OR = 6, AND = 7, ZUO = 8, YOU = 9, LEQ = 10, YINYONG = 11, POINT, NEG }; static struct rule { const char *regex; int token_type; } rules[] = { /* TODO: Add more rules. * Pay attention to the precedence level of different rules. */ {\" +\", TK_NOTYPE}, // spaces {\"\\\\+\", '+'}, // plus {\"\\\\-\", '-'}, // sub {\"\\\\*\", '*'}, // mul {\"\\\\/\", '/'}, // div {\"\\\\(\", ZUO}, {\"\\\\)\", YOU}, /* * Inset the '(' and ')' on the [0-9] bottom case Bug. */ {\"\\\\<\\\\=\", LEQ}, // TODO {\"\\\\=\\\\=\", EQ}, // equal {\"\\\\!\\\\=\", NOTEQ}, {\"\\\\|\\\\|\", OR}, // Opetor {\"\\\\&\\\\&\", AND}, {\"\\\\!\", '!'}, //{\"\\\\$[a-z]*\", RESGISTER}, {\"\\\\$[a-zA-Z]*[0-9]*\", RESGISTER}, {\"0[xX][0-9a-fA-F]+\", HEX}, {\"[0-9]*\", NUM}, }; \u200b \u8fd9\u91cc\u4ee3\u7801\u6ca1\u4ec0\u4e48\u590d\u6742\u7684\u5730\u65b9\uff0c\u4e3b\u8981\u5c31\u662f\u6839\u636e\u4e0d\u540c\u7684\u5b58\u50a8\u7c7b\u578b\u5bf9\u5e94\u4e0a\u4e0d\u540c\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee5\u53ca type \u7c7b\u578b\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u6ce8\u610f \u5148\u540e\u987a\u4e0d\u540c \u4ee5\u53ca \u8f6c\u4e49\u7b26\u53f7\u7684\u4f7f\u7528 \u200b \u5728\u5b9a\u4e49\u597d\u89c4\u5219\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u539f\u672c\u7684 make_tokens \u4ee3\u7801\u4e0a\u8fdb\u884c\u4fee\u6539\u5373\u53ef\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b static bool make_token(char *e) { int position = 0; int i; regmatch_t pmatch; nr_token = 0; while (e[position] != '\\0') { /* Try all rules one by one. */ for (i = 0; i < NR_REGEX; i ++) { if (regexec(&re[i], e + position, 1, &pmatch, 0) == 0 && pmatch.rm_so == 0) { // char *substr_start = e + position; int substr_len = pmatch.rm_eo; /* Log(\"match rules[%d] = \\\"%s\\\" at position %d with len %d: %.*s\", i, rules[i].regex, position, substr_len, substr_len, substr_start); */ position += substr_len; /* TODO: Now a new token is recognized with rules[i]. Add codes * to record the token in the array `tokens'. For certain types * of tokens, some extra actions should be performed. */ Token tmp_token; switch (rules[i].token_type) { case '+': tmp_token.type = '+'; tokens[nr_token ++] = tmp_token; break; case '-': tmp_token.type = '-'; tokens[nr_token ++] = tmp_token; break; case '*': tmp_token.type = '*'; tokens[nr_token ++] = tmp_token; break; case '/': tmp_token.type = '/'; tokens[nr_token ++] = tmp_token; break; case 256: break; case '!': tmp_token.type = '!'; tokens[nr_token ++] = tmp_token; break; case 9: tmp_token.type = ')'; tokens[nr_token ++] = tmp_token; break; case 8: tmp_token.type = '('; tokens[nr_token ++] = tmp_token; break; // Special case 1: // num tokens[nr_token].type = 1; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 2: // regex tokens[nr_token].type = 2; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 3: // HEX tokens[nr_token].type = 3; strncpy(tokens[nr_token].str, &e[position - substr_len], substr_len); nr_token ++; break; case 4: tokens[nr_token].type = 4; strcpy(tokens[nr_token].str, \"==\"); nr_token++; break; case 5: tokens[nr_token].type = 5; strcpy(tokens[nr_token].str, \"!=\"); nr_token++;case 6: tokens[nr_token].type = 6; strcpy(tokens[nr_token].str, \"||\"); nr_token++; break; case 7: tokens[nr_token].type = 7; strcpy(tokens[nr_token].str, \"&&\"); nr_token++; break; case 10: tokens[nr_token].type = 10; strcpy(tokens[nr_token].str, \"<=\"); nr_token ++; break; default: printf(\"i = %d and No rules is com.\\n\", i); break; } len = nr_token; break; } } if (i == NR_REGEX) { printf(\"no match at position %d\\n%s\\n%*.s^\\n\", position, e, position, \"\"); return false; } } return true; } \u200b \u8fd9\u91cc\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\uff0c\u4ee3\u7801\u7684\u6267\u884c\u903b\u8f91\u662f\u628a\u539f\u59cb\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\uff0c\u9010\u4e2a\u5339\u914d\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 rules \u89c4\u5219\uff0c\u5339\u914d\u6210\u529f\u4e4b\u540e\uff0c\u5c31\u8fdb\u884c\u5904\u7406\u3002\u5728\u6211\u4eec\u7684 tokens \u6570\u7ec4\u4e4b\u4e2d\u52a0\u5165\u6211\u4eec\u5339\u914d\u6210\u529f\u540e\u7684 token \uff0c\u4e3b\u8981\u5305\u62ec\u5b83\u7684\u7c7b\u578b\u4ee5\u53ca\u8bb0\u5f55\u7684\u503c\u3002\u4f46\u662f\u8fd9\u91cc\u7684\u5339\u914d\u4e00\u5b9a\u8981\u5bf9\u5e94\u4e4b\u524d\u5b9a\u4e49\u7684\u89c4\u5219\u3002","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"nju-pa/Pa1_Summary/#_8","text":"\u200b \u901a\u8fc7\u4e0a\u8ff0\u7684\u8868\u8fbe\u5f0f\u5206\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u8868\u8fbe\u5f0f\u6c42\u503c\u4e86\uff0c\u5148\u7ed9\u51fa check_parentheses() \u53c2\u8003\u4ee3\u7801\uff0c\u5c31\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u53cc\u6307\u9488\u7b97\u6cd5 bool check_parentheses(int p, int q) { if(tokens[p].type != '(' || tokens[q].type != ')') return false; int l = p , r = q; while(l < r) { if(tokens[l].type == '('){ if(tokens[r].type == ')') { l ++ , r --; continue; } else r --; } else if(tokens[l].type == ')') return false; else l ++; } return true; } \u200b \u4ece expr.c \u7684\u51fd\u6570\u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u6240\u6709\u7684\u8868\u8fbe\u5f0f\u884c\u4e3a\u90fd\u662f\u4ece expr \u51fd\u6570\u5f00\u59cb\u7684\uff0c\u540c\u65f6\u6211\u4eec\u53d1\u73b0\u6267\u884c\u8ba1\u7b97\u7684\u51fd\u6570\u662f eval ,\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801 uint32_t eval(int p, int q) { if (p > q) { /* Bad expression */ assert(0); return -1; } else if (p == q) { /* Single token. * For now this token should be a number. * Return the value of the number. */ return atoi(tokens[p].str); } else if (check_parentheses(p, q) == true) { /* The expression is surrounded by a matched pair of parentheses. * If that is the case, just throw away the parentheses. */ // printf(\"check p = %d, q = %d\\n\",p + 1 , q - 1); return eval(p + 1, q - 1); } /* else if(check_parentheses(p, q) == false){ printf(\"Unique\\n\"); return -1; } */ else { int op = -1; // op = the position of \u4e3b\u8fd0\u7b97\u7b26 in the token expression; bool flag = false; for(int i = p ; i <= q ; i ++) { if(tokens[i].type == '(') { while(tokens[i].type != ')') i ++; } if(!flag && tokens[i].type == 6){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 7 ){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 5){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 4){ flag = true; op = max(op,i); } if(!flag && tokens[i].type == 10){ flag = true; op = max(op, i); } if(!flag && (tokens[i].type == '+' || tokens[i].type == '-')){ flag = true; op = max(op, i); } if(!flag && (tokens[i].type == '*' || tokens[i].type == '/') ){ op = max(op, i); } } // printf(\"op position is %d\\n\", op); // if register return $register int op_type = tokens[op].type; // \u9012\u5f52\u5904\u7406\u5269\u4f59\u7684\u90e8\u5206 uint32_t val1 = eval(p, op - 1); uint32_t val2 = eval(op + 1, q); // printf(\"val1 = %d, val2 = %d \\n\", val1, val2); switch (op_type) { case '+': return val1 + val2; case '-': return val1 - val2; case '*': return val1 * val2; case '/': if(val2 == 0){//printf(\"division can't zero;\\n\"); division_zero = true; return 0; } return val1 / val2; case 4: return val1 == val2; case 5: return val1 != val2; case 6: return val1 || val2; case 7: return val1 && val2; default: printf(\"No Op type.\"); assert(0); } } } \u200b \u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5728\u6761\u4ef6\u5224\u65ad\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u679c p>q \u4ee3\u8868\u4ee3\u7801\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u76f4\u63a5\u62a5\u9519\u5373\u53ef\uff1b\u5f53 p==q \u7684\u65f6\u5019\u4ee3\u8868\u6211\u4eec\u9700\u8981\u53d6\u51fa\u5176\u4e2d\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 atoi \u51fd\u6570\u76f4\u63a5\u5c06\u5b57\u7b26\u6570\u7ec4\u8f6c\u4e3a int \u5373\u53ef\uff1b\u5f53 p,q \u901a\u8fc7\u62ec\u53f7\u6821\u9a8c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u9012\u5f52\u5904\u7406\u62ec\u53f7\u91cc\u9762\u7684\u90e8\u5206\u5373\u53ef\uff1b\u6700\u540e\u5c31\u662f\u8fdb\u5165\u4e86\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6839 \u636e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5f97\u51fa\u4e3b\u8fd0\u7b97\u7b26\u7684\u4f4d\u7f6e \uff0c\u8fd9\u91cc\u7684\u5b9e\u73b0\u601d\u8def\u662f\u901a\u8fc7\u8bb0\u5f55\u4e00\u4e2a\u6807\u8bb0 flag \u7684\u503c\uff0c\u7136\u540e\u518d\u904d\u5386\u7684\u65f6\u5019\uff0c\u6839\u636e\u4f18\u5148\u7ea7\u6765\u8fdb\u884c if \u5224\u65ad\uff0c\u4f18\u5148\u7ea7\u4f4e\u7684\u5148\u8bb0\u5f55\u540c\u65f6\u5c06 flag \u7684\u503c\u8fdb\u884c\u6539\u53d8\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u5f97\u51fa\u4e3b\u8fd0\u7b97\u7b26\u7684\u4f4d\u7f6e\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86 \u4f4e\u4f18\u5148\u7ea7\u4ee5\u53ca\u6700\u540e\u51fa\u73b0\u7684\u8fd0\u7b97\u7b26\u4e3a\u4e3b\u8fd0\u7b97\u7b26 \uff1b\u4e4b\u540e\u5c31\u8fdb\u884c\u8ba1\u7b97\u5904\u7406\u5373\u53ef\u3002 \u200b \u4f46\u662f\u5728\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u503c\uff08\u8d1f\u6570\uff0c\u5341\u516d\u8fdb\u5236\u6570\u7b49\uff09\uff0c\u6211\u4eec\u9700\u8981\u518d make_tokens \u4e4b\u540e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\uff1a /* * Get length */ int tokens_len = 0; for(int i = 0 ; i < 30 ; i ++) { if(tokens[i].type == 0) break; tokens_len ++; } /* * Init the tokens regex * TODO * */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == 2) { bool flag = true; int tmp = isa_reg_str2val(tokens[i].str, &flag); if(flag){ int2char(tmp, tokens[i].str); // transfrom the str --> $egx }else{ printf(\"Transfrom error. \\n\"); assert(0); } } } /* * Init the tokens HEX */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == 3)// Hex num { int value = strtol(tokens[i].str, NULL, 16); int2char(value, tokens[i].str); } } /* * Init the tokens str. 1 ==> -1. * */ for(int i = 0 ; i < tokens_len ; i ++) { if((tokens[i].type == '-' && i > 0 && tokens[i-1].type != NUM && tokens[i+1].type == NUM) || (tokens[i].type == '-' && i == 0) ) { //printf(\"%s\\n\", tokens[i+1].str); tokens[i].type = TK_NOTYPE; //tokens[i].str = tmp; for(int j = 31 ; j >= 0 ; j --){ tokens[i+1].str[j] = tokens[i+1].str[j-1]; } tokens[i+1].str[0] = '-'; // printf(\"%s\\n\", tokens[i+1].str); for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE) { for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } /* * Init the tokens ! * TODO */ for(int i = 0 ; i < tokens_len ; i ++) { if(tokens[i].type == '!') { tokens[i].type = TK_NOTYPE; int tmp = char2int(tokens[i+1].str); if(tmp == 0){ memset(tokens[i+1].str, 0 ,sizeof(tokens[i+1].str)); tokens[i+1].str[0] = '1'; } else{ memset(tokens[i+1].str, 0 , sizeof(tokens[i+1].str)); } for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE) { for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } /* * TODO * Jie yin yong * */ for(int i = 0 ; i < tokens_len ; i ++) { if( (tokens[i].type == '*' && i > 0 && tokens[i-1].type != NUM && tokens[i-1].type != HEX && tokens[i-1].type != RESGISTER && tokens[i+1].type == NUM ) || (tokens[i].type == '*' && i > 0 && tokens[i-1].type != NUM && tokens[i-1].type != HEX && tokens[i-1].type != RESGISTER && tokens[i+1].type == HEX ) || (tokens[i].type == '*' && i == 0) ) { tokens[i].type = TK_NOTYPE; int tmp = char2int(tokens[i+1].str); uintptr_t a = (uintptr_t)tmp; int value = *((int*)a); int2char(value, tokens[i+1].str); // for(int j = 0 ; j < tokens_len ; j ++){ if(tokens[j].type == TK_NOTYPE){ for(int k = j +1 ; k < tokens_len ; k ++){ tokens[k - 1] = tokens[k]; } tokens_len -- ; } } } } \u200b \u4e0a\u9762\u7684\u4ee3\u7801\u4e3b\u8981\u5b9e\u73b0\u4e86\u9884\u5904\u7406\u8fc7\u7a0b\uff0c\u5e0c\u671b\u8bfb\u8005\u4eec\u4ed4\u7ec6\u7ec6\u5fc3\u7406\u89e3\u5e76\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\uff0c\u5728\u4e0a\u9762\u6211\u4eec\u4f7f\u7528\u4e86 char2int \u4ee5\u53ca int2char \u51fd\u6570\uff0c\u4e0b\u9762\u4e5f\u7ed9\u51fa\u4e86\u4ee3\u7801\uff1a int char2int(char s[]){ int s_size = strlen(s); int res = 0 ; for(int i = 0 ; i < s_size ; i ++) { res += s[i] - '0'; res *= 10; } res /= 10; return res; } void int2char(int x, char str[]){ int len = strlen(str); memset(str, 0, len); int tmp_index = 0; int tmp_x = x; int x_size = 0, flag = 1; while(tmp_x){ tmp_x /= 10; x_size ++; flag *= 10; } flag /= 10; while(x) { int a = x / flag; x %= flag; flag /= 10; str[tmp_index ++] = a + '0'; } } \u200b \u5728\u5b8c\u6210\u8bcd\u6cd5\u5206\u6790\u4ee5\u53ca\u9012\u5f52\u6c42\u503c\u529f\u80fd\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 main_loop \u4e2d\u8c03\u7528\u4e86 static int cmd_p(char* args){ if(args == NULL){ printf(\"No args\\n\"); return 0; } // printf(\"args = %s\\n\", args); bool flag = false; expr(args, &flag); return 0; } \u200b \u81f3\u6b64\uff0c\u5c31\u5b8c\u6210\u4e86\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd","title":"\u9012\u5f52\u6c42\u503c"},{"location":"nju-pa/Pa1_Summary/#_9","text":"\u200b \u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa gen-expr.c \u7684\u53c2\u8003\u4ee3\u7801\uff0c\u4e3b\u8981\u5c31\u662f\u4ee3\u7801\u903b\u8f91\uff0c\u6ca1\u4ec0\u4e48\u590d\u6742\u5ea6 int choose(int n){ int flag = rand() % 3 ; // 0 1 2 printf(\"index = %d, flag = %d. \\n\",index_buf, flag); return flag; } void gen_num(){ int num = rand()% 100; int num_size = 0, num_tmp = num; while(num_tmp){ num_tmp /= 10; num_size ++; } int x = 1; while(num_size) { x *= 10; num_size -- ; } x /= 10; while(num) { char c = num / x + '0'; num %= x; x /= 10; buf[index_buf ++] = c; } } void gen(char c){ buf[index_buf ++] = c; } void gen_rand_op(){ char op[4] = {'+', '-', '*', '/'}; int op_position = rand() % 4; buf[index_buf ++] = op[op_position]; } static void gen_rand_expr() { // buf[0] = '\\0'; if(index_buf > 65530) printf(\"overSize\\n\"); switch (choose(3)) { case 0: gen_num(); break; case 1: gen('('); gen_rand_expr(); gen(')'); break; default: gen_rand_expr(); gen_rand_op(); gen_rand_expr(); break; } } \u81f3\u6b64pa1.2\u5b8c\u6210","title":"\u5982\u4f55\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801"},{"location":"nju-pa/Pa1_Summary/#pa13","text":"","title":"PA1.3"},{"location":"nju-pa/Pa1_Summary/#_10","text":"\u200b \u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u5b9e\u73b0\u4e86\uff0c\u53ef\u4ee5\u4f1a\u770b\u53c2\u8003","title":"\u6269\u5c55\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd"},{"location":"nju-pa/Pa1_Summary/#_11","text":"\u200b \u6211\u4eec\u9700\u8981\u5148\u5bf9\u76d1\u89c6\u70b9\u7684\u7ed3\u6784\u4f53\u8fdb\u884c\u8865\u5145 typedef struct watchpoint { int NO; struct watchpoint *next; // TODO: Add more members if necessary bool flag; // use / unuse char expr[100]; int new_value; int old_value; } WP; \u200b \u8fd9\u91cc\u4e3b\u8981\u6dfb\u52a0\u4e86\u4e00\u4e2a flag \u6765\u8bb0\u5f55\u662f\u5426\u4f7f\u7528\uff0c new_value \u548c old_value \u6765\u8bb0\u5f55\u8868\u8fbe\u5f0f\u524d\u540e\u7684\u503c \u200b \u4e4b\u540e\u5c31\u6765\u5b9e\u73b0 new_wp() \u548c free_wp(WP *wp) \u51fd\u6570\uff0c\u5206\u522b\u4ee3\u8868\u83b7\u53d6\u4e00\u4e2a\u7a7a\u95f2\u8282\u70b9\u548c\u91ca\u653e\u8282\u70b9\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a WP* new_wp(){ for(WP* p = free_ ; p -> next != NULL ; p = p -> next){ if( p -> flag == false){ p -> flag = true; if(head == NULL){ head = p; } return p; } } printf(\"No unuse point.\\n\"); assert(0); return NULL; } void free_wp(WP *wp){ if(head -> NO == wp -> NO){ head -> flag = false; head = NULL; printf(\"Delete watchpoint success.\\n\"); return ; } for(WP* p = head ; p -> next != NULL ; p = p -> next){ if(p -> next -> NO == wp -> NO) { p -> next = p -> next -> next; p -> next -> flag = false; // \u6ca1\u6709\u88ab\u4f7f\u7528 printf(\"free succes.\\n\"); return ; } } } \u200b \u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u57fa\u672c\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u76d1\u89c6\u5668\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4e3b\u8981\u7684\u589e\u5220\u67e5\u76d1\u89c6\u70b9\u4ee3\u7801\u5982\u4e0b\uff1a void sdb_watchpoint_display(){ bool flag = true; for(int i = 0 ; i < NR_WP ; i ++){ if(wp_pool[i].flag){ printf(\"Watchpoint.No: %d, expr = \\\"%s\\\", old_value = %d, new_value = %d\\n\", wp_pool[i].NO, wp_pool[i].expr,wp_pool[i].old_value, wp_pool[i].new_value); flag = false; } } if(flag) printf(\"No watchpoint now.\\n\"); } void delete_watchpoint(int no){ for(int i = 0 ; i < NR_WP ; i ++) if(wp_pool[i].NO == no){ free_wp(&wp_pool[i]); return ; } } void create_watchpoint(char* args){ WP* p = new_wp(); strcpy(p -> expr, args); bool success = false; int tmp = expr(p -> expr,&success); if(success) p -> old_value = tmp; else printf(\"\u521b\u5efawatchpoint\u7684\u65f6\u5019expr\u6c42\u503c\u51fa\u73b0\u95ee\u9898\\n\"); printf(\"Create watchpoint No.%d success.\\n\", p -> NO); } \u200b \u540c\u65f6\u8c03\u7528\u4ee3\u7801\u5982\u4e0b\uff1a static int cmd_info(char *args){ if(args == NULL) printf(\"No args.\\n\"); else if(strcmp(args, \"r\") == 0) isa_reg_display(); else if(strcmp(args, \"w\") == 0) sdb_watchpoint_display(); return 0; } static int cmd_d (char *args){ if(args == NULL) printf(\"No args.\\n\"); else{ delete_watchpoint(atoi(args)); } return 0; } static int cmd_w(char* args){ create_watchpoint(args); return 0; } \u200b \u4e3a\u4e86\u6bcf\u6b21\u5728 CPU \u8fd0\u884c\u4e00\u6b21\u4e4b\u540e\u90fd\u8fdb\u884c\u4e00\u6b21\u68c0\u67e5\uff0c\u8fd9\u91cc\u6211\u4eec\u5728 cpu \u4e2d\u7684 trace_and_difftest \u51fd\u6570\u4e2d\u8fdb\u884c\u4fee\u6539\uff0c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a static void trace_and_difftest(Decode *_this, vaddr_t dnpc) { #ifdef CONFIG_ITRACE_COND if (ITRACE_COND) { log_write(\"%s\\n\", _this->logbuf); } #endif if (g_print_step) { IFDEF(CONFIG_ITRACE, puts(_this->logbuf)); } IFDEF(CONFIG_DIFFTEST, difftest_step(_this->pc, dnpc)); // Scan all watchpoint. for(int i = 0 ; i < NR_WP; i ++){ if(wp_pool[i].flag) { bool success = false; int tmp = expr(wp_pool[i].expr,&success); if(success){ if(tmp != wp_pool[i].old_value) { nemu_state.state = NEMU_STOP; printf(\"NO EQ\\n\"); return ; } } else{ printf(\"expr error.\\n\"); assert(0); } } } }","title":"\u5b9e\u73b0\u76d1\u89c6\u70b9"},{"location":"nju-pa/Pa1_Summary/#_12","text":"\u200b \u72b6\u6001\u673a\u5728\u6587\u7ae0\u5c31\u5df2\u7ecf\u7ed9\u51fa\u4e86 RTFM \u7406\u89e3\u4e86\u79d1\u5b66\u67e5\u9605\u624b\u518c\u7684\u65b9\u6cd5\u4e4b\u540e, \u8bf7\u4f60\u5c1d\u8bd5\u5728\u4f60\u9009\u62e9\u7684ISA\u624b\u518c\u4e2d\u67e5\u9605\u4ee5\u4e0b\u95ee\u9898\u6240\u5728\u7684\u4f4d\u7f6e, \u628a\u9700\u8981\u9605\u8bfb\u7684\u8303\u56f4\u5199\u5230\u4f60\u7684\u5b9e\u9a8c\u62a5\u544a\u91cc\u9762: riscv32 riscv32\u6709\u54ea\u51e0\u79cd\u6307\u4ee4\u683c\u5f0f? 6\u79cd\uff0cR/I/S/U/B/J LUI\u6307\u4ee4\u7684\u884c\u4e3a\u662f\u4ec0\u4e48? \u7528\u4e8e\u5c06\u4e00\u4e2a\u7acb\u5373\u6570\u52a0\u8f7d\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4d mstatus\u5bc4\u5b58\u5668\u7684\u7ed3\u6784\u662f\u600e\u4e48\u6837\u7684? \u5b58\u50a8\u5bc4\u5b58\u5668\u72b6\u6001\uff0c\u8be6\u60c5\u89c1 Volume\u2161 \u200b shell \u7edf\u8ba1\u4ee3\u7801\u884c\u6570\uff0c\u5728 scripts/native.mk \u6587\u4ef6\u7684\u6700\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a count: @echo \"Counting functions in .c and .h files...\" @find . \\( -name \"*.c\" -o -name \"*.h\" \\) -exec cat {} + | grep -c '.*' countNoun: @echo \"Counting functions in .c and .h files...No Have Space\" @find . \\( -name \"*.c\" -o -name \"*.h\" \\) -exec cat {} + | grep -cE '^.+$$' \u200b \u6ce8\u610f\u7f29\u8fdb\uff0c\u4e0d\u8981\u4f7f\u7528\u7a7a\u683c\uff0c\u7edf\u4e00\u7528 tab \uff0c\u4fdd\u5b58\u9000\u51fa\u540e\u53ef\u4ee5\u4f7f\u7528 make count \u548c make countNoun \u6765\u7edf\u8ba1\u542b\u4e0e\u4e0d\u542b\u7a7a\u884c\u7684\u4ee3\u7801\u6570\u91cf \u200b \u8bf7\u89e3\u91cagcc\u4e2d\u7684 -Wall \u548c -Werror \u6709\u4ec0\u4e48\u4f5c\u7528? \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 -Wall \u548c -Werror ? \u200b \u8fd9\u91cc\u7684 -Wall \u548c -Werror \u662f\u4e3a\u4e86\u542f\u7528\u6240\u6709\u7684\u8b66\u544a\u4fe1\u606f\uff0c\u4ee5\u53ca\u5c06\u8b66\u544a\u4fe1\u606f\u8f6c\u4e3a\u9519\u8bef\u4fe1\u606f\uff0c\u4f5c\u7528\u662f\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u51cf\u5c11 Bug \u7684\u51fa\u73b0","title":"\u5982\u4f55\u9605\u8bfb\u624b\u518c"},{"location":"tools/useGuide/","text":"Makedocs \u5e38\u7528\u6307\u4ee4 Makedocs \u5e38\u7528\u6307\u4ee4 instruction make -- mk \u521b\u5efa\u9879\u76ee mkdocs new project \u542f\u52a8\u670d\u52a1 mkdocs serve \u751f\u6210\u7f51\u7ad9(site/) mkdocs build \u5220\u9664\u5197\u4f59\u6587\u4ef6 mkdocs build --clean help mkdocs --help mkdocs build --help","title":"makedocs"},{"location":"tools/useGuide/#makedocs","text":"","title":"Makedocs \u5e38\u7528\u6307\u4ee4"},{"location":"tools/useGuide/#makedocs-instruction","text":"make -- mk \u521b\u5efa\u9879\u76ee mkdocs new project \u542f\u52a8\u670d\u52a1 mkdocs serve \u751f\u6210\u7f51\u7ad9(site/) mkdocs build \u5220\u9664\u5197\u4f59\u6587\u4ef6 mkdocs build --clean help mkdocs --help mkdocs build --help","title":"Makedocs \u5e38\u7528\u6307\u4ee4 instruction"},{"location":"xv6/","text":"Waitting","title":"xv6"},{"location":"xv6/#waitting","text":"","title":"Waitting"}]}